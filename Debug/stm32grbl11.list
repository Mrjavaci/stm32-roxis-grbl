
stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a728  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800a838  0800a838  0001a838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800af04  0800af04  0001af04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800af0c  0800af0c  0001af0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000520  20000000  0800af10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000108c  20000520  0800b430  00020520  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  200015ac  0800b430  000215ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020520  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029ccb  00000000  00000000  00020549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000075e9  00000000  00000000  0004a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0001227b  00000000  00000000  000517fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e8  00000000  00000000  00063a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003888  00000000  00000000  00064b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00015f58  00000000  00000000  000683e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002442d  00000000  00000000  0007e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0005d82b  00000000  00000000  000a276d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000fff98  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033d0  00000000  00000000  000fffec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000520 	.word	0x20000520
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a820 	.word	0x0800a820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000524 	.word	0x20000524
 800014c:	0800a820 	.word	0x0800a820

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_frsub>:
 8000678:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800067c:	e002      	b.n	8000684 <__addsf3>
 800067e:	bf00      	nop

08000680 <__aeabi_fsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000684 <__addsf3>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	bf1f      	itttt	ne
 8000688:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800068c:	ea92 0f03 	teqne	r2, r3
 8000690:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000694:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000698:	d06a      	beq.n	8000770 <__addsf3+0xec>
 800069a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006a2:	bfc1      	itttt	gt
 80006a4:	18d2      	addgt	r2, r2, r3
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	4048      	eorgt	r0, r1
 80006aa:	4041      	eorgt	r1, r0
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	2b19      	cmp	r3, #25
 80006b2:	bf88      	it	hi
 80006b4:	4770      	bxhi	lr
 80006b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4240      	negne	r0, r0
 80006c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4249      	negne	r1, r1
 80006d6:	ea92 0f03 	teq	r2, r3
 80006da:	d03f      	beq.n	800075c <__addsf3+0xd8>
 80006dc:	f1a2 0201 	sub.w	r2, r2, #1
 80006e0:	fa41 fc03 	asr.w	ip, r1, r3
 80006e4:	eb10 000c 	adds.w	r0, r0, ip
 80006e8:	f1c3 0320 	rsb	r3, r3, #32
 80006ec:	fa01 f103 	lsl.w	r1, r1, r3
 80006f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f4:	d502      	bpl.n	80006fc <__addsf3+0x78>
 80006f6:	4249      	negs	r1, r1
 80006f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000700:	d313      	bcc.n	800072a <__addsf3+0xa6>
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d306      	bcc.n	8000716 <__addsf3+0x92>
 8000708:	0840      	lsrs	r0, r0, #1
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	f102 0201 	add.w	r2, r2, #1
 8000712:	2afe      	cmp	r2, #254	; 0xfe
 8000714:	d251      	bcs.n	80007ba <__addsf3+0x136>
 8000716:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800071a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071e:	bf08      	it	eq
 8000720:	f020 0001 	biceq.w	r0, r0, #1
 8000724:	ea40 0003 	orr.w	r0, r0, r3
 8000728:	4770      	bx	lr
 800072a:	0049      	lsls	r1, r1, #1
 800072c:	eb40 0000 	adc.w	r0, r0, r0
 8000730:	3a01      	subs	r2, #1
 8000732:	bf28      	it	cs
 8000734:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000738:	d2ed      	bcs.n	8000716 <__addsf3+0x92>
 800073a:	fab0 fc80 	clz	ip, r0
 800073e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000742:	ebb2 020c 	subs.w	r2, r2, ip
 8000746:	fa00 f00c 	lsl.w	r0, r0, ip
 800074a:	bfaa      	itet	ge
 800074c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000750:	4252      	neglt	r2, r2
 8000752:	4318      	orrge	r0, r3
 8000754:	bfbc      	itt	lt
 8000756:	40d0      	lsrlt	r0, r2
 8000758:	4318      	orrlt	r0, r3
 800075a:	4770      	bx	lr
 800075c:	f092 0f00 	teq	r2, #0
 8000760:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000764:	bf06      	itte	eq
 8000766:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800076a:	3201      	addeq	r2, #1
 800076c:	3b01      	subne	r3, #1
 800076e:	e7b5      	b.n	80006dc <__addsf3+0x58>
 8000770:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000774:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000778:	bf18      	it	ne
 800077a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077e:	d021      	beq.n	80007c4 <__addsf3+0x140>
 8000780:	ea92 0f03 	teq	r2, r3
 8000784:	d004      	beq.n	8000790 <__addsf3+0x10c>
 8000786:	f092 0f00 	teq	r2, #0
 800078a:	bf08      	it	eq
 800078c:	4608      	moveq	r0, r1
 800078e:	4770      	bx	lr
 8000790:	ea90 0f01 	teq	r0, r1
 8000794:	bf1c      	itt	ne
 8000796:	2000      	movne	r0, #0
 8000798:	4770      	bxne	lr
 800079a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079e:	d104      	bne.n	80007aa <__addsf3+0x126>
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	bf28      	it	cs
 80007a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a8:	4770      	bx	lr
 80007aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007ae:	bf3c      	itt	cc
 80007b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b4:	4770      	bxcc	lr
 80007b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	4770      	bx	lr
 80007c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c8:	bf16      	itet	ne
 80007ca:	4608      	movne	r0, r1
 80007cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007d0:	4601      	movne	r1, r0
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	bf06      	itte	eq
 80007d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007da:	ea90 0f01 	teqeq	r0, r1
 80007de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_ui2f>:
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e004      	b.n	80007f4 <__aeabi_i2f+0x8>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2f>:
 80007ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	ea5f 0c00 	movs.w	ip, r0
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000800:	4601      	mov	r1, r0
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	e01c      	b.n	8000842 <__aeabi_l2f+0x2a>

08000808 <__aeabi_ul2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e00a      	b.n	800082c <__aeabi_l2f+0x14>
 8000816:	bf00      	nop

08000818 <__aeabi_l2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__aeabi_l2f+0x14>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	ea5f 0c01 	movs.w	ip, r1
 8000830:	bf02      	ittt	eq
 8000832:	4684      	moveq	ip, r0
 8000834:	4601      	moveq	r1, r0
 8000836:	2000      	moveq	r0, #0
 8000838:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800083c:	bf08      	it	eq
 800083e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000842:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000846:	fabc f28c 	clz	r2, ip
 800084a:	3a08      	subs	r2, #8
 800084c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000850:	db10      	blt.n	8000874 <__aeabi_l2f+0x5c>
 8000852:	fa01 fc02 	lsl.w	ip, r1, r2
 8000856:	4463      	add	r3, ip
 8000858:	fa00 fc02 	lsl.w	ip, r0, r2
 800085c:	f1c2 0220 	rsb	r2, r2, #32
 8000860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000864:	fa20 f202 	lsr.w	r2, r0, r2
 8000868:	eb43 0002 	adc.w	r0, r3, r2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f102 0220 	add.w	r2, r2, #32
 8000878:	fa01 fc02 	lsl.w	ip, r1, r2
 800087c:	f1c2 0220 	rsb	r2, r2, #32
 8000880:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000884:	fa21 f202 	lsr.w	r2, r1, r2
 8000888:	eb43 0002 	adc.w	r0, r3, r2
 800088c:	bf08      	it	eq
 800088e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000892:	4770      	bx	lr

08000894 <__aeabi_fmul>:
 8000894:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000898:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800089c:	bf1e      	ittt	ne
 800089e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a2:	ea92 0f0c 	teqne	r2, ip
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d06f      	beq.n	800098c <__aeabi_fmul+0xf8>
 80008ac:	441a      	add	r2, r3
 80008ae:	ea80 0c01 	eor.w	ip, r0, r1
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	bf18      	it	ne
 80008b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008ba:	d01e      	beq.n	80008fa <__aeabi_fmul+0x66>
 80008bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c8:	fba0 3101 	umull	r3, r1, r0, r1
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d4:	bf3e      	ittt	cc
 80008d6:	0049      	lslcc	r1, r1, #1
 80008d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008dc:	005b      	lslcc	r3, r3, #1
 80008de:	ea40 0001 	orr.w	r0, r0, r1
 80008e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e6:	2afd      	cmp	r2, #253	; 0xfd
 80008e8:	d81d      	bhi.n	8000926 <__aeabi_fmul+0x92>
 80008ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008f2:	bf08      	it	eq
 80008f4:	f020 0001 	biceq.w	r0, r0, #1
 80008f8:	4770      	bx	lr
 80008fa:	f090 0f00 	teq	r0, #0
 80008fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000902:	bf08      	it	eq
 8000904:	0249      	lsleq	r1, r1, #9
 8000906:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090e:	3a7f      	subs	r2, #127	; 0x7f
 8000910:	bfc2      	ittt	gt
 8000912:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000916:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800091a:	4770      	bxgt	lr
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	3a01      	subs	r2, #1
 8000926:	dc5d      	bgt.n	80009e4 <__aeabi_fmul+0x150>
 8000928:	f112 0f19 	cmn.w	r2, #25
 800092c:	bfdc      	itt	le
 800092e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000932:	4770      	bxle	lr
 8000934:	f1c2 0200 	rsb	r2, r2, #0
 8000938:	0041      	lsls	r1, r0, #1
 800093a:	fa21 f102 	lsr.w	r1, r1, r2
 800093e:	f1c2 0220 	rsb	r2, r2, #32
 8000942:	fa00 fc02 	lsl.w	ip, r0, r2
 8000946:	ea5f 0031 	movs.w	r0, r1, rrx
 800094a:	f140 0000 	adc.w	r0, r0, #0
 800094e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000952:	bf08      	it	eq
 8000954:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000958:	4770      	bx	lr
 800095a:	f092 0f00 	teq	r2, #0
 800095e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0040      	lsleq	r0, r0, #1
 8000966:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800096a:	3a01      	subeq	r2, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xce>
 800096e:	ea40 000c 	orr.w	r0, r0, ip
 8000972:	f093 0f00 	teq	r3, #0
 8000976:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0049      	lsleq	r1, r1, #1
 800097e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000982:	3b01      	subeq	r3, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xe6>
 8000986:	ea41 010c 	orr.w	r1, r1, ip
 800098a:	e78f      	b.n	80008ac <__aeabi_fmul+0x18>
 800098c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000990:	ea92 0f0c 	teq	r2, ip
 8000994:	bf18      	it	ne
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d00a      	beq.n	80009b2 <__aeabi_fmul+0x11e>
 800099c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a0:	bf18      	it	ne
 80009a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a6:	d1d8      	bne.n	800095a <__aeabi_fmul+0xc6>
 80009a8:	ea80 0001 	eor.w	r0, r0, r1
 80009ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	bf17      	itett	ne
 80009b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009bc:	4608      	moveq	r0, r1
 80009be:	f091 0f00 	teqne	r1, #0
 80009c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c6:	d014      	beq.n	80009f2 <__aeabi_fmul+0x15e>
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d101      	bne.n	80009d2 <__aeabi_fmul+0x13e>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d10f      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009d2:	ea93 0f0c 	teq	r3, ip
 80009d6:	d103      	bne.n	80009e0 <__aeabi_fmul+0x14c>
 80009d8:	024b      	lsls	r3, r1, #9
 80009da:	bf18      	it	ne
 80009dc:	4608      	movne	r0, r1
 80009de:	d108      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009e0:	ea80 0001 	eor.w	r0, r0, r1
 80009e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f0:	4770      	bx	lr
 80009f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fdiv>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d069      	beq.n	8000ae8 <__aeabi_fdiv+0xec>
 8000a14:	eba2 0203 	sub.w	r2, r2, r3
 8000a18:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1c:	0249      	lsls	r1, r1, #9
 8000a1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a22:	d037      	beq.n	8000a94 <__aeabi_fdiv+0x98>
 8000a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf38      	it	cc
 8000a38:	005b      	lslcc	r3, r3, #1
 8000a3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a42:	428b      	cmp	r3, r1
 8000a44:	bf24      	itt	cs
 8000a46:	1a5b      	subcs	r3, r3, r1
 8000a48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a50:	bf24      	itt	cs
 8000a52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5e:	bf24      	itt	cs
 8000a60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a6c:	bf24      	itt	cs
 8000a6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7e:	d1e0      	bne.n	8000a42 <__aeabi_fdiv+0x46>
 8000a80:	2afd      	cmp	r2, #253	; 0xfd
 8000a82:	f63f af50 	bhi.w	8000926 <__aeabi_fmul+0x92>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9c:	327f      	adds	r2, #127	; 0x7f
 8000a9e:	bfc2      	ittt	gt
 8000aa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa8:	4770      	bxgt	lr
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	e737      	b.n	8000926 <__aeabi_fmul+0x92>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0040      	lsleq	r0, r0, #1
 8000ac2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac6:	3a01      	subeq	r2, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xc2>
 8000aca:	ea40 000c 	orr.w	r0, r0, ip
 8000ace:	f093 0f00 	teq	r3, #0
 8000ad2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0049      	lsleq	r1, r1, #1
 8000ada:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ade:	3b01      	subeq	r3, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xda>
 8000ae2:	ea41 010c 	orr.w	r1, r1, ip
 8000ae6:	e795      	b.n	8000a14 <__aeabi_fdiv+0x18>
 8000ae8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aec:	ea92 0f0c 	teq	r2, ip
 8000af0:	d108      	bne.n	8000b04 <__aeabi_fdiv+0x108>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	f47f af7d 	bne.w	80009f2 <__aeabi_fmul+0x15e>
 8000af8:	ea93 0f0c 	teq	r3, ip
 8000afc:	f47f af70 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e776      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b04:	ea93 0f0c 	teq	r3, ip
 8000b08:	d104      	bne.n	8000b14 <__aeabi_fdiv+0x118>
 8000b0a:	024b      	lsls	r3, r1, #9
 8000b0c:	f43f af4c 	beq.w	80009a8 <__aeabi_fmul+0x114>
 8000b10:	4608      	mov	r0, r1
 8000b12:	e76e      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b18:	bf18      	it	ne
 8000b1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1e:	d1ca      	bne.n	8000ab6 <__aeabi_fdiv+0xba>
 8000b20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b24:	f47f af5c 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	f47f af3c 	bne.w	80009a8 <__aeabi_fmul+0x114>
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_fcmpun>:
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	d102      	bne.n	8000c34 <__aeabi_fcmpun+0x14>
 8000c2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c32:	d108      	bne.n	8000c46 <__aeabi_fcmpun+0x26>
 8000c34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c38:	d102      	bne.n	8000c40 <__aeabi_fcmpun+0x20>
 8000c3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_fcmpun+0x26>
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0001 	mov.w	r0, #1
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_f2iz>:
 8000c4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c54:	d30f      	bcc.n	8000c76 <__aeabi_f2iz+0x2a>
 8000c56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_f2iz+0x30>
 8000c60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c68:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c70:	bf18      	it	ne
 8000c72:	4240      	negne	r0, r0
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c80:	d101      	bne.n	8000c86 <__aeabi_f2iz+0x3a>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d105      	bne.n	8000c92 <__aeabi_f2iz+0x46>
 8000c86:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c8a:	bf08      	it	eq
 8000c8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2uiz>:
 8000c98:	0042      	lsls	r2, r0, #1
 8000c9a:	d20e      	bcs.n	8000cba <__aeabi_f2uiz+0x22>
 8000c9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ca0:	d30b      	bcc.n	8000cba <__aeabi_f2uiz+0x22>
 8000ca2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ca6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000caa:	d409      	bmi.n	8000cc0 <__aeabi_f2uiz+0x28>
 8000cac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000cb8:	4770      	bx	lr
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	4770      	bx	lr
 8000cc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cc4:	d101      	bne.n	8000cca <__aeabi_f2uiz+0x32>
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	d102      	bne.n	8000cd0 <__aeabi_f2uiz+0x38>
 8000cca:	f04f 30ff 	mov.w	r0, #4294967295
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <NVIC_PriorityGroupConfig+0x10>)
 8000cda:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000cde:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000ce2:	60d8      	str	r0, [r3, #12]
}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000cec:	78c3      	ldrb	r3, [r0, #3]
 8000cee:	b1fb      	cbz	r3, 8000d30 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <NVIC_Init+0x5c>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000cf2:	230f      	movs	r3, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cf4:	68d2      	ldr	r2, [r2, #12]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000cf6:	2101      	movs	r1, #1
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cf8:	43d2      	mvns	r2, r2
{
 8000cfa:	b430      	push	{r4, r5}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cfc:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d00:	7844      	ldrb	r4, [r0, #1]
    tmppre = (0x4 - tmppriority);
 8000d02:	f1c2 0504 	rsb	r5, r2, #4
    tmpsub = tmpsub >> tmppriority;
 8000d06:	fa23 f202 	lsr.w	r2, r3, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d0a:	7883      	ldrb	r3, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d0c:	40ac      	lsls	r4, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000d0e:	4013      	ands	r3, r2
 8000d10:	4323      	orrs	r3, r4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d12:	7802      	ldrb	r2, [r0, #0]
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <NVIC_Init+0x60>)
    tmppriority = tmppriority << 0x04;
 8000d16:	011b      	lsls	r3, r3, #4
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d18:	f002 051f 	and.w	r5, r2, #31
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d1c:	1884      	adds	r4, r0, r2
 8000d1e:	b2db      	uxtb	r3, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d20:	40a9      	lsls	r1, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d22:	f884 3300 	strb.w	r3, [r4, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d26:	0952      	lsrs	r2, r2, #5
 8000d28:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d2c:	bc30      	pop	{r4, r5}
 8000d2e:	4770      	bx	lr
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d30:	2101      	movs	r1, #1
 8000d32:	7803      	ldrb	r3, [r0, #0]
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <NVIC_Init+0x60>)
 8000d36:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d38:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d3c:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d42:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000d50:	7983      	ldrb	r3, [r0, #6]
 8000d52:	b33b      	cbz	r3, 8000da4 <EXTI_Init+0x54>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <EXTI_Init+0x7c>)
 8000d56:	6801      	ldr	r1, [r0, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
{
 8000d5a:	b410      	push	{r4}
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d5c:	ea22 0201 	bic.w	r2, r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	ea22 0201 	bic.w	r2, r2, r1
 8000d68:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000d6a:	7902      	ldrb	r2, [r0, #4]
 8000d6c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000d70:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d74:	6814      	ldr	r4, [r2, #0]
 8000d76:	4321      	orrs	r1, r4
 8000d78:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000d7a:	6899      	ldr	r1, [r3, #8]
 8000d7c:	6802      	ldr	r2, [r0, #0]
 8000d7e:	ea21 0102 	bic.w	r1, r1, r2
 8000d82:	6099      	str	r1, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000d84:	68d9      	ldr	r1, [r3, #12]
 8000d86:	ea21 0102 	bic.w	r1, r1, r2
 8000d8a:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000d8c:	7941      	ldrb	r1, [r0, #5]
 8000d8e:	2910      	cmp	r1, #16
 8000d90:	d013      	beq.n	8000dba <EXTI_Init+0x6a>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000d92:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000d96:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d9a:	6819      	ldr	r1, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000d9c:	bc10      	pop	{r4}
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000da4:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000da6:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dac:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	ea22 0201 	bic.w	r2, r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000dba:	6899      	ldr	r1, [r3, #8]
}
 8000dbc:	bc10      	pop	{r4}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000dbe:	4311      	orrs	r1, r2
 8000dc0:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000dc2:	68d9      	ldr	r1, [r3, #12]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	60da      	str	r2, [r3, #12]
}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000dd0:	4602      	mov	r2, r0
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <EXTI_GetITStatus+0x18>)
 8000dd4:	6819      	ldr	r1, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000dd6:	6958      	ldr	r0, [r3, #20]
 8000dd8:	4010      	ands	r0, r2
 8000dda:	d003      	beq.n	8000de4 <EXTI_GetITStatus+0x14>
 8000ddc:	4211      	tst	r1, r2
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000dde:	bf14      	ite	ne
 8000de0:	2001      	movne	r0, #1
 8000de2:	2000      	moveq	r0, #0
  }
  return bitstatus;
}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40010400 	.word	0x40010400

08000dec <EXTI_ClearITPendingBit>:
 8000dec:	4b01      	ldr	r3, [pc, #4]	; (8000df4 <EXTI_ClearITPendingBit+0x8>)
 8000dee:	6158      	str	r0, [r3, #20]
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40010400 	.word	0x40010400

08000df8 <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <FLASH_Unlock+0xc>)
 8000dfa:	4903      	ldr	r1, [pc, #12]	; (8000e08 <FLASH_Unlock+0x10>)
  FLASH->KEYR = FLASH_KEY2;
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY1;
 8000dfe:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8000e00:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8000e02:	4770      	bx	lr
 8000e04:	40022000 	.word	0x40022000
 8000e08:	45670123 	.word	0x45670123
 8000e0c:	cdef89ab 	.word	0xcdef89ab

08000e10 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e10:	4a32      	ldr	r2, [pc, #200]	; (8000edc <FLASH_ErasePage+0xcc>)
 8000e12:	68d3      	ldr	r3, [r2, #12]
 8000e14:	07db      	lsls	r3, r3, #31
 8000e16:	d407      	bmi.n	8000e28 <FLASH_ErasePage+0x18>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e18:	68d3      	ldr	r3, [r2, #12]
 8000e1a:	0759      	lsls	r1, r3, #29
 8000e1c:	d448      	bmi.n	8000eb0 <FLASH_ErasePage+0xa0>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e1e:	68d3      	ldr	r3, [r2, #12]
 8000e20:	06db      	lsls	r3, r3, #27
 8000e22:	d519      	bpl.n	8000e58 <FLASH_ErasePage+0x48>
      {
        flashstatus = FLASH_ERROR_WRP;
 8000e24:	2003      	movs	r0, #3
 8000e26:	4770      	bx	lr
 8000e28:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e2c:	68d1      	ldr	r1, [r2, #12]
 8000e2e:	07c9      	lsls	r1, r1, #31
 8000e30:	d40c      	bmi.n	8000e4c <FLASH_ErasePage+0x3c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e32:	68d1      	ldr	r1, [r2, #12]
 8000e34:	0749      	lsls	r1, r1, #29
 8000e36:	d434      	bmi.n	8000ea2 <FLASH_ErasePage+0x92>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e38:	68d2      	ldr	r2, [r2, #12]
 8000e3a:	06d2      	lsls	r2, r2, #27
 8000e3c:	d50a      	bpl.n	8000e54 <FLASH_ErasePage+0x44>
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 8000e3e:	3b01      	subs	r3, #1
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8000e40:	2b00      	cmp	r3, #0
        flashstatus = FLASH_ERROR_WRP;
 8000e42:	f04f 0003 	mov.w	r0, #3
    status = FLASH_TIMEOUT;
 8000e46:	bf08      	it	eq
 8000e48:	2005      	moveq	r0, #5
}
 8000e4a:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	d1ed      	bne.n	8000e2c <FLASH_ErasePage+0x1c>
    status = FLASH_TIMEOUT;
 8000e50:	2005      	movs	r0, #5
 8000e52:	4770      	bx	lr
  if(Timeout == 0x00 )
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d0fb      	beq.n	8000e50 <FLASH_ErasePage+0x40>
    FLASH->CR|= CR_PER_Set;
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <FLASH_ErasePage+0xcc>)
 8000e5a:	6913      	ldr	r3, [r2, #16]
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8000e62:	6150      	str	r0, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8000e64:	6913      	ldr	r3, [r2, #16]
 8000e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6a:	6113      	str	r3, [r2, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000e6c:	68d3      	ldr	r3, [r2, #12]
 8000e6e:	07d9      	lsls	r1, r3, #31
 8000e70:	d520      	bpl.n	8000eb4 <FLASH_ErasePage+0xa4>
 8000e72:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8000e76:	68d1      	ldr	r1, [r2, #12]
 8000e78:	07c8      	lsls	r0, r1, #31
 8000e7a:	d425      	bmi.n	8000ec8 <FLASH_ErasePage+0xb8>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000e7c:	68d1      	ldr	r1, [r2, #12]
 8000e7e:	0749      	lsls	r1, r1, #29
 8000e80:	d426      	bmi.n	8000ed0 <FLASH_ErasePage+0xc0>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e82:	68d2      	ldr	r2, [r2, #12]
    Timeout--;
 8000e84:	3b01      	subs	r3, #1
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000e86:	06d2      	lsls	r2, r2, #27
        flashstatus = FLASH_ERROR_WRP;
 8000e88:	bf4c      	ite	mi
 8000e8a:	2003      	movmi	r0, #3
        flashstatus = FLASH_COMPLETE;
 8000e8c:	2004      	movpl	r0, #4
    status = FLASH_TIMEOUT;
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bf08      	it	eq
 8000e92:	2005      	moveq	r0, #5
    FLASH->CR &= CR_PER_Reset;
 8000e94:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <FLASH_ErasePage+0xcc>)
 8000e9a:	6913      	ldr	r3, [r2, #16]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	6113      	str	r3, [r2, #16]
 8000ea0:	4770      	bx	lr
    Timeout--;
 8000ea2:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8000ea4:	2b00      	cmp	r3, #0
      flashstatus = FLASH_ERROR_PG;
 8000ea6:	f04f 0002 	mov.w	r0, #2
    status = FLASH_TIMEOUT;
 8000eaa:	bf08      	it	eq
 8000eac:	2005      	moveq	r0, #5
}
 8000eae:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	4770      	bx	lr
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000eb4:	68d3      	ldr	r3, [r2, #12]
 8000eb6:	075b      	lsls	r3, r3, #29
 8000eb8:	d40d      	bmi.n	8000ed6 <FLASH_ErasePage+0xc6>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000eba:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 8000ebc:	f013 0f10 	tst.w	r3, #16
 8000ec0:	bf14      	ite	ne
 8000ec2:	2003      	movne	r0, #3
 8000ec4:	2004      	moveq	r0, #4
 8000ec6:	e7e5      	b.n	8000e94 <FLASH_ErasePage+0x84>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	d1d4      	bne.n	8000e76 <FLASH_ErasePage+0x66>
    status = FLASH_TIMEOUT;
 8000ecc:	2005      	movs	r0, #5
 8000ece:	e7e1      	b.n	8000e94 <FLASH_ErasePage+0x84>
      flashstatus = FLASH_ERROR_PG;
 8000ed0:	2002      	movs	r0, #2
    Timeout--;
 8000ed2:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000ed4:	e7db      	b.n	8000e8e <FLASH_ErasePage+0x7e>
      flashstatus = FLASH_ERROR_PG;
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	e7dc      	b.n	8000e94 <FLASH_ErasePage+0x84>
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000

08000ee0 <FLASH_ProgramHalfWord>:
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000ee0:	4a30      	ldr	r2, [pc, #192]	; (8000fa4 <FLASH_ProgramHalfWord+0xc4>)
{
 8000ee2:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000ee4:	68d3      	ldr	r3, [r2, #12]
 8000ee6:	07db      	lsls	r3, r3, #31
 8000ee8:	d408      	bmi.n	8000efc <FLASH_ProgramHalfWord+0x1c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000eea:	68d3      	ldr	r3, [r2, #12]
 8000eec:	075c      	lsls	r4, r3, #29
 8000eee:	d443      	bmi.n	8000f78 <FLASH_ProgramHalfWord+0x98>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000ef0:	68d3      	ldr	r3, [r2, #12]
 8000ef2:	06db      	lsls	r3, r3, #27
 8000ef4:	d51b      	bpl.n	8000f2e <FLASH_ProgramHalfWord+0x4e>
        flashstatus = FLASH_ERROR_WRP;
 8000ef6:	2003      	movs	r0, #3
}
 8000ef8:	bc10      	pop	{r4}
 8000efa:	4770      	bx	lr
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000f00:	68d4      	ldr	r4, [r2, #12]
 8000f02:	07e4      	lsls	r4, r4, #31
 8000f04:	d40c      	bmi.n	8000f20 <FLASH_ProgramHalfWord+0x40>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f06:	68d4      	ldr	r4, [r2, #12]
 8000f08:	0764      	lsls	r4, r4, #29
 8000f0a:	d432      	bmi.n	8000f72 <FLASH_ProgramHalfWord+0x92>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f0c:	68d2      	ldr	r2, [r2, #12]
 8000f0e:	06d2      	lsls	r2, r2, #27
 8000f10:	d50b      	bpl.n	8000f2a <FLASH_ProgramHalfWord+0x4a>
        flashstatus = FLASH_ERROR_WRP;
 8000f12:	2003      	movs	r0, #3
    Timeout--;
 8000f14:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf08      	it	eq
 8000f1a:	2005      	moveq	r0, #5
}
 8000f1c:	bc10      	pop	{r4}
 8000f1e:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f20:	3b01      	subs	r3, #1
 8000f22:	d1ed      	bne.n	8000f00 <FLASH_ProgramHalfWord+0x20>
    status = FLASH_TIMEOUT;
 8000f24:	2005      	movs	r0, #5
}
 8000f26:	bc10      	pop	{r4}
 8000f28:	4770      	bx	lr
  if(Timeout == 0x00 )
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d0fa      	beq.n	8000f24 <FLASH_ProgramHalfWord+0x44>
    FLASH->CR |= CR_PG_Set;
 8000f2e:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <FLASH_ProgramHalfWord+0xc4>)
 8000f30:	6913      	ldr	r3, [r2, #16]
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8000f38:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000f3a:	68d3      	ldr	r3, [r2, #12]
 8000f3c:	07db      	lsls	r3, r3, #31
 8000f3e:	d51e      	bpl.n	8000f7e <FLASH_ProgramHalfWord+0x9e>
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	68d1      	ldr	r1, [r2, #12]
 8000f46:	07c8      	lsls	r0, r1, #31
 8000f48:	d423      	bmi.n	8000f92 <FLASH_ProgramHalfWord+0xb2>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f4a:	68d1      	ldr	r1, [r2, #12]
 8000f4c:	0749      	lsls	r1, r1, #29
 8000f4e:	d424      	bmi.n	8000f9a <FLASH_ProgramHalfWord+0xba>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f50:	68d2      	ldr	r2, [r2, #12]
    Timeout--;
 8000f52:	3b01      	subs	r3, #1
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f54:	06d2      	lsls	r2, r2, #27
        flashstatus = FLASH_ERROR_WRP;
 8000f56:	bf4c      	ite	mi
 8000f58:	2003      	movmi	r0, #3
        flashstatus = FLASH_COMPLETE;
 8000f5a:	2004      	movpl	r0, #4
    status = FLASH_TIMEOUT;
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf08      	it	eq
 8000f60:	2005      	moveq	r0, #5
    FLASH->CR &= CR_PG_Reset;
 8000f62:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <FLASH_ProgramHalfWord+0xc4>)
}
 8000f68:	bc10      	pop	{r4}
    FLASH->CR &= CR_PG_Reset;
 8000f6a:	6913      	ldr	r3, [r2, #16]
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	6113      	str	r3, [r2, #16]
}
 8000f70:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8000f72:	2002      	movs	r0, #2
    Timeout--;
 8000f74:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f76:	e7ce      	b.n	8000f16 <FLASH_ProgramHalfWord+0x36>
      flashstatus = FLASH_ERROR_PG;
 8000f78:	2002      	movs	r0, #2
}
 8000f7a:	bc10      	pop	{r4}
 8000f7c:	4770      	bx	lr
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8000f7e:	68d3      	ldr	r3, [r2, #12]
 8000f80:	075c      	lsls	r4, r3, #29
 8000f82:	d40d      	bmi.n	8000fa0 <FLASH_ProgramHalfWord+0xc0>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8000f84:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 8000f86:	f013 0f10 	tst.w	r3, #16
 8000f8a:	bf14      	ite	ne
 8000f8c:	2003      	movne	r0, #3
 8000f8e:	2004      	moveq	r0, #4
 8000f90:	e7e7      	b.n	8000f62 <FLASH_ProgramHalfWord+0x82>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f92:	3b01      	subs	r3, #1
 8000f94:	d1d6      	bne.n	8000f44 <FLASH_ProgramHalfWord+0x64>
    status = FLASH_TIMEOUT;
 8000f96:	2005      	movs	r0, #5
 8000f98:	e7e3      	b.n	8000f62 <FLASH_ProgramHalfWord+0x82>
      flashstatus = FLASH_ERROR_PG;
 8000f9a:	2002      	movs	r0, #2
    Timeout--;
 8000f9c:	3b01      	subs	r3, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000f9e:	e7dd      	b.n	8000f5c <FLASH_ProgramHalfWord+0x7c>
      flashstatus = FLASH_ERROR_PG;
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	e7de      	b.n	8000f62 <FLASH_ProgramHalfWord+0x82>
 8000fa4:	40022000 	.word	0x40022000

08000fa8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000fa8:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000faa:	78cc      	ldrb	r4, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000fac:	06e3      	lsls	r3, r4, #27
 8000fae:	bf48      	it	mi
 8000fb0:	788b      	ldrbmi	r3, [r1, #2]
 8000fb2:	f004 050f 	and.w	r5, r4, #15
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000fb6:	bf48      	it	mi
 8000fb8:	431d      	orrmi	r5, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000fba:	880b      	ldrh	r3, [r1, #0]
 8000fbc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000fc0:	d033      	beq.n	800102a <GPIO_Init+0x82>
  {
    tmpreg = GPIOx->CRL;
 8000fc2:	2c48      	cmp	r4, #72	; 0x48
 8000fc4:	6802      	ldr	r2, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fc6:	f000 80ad 	beq.w	8001124 <GPIO_Init+0x17c>
 8000fca:	2c28      	cmp	r4, #40	; 0x28
 8000fcc:	f000 8133 	beq.w	8001236 <GPIO_Init+0x28e>
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000fd0:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000fd2:	bf44      	itt	mi
 8000fd4:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000fd8:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 8000fda:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8000fdc:	bf44      	itt	mi
 8000fde:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8000fe2:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 8000fe6:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8000fe8:	bf44      	itt	mi
 8000fea:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8000fee:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 8000ff2:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 8000ff4:	bf44      	itt	mi
 8000ff6:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8000ffa:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 8000ffe:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001000:	bf44      	itt	mi
 8001002:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001006:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 800100a:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 800100c:	bf44      	itt	mi
 800100e:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001012:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 8001016:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 8001018:	bf44      	itt	mi
 800101a:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800101e:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 8001022:	0619      	lsls	r1, r3, #24
 8001024:	f100 8104 	bmi.w	8001230 <GPIO_Init+0x288>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001028:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800102a:	2bff      	cmp	r3, #255	; 0xff
 800102c:	d948      	bls.n	80010c0 <GPIO_Init+0x118>
  {
    tmpreg = GPIOx->CRH;
 800102e:	2c48      	cmp	r4, #72	; 0x48
 8001030:	6842      	ldr	r2, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001032:	d147      	bne.n	80010c4 <GPIO_Init+0x11c>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8001034:	05d9      	lsls	r1, r3, #23
 8001036:	d505      	bpl.n	8001044 <GPIO_Init+0x9c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001038:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 800103c:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001040:	432a      	orrs	r2, r5
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001042:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001044:	059c      	lsls	r4, r3, #22
 8001046:	d506      	bpl.n	8001056 <GPIO_Init+0xae>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 800104c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001050:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001054:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001056:	0559      	lsls	r1, r3, #21
 8001058:	d506      	bpl.n	8001068 <GPIO_Init+0xc0>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 800105e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001062:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001066:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001068:	051c      	lsls	r4, r3, #20
 800106a:	d506      	bpl.n	800107a <GPIO_Init+0xd2>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800106c:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8001070:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001074:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001078:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800107a:	04d9      	lsls	r1, r3, #19
 800107c:	d506      	bpl.n	800108c <GPIO_Init+0xe4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001082:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001086:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800108a:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800108c:	049c      	lsls	r4, r3, #18
 800108e:	d506      	bpl.n	800109e <GPIO_Init+0xf6>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001094:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001098:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800109c:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800109e:	0459      	lsls	r1, r3, #17
 80010a0:	d506      	bpl.n	80010b0 <GPIO_Init+0x108>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 80010a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80010aa:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010ae:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	d504      	bpl.n	80010be <GPIO_Init+0x116>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 80010b8:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80010bc:	6103      	str	r3, [r0, #16]
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80010be:	6042      	str	r2, [r0, #4]
  }
}
 80010c0:	bc30      	pop	{r4, r5}
 80010c2:	4770      	bx	lr
 80010c4:	2c28      	cmp	r4, #40	; 0x28
 80010c6:	d06c      	beq.n	80011a2 <GPIO_Init+0x1fa>
      if (currentpin == pos)
 80010c8:	05d9      	lsls	r1, r3, #23
        tmpreg &= ~pinmask;
 80010ca:	bf44      	itt	mi
 80010cc:	f022 020f 	bicmi.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80010d0:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 80010d2:	059c      	lsls	r4, r3, #22
        tmpreg &= ~pinmask;
 80010d4:	bf44      	itt	mi
 80010d6:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80010da:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 80010de:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 80010e0:	bf44      	itt	mi
 80010e2:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80010e6:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 80010ea:	051c      	lsls	r4, r3, #20
        tmpreg &= ~pinmask;
 80010ec:	bf44      	itt	mi
 80010ee:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80010f2:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 80010f6:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 80010f8:	bf44      	itt	mi
 80010fa:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80010fe:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 8001102:	049c      	lsls	r4, r3, #18
        tmpreg &= ~pinmask;
 8001104:	bf44      	itt	mi
 8001106:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800110a:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 800110e:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 8001110:	bf44      	itt	mi
 8001112:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001116:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 800111a:	041c      	lsls	r4, r3, #16
 800111c:	d5cf      	bpl.n	80010be <GPIO_Init+0x116>
        tmpreg |= (currentmode << pos);
 800111e:	f365 721f 	bfi	r2, r5, #28, #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001122:	e7cc      	b.n	80010be <GPIO_Init+0x116>
      if (currentpin == pos)
 8001124:	07d9      	lsls	r1, r3, #31
 8001126:	d504      	bpl.n	8001132 <GPIO_Init+0x18a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001128:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 800112a:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 800112e:	432a      	orrs	r2, r5
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001130:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001132:	0799      	lsls	r1, r3, #30
 8001134:	d505      	bpl.n	8001142 <GPIO_Init+0x19a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001136:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8001138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800113c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001140:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001142:	0759      	lsls	r1, r3, #29
 8001144:	d505      	bpl.n	8001152 <GPIO_Init+0x1aa>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001146:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8001148:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800114c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001150:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001152:	0719      	lsls	r1, r3, #28
 8001154:	d505      	bpl.n	8001162 <GPIO_Init+0x1ba>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001156:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8001158:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800115c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001160:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001162:	06d9      	lsls	r1, r3, #27
 8001164:	d505      	bpl.n	8001172 <GPIO_Init+0x1ca>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001166:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 8001168:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800116c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001170:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001172:	0699      	lsls	r1, r3, #26
 8001174:	d505      	bpl.n	8001182 <GPIO_Init+0x1da>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001176:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 8001178:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800117c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001180:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001182:	0659      	lsls	r1, r3, #25
 8001184:	d505      	bpl.n	8001192 <GPIO_Init+0x1ea>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001186:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 8001188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800118c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001190:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001192:	0619      	lsls	r1, r3, #24
 8001194:	f57f af48 	bpl.w	8001028 <GPIO_Init+0x80>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001198:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 800119a:	f365 721f 	bfi	r2, r5, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800119e:	6101      	str	r1, [r0, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80011a0:	e742      	b.n	8001028 <GPIO_Init+0x80>
      if (currentpin == pos)
 80011a2:	05d9      	lsls	r1, r3, #23
 80011a4:	d505      	bpl.n	80011b2 <GPIO_Init+0x20a>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80011aa:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80011ae:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011b0:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011b2:	059c      	lsls	r4, r3, #22
 80011b4:	d506      	bpl.n	80011c4 <GPIO_Init+0x21c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011b6:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80011ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80011be:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011c2:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011c4:	0559      	lsls	r1, r3, #21
 80011c6:	d506      	bpl.n	80011d6 <GPIO_Init+0x22e>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80011cc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80011d0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011d4:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011d6:	051c      	lsls	r4, r3, #20
 80011d8:	d506      	bpl.n	80011e8 <GPIO_Init+0x240>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011da:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80011de:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80011e2:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011e6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011e8:	04d9      	lsls	r1, r3, #19
 80011ea:	d506      	bpl.n	80011fa <GPIO_Init+0x252>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 80011f0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80011f4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011f8:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80011fa:	049c      	lsls	r4, r3, #18
 80011fc:	d506      	bpl.n	800120c <GPIO_Init+0x264>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001202:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001206:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800120a:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800120c:	0459      	lsls	r1, r3, #17
 800120e:	d506      	bpl.n	800121e <GPIO_Init+0x276>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001218:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800121c:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800121e:	041c      	lsls	r4, r3, #16
 8001220:	f57f af4d 	bpl.w	80010be <GPIO_Init+0x116>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 8001228:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800122c:	6143      	str	r3, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800122e:	e746      	b.n	80010be <GPIO_Init+0x116>
        tmpreg |= (currentmode << pos);
 8001230:	f365 721f 	bfi	r2, r5, #28, #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001234:	e6f8      	b.n	8001028 <GPIO_Init+0x80>
      if (currentpin == pos)
 8001236:	07d9      	lsls	r1, r3, #31
 8001238:	d504      	bpl.n	8001244 <GPIO_Init+0x29c>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800123a:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 800123c:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001240:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001242:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001244:	0799      	lsls	r1, r3, #30
 8001246:	d505      	bpl.n	8001254 <GPIO_Init+0x2ac>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001248:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 800124a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800124e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001252:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001254:	0759      	lsls	r1, r3, #29
 8001256:	d505      	bpl.n	8001264 <GPIO_Init+0x2bc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001258:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 800125a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800125e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001262:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001264:	0719      	lsls	r1, r3, #28
 8001266:	d505      	bpl.n	8001274 <GPIO_Init+0x2cc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001268:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 800126a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800126e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001272:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001274:	06d9      	lsls	r1, r3, #27
 8001276:	d505      	bpl.n	8001284 <GPIO_Init+0x2dc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001278:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800127a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800127e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001282:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001284:	0699      	lsls	r1, r3, #26
 8001286:	d505      	bpl.n	8001294 <GPIO_Init+0x2ec>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001288:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800128a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800128e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001292:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001294:	0659      	lsls	r1, r3, #25
 8001296:	d505      	bpl.n	80012a4 <GPIO_Init+0x2fc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001298:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800129a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800129e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012a2:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80012a4:	0619      	lsls	r1, r3, #24
 80012a6:	f57f aebf 	bpl.w	8001028 <GPIO_Init+0x80>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012aa:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80012ac:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012b0:	6141      	str	r1, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80012b2:	e6b9      	b.n	8001028 <GPIO_Init+0x80>

080012b4 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 80012b4:	6880      	ldr	r0, [r0, #8]
}
 80012b6:	b280      	uxth	r0, r0
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80012bc:	68c0      	ldr	r0, [r0, #12]
}
 80012be:	b280      	uxth	r0, r0
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop

080012c4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80012c4:	6101      	str	r1, [r0, #16]
}
 80012c6:	4770      	bx	lr

080012c8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80012c8:	6141      	str	r1, [r0, #20]
}
 80012ca:	4770      	bx	lr

080012cc <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80012cc:	b10a      	cbz	r2, 80012d2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ce:	6101      	str	r1, [r0, #16]
 80012d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80012d2:	6141      	str	r1, [r0, #20]
  }
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80012d8:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80012dc:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 80012e0:	bfb4      	ite	lt
 80012e2:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 80012e4:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80012e6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80012ea:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 80012ec:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80012ee:	d01f      	beq.n	8001330 <GPIO_PinRemapConfig+0x58>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80012f0:	02c2      	lsls	r2, r0, #11
 80012f2:	d514      	bpl.n	800131e <GPIO_PinRemapConfig+0x46>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80012f4:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80012f6:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80012fa:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 80012fc:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001300:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8001304:	b121      	cbz	r1, 8001310 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001306:	0d42      	lsrs	r2, r0, #21
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	fa04 f202 	lsl.w	r2, r4, r2
 800130e:	4313      	orrs	r3, r2
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001312:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 8001314:	bfb4      	ite	lt
 8001316:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8001318:	6053      	strge	r3, [r2, #4]
  }  
}
 800131a:	bc30      	pop	{r4, r5}
 800131c:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800131e:	0d42      	lsrs	r2, r0, #21
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	fa04 f202 	lsl.w	r2, r4, r2
 8001326:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800132a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800132e:	e7e9      	b.n	8001304 <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001330:	4d03      	ldr	r5, [pc, #12]	; (8001340 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001332:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001336:	686a      	ldr	r2, [r5, #4]
 8001338:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800133c:	606a      	str	r2, [r5, #4]
 800133e:	e7e1      	b.n	8001304 <GPIO_PinRemapConfig+0x2c>
 8001340:	40010000 	.word	0x40010000

08001344 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001344:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001346:	240f      	movs	r4, #15
 8001348:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 800134c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001350:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001354:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001358:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800135a:	0089      	lsls	r1, r1, #2
 800135c:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800135e:	ea22 0204 	bic.w	r2, r2, r4
 8001362:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	fa00 f101 	lsl.w	r1, r0, r1
 800136a:	4311      	orrs	r1, r2
}
 800136c:	bc10      	pop	{r4}
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800136e:	6099      	str	r1, [r3, #8]
}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop

08001374 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001374:	4b01      	ldr	r3, [pc, #4]	; (800137c <RCC_USBCLKConfig+0x8>)
 8001376:	6018      	str	r0, [r3, #0]
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	424200d8 	.word	0x424200d8

08001380 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <RCC_APB2PeriphClockCmd+0x14>)
 8001382:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 8001384:	b111      	cbz	r1, 800138c <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 8001386:	4318      	orrs	r0, r3
 8001388:	6190      	str	r0, [r2, #24]
 800138a:	4770      	bx	lr
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800138c:	ea23 0000 	bic.w	r0, r3, r0
 8001390:	6190      	str	r0, [r2, #24]
  }
}
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000

08001398 <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <RCC_APB1PeriphClockCmd+0x14>)
 800139a:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 800139c:	b111      	cbz	r1, 80013a4 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 800139e:	4318      	orrs	r0, r3
 80013a0:	61d0      	str	r0, [r2, #28]
 80013a2:	4770      	bx	lr
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013a4:	ea23 0000 	bic.w	r0, r3, r0
 80013a8:	61d0      	str	r0, [r2, #28]
  }
}
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000

080013b0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80013b0:	4a27      	ldr	r2, [pc, #156]	; (8001450 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 80013b2:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80013b4:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 80013b6:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80013b8:	d012      	beq.n	80013e0 <TIM_TimeBaseInit+0x30>
 80013ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013be:	4290      	cmp	r0, r2
 80013c0:	d00e      	beq.n	80013e0 <TIM_TimeBaseInit+0x30>
 80013c2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013c6:	d00b      	beq.n	80013e0 <TIM_TimeBaseInit+0x30>
 80013c8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80013cc:	4290      	cmp	r0, r2
 80013ce:	d007      	beq.n	80013e0 <TIM_TimeBaseInit+0x30>
 80013d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d4:	4290      	cmp	r0, r2
 80013d6:	d003      	beq.n	80013e0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80013d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013dc:	4290      	cmp	r0, r2
 80013de:	d103      	bne.n	80013e8 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80013e0:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80013e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80013e6:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <TIM_TimeBaseInit+0xa4>)
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d017      	beq.n	800141e <TIM_TimeBaseInit+0x6e>
 80013ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013f2:	4290      	cmp	r0, r2
 80013f4:	d013      	beq.n	800141e <TIM_TimeBaseInit+0x6e>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80013f6:	88ca      	ldrh	r2, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80013f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013fc:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80013fe:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001400:	4a13      	ldr	r2, [pc, #76]	; (8001450 <TIM_TimeBaseInit+0xa0>)
{
 8001402:	b430      	push	{r4, r5}
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001404:	888d      	ldrh	r5, [r1, #4]
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001406:	880c      	ldrh	r4, [r1, #0]
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001408:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 800140a:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800140c:	8585      	strh	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800140e:	8504      	strh	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001410:	d10d      	bne.n	800142e <TIM_TimeBaseInit+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001412:	7a0b      	ldrb	r3, [r1, #8]
 8001414:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001416:	2301      	movs	r3, #1
}
 8001418:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800141a:	8283      	strh	r3, [r0, #20]
}
 800141c:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 800141e:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001420:	888b      	ldrh	r3, [r1, #4]
 8001422:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001424:	880b      	ldrh	r3, [r1, #0]
 8001426:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001428:	2301      	movs	r3, #1
 800142a:	8283      	strh	r3, [r0, #20]
 800142c:	4770      	bx	lr
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <TIM_TimeBaseInit+0xa8>)
 8001430:	4298      	cmp	r0, r3
 8001432:	d0ee      	beq.n	8001412 <TIM_TimeBaseInit+0x62>
 8001434:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001438:	4298      	cmp	r0, r3
 800143a:	d0ea      	beq.n	8001412 <TIM_TimeBaseInit+0x62>
 800143c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001440:	4298      	cmp	r0, r3
 8001442:	d0e6      	beq.n	8001412 <TIM_TimeBaseInit+0x62>
 8001444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001448:	4298      	cmp	r0, r3
 800144a:	d0e2      	beq.n	8001412 <TIM_TimeBaseInit+0x62>
 800144c:	e7e3      	b.n	8001416 <TIM_TimeBaseInit+0x66>
 800144e:	bf00      	nop
 8001450:	40012c00 	.word	0x40012c00
 8001454:	40001000 	.word	0x40001000
 8001458:	40013400 	.word	0x40013400

0800145c <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800145c:	8c02      	ldrh	r2, [r0, #32]
{
 800145e:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	0412      	lsls	r2, r2, #16
 8001466:	0c12      	lsrs	r2, r2, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001468:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800146a:	8402      	strh	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800146c:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800146e:	884e      	ldrh	r6, [r1, #2]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001470:	f023 0302 	bic.w	r3, r3, #2
  tmpcr2 =  TIMx->CR2;
 8001474:	8882      	ldrh	r2, [r0, #4]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001476:	041b      	lsls	r3, r3, #16
  tmpccmrx = TIMx->CCMR1;
 8001478:	8b04      	ldrh	r4, [r0, #24]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800147a:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800147c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800147e:	432b      	orrs	r3, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001480:	f024 0473 	bic.w	r4, r4, #115	; 0x73
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001484:	4d17      	ldr	r5, [pc, #92]	; (80014e4 <TIM_OC1Init+0x88>)
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001486:	880e      	ldrh	r6, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001488:	0424      	lsls	r4, r4, #16
 800148a:	0c24      	lsrs	r4, r4, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800148c:	42a8      	cmp	r0, r5
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800148e:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8001490:	b292      	uxth	r2, r2
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001492:	ea44 0406 	orr.w	r4, r4, r6
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001496:	d00f      	beq.n	80014b8 <TIM_OC1Init+0x5c>
 8001498:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800149c:	42a8      	cmp	r0, r5
 800149e:	d00b      	beq.n	80014b8 <TIM_OC1Init+0x5c>
 80014a0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80014a4:	42a8      	cmp	r0, r5
 80014a6:	d007      	beq.n	80014b8 <TIM_OC1Init+0x5c>
 80014a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ac:	42a8      	cmp	r0, r5
 80014ae:	d003      	beq.n	80014b8 <TIM_OC1Init+0x5c>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80014b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014b4:	42a8      	cmp	r0, r5
 80014b6:	d10e      	bne.n	80014d6 <TIM_OC1Init+0x7a>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80014b8:	894e      	ldrh	r6, [r1, #10]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80014ba:	898d      	ldrh	r5, [r1, #12]
 80014bc:	89cf      	ldrh	r7, [r1, #14]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80014be:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80014c2:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80014c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80014c8:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80014ca:	433d      	orrs	r5, r7
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80014cc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80014d0:	432a      	orrs	r2, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80014d2:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80014d4:	b292      	uxth	r2, r2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80014d6:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 80014d8:	8082      	strh	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80014da:	8304      	strh	r4, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80014dc:	8681      	strh	r1, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80014de:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCER = tmpccer;
 80014e0:	8403      	strh	r3, [r0, #32]
}
 80014e2:	4770      	bx	lr
 80014e4:	40012c00 	.word	0x40012c00

080014e8 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	6003      	str	r3, [r0, #0]
 80014f0:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80014f2:	7203      	strb	r3, [r0, #8]
}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80014f8:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80014fa:	b121      	cbz	r1, 8001506 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	8003      	strh	r3, [r0, #0]
 8001504:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	041b      	lsls	r3, r3, #16
 800150c:	0c1b      	lsrs	r3, r3, #16
 800150e:	8003      	strh	r3, [r0, #0]
  }
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001514:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8001518:	b139      	cbz	r1, 800152a <TIM_CtrlPWMOutputs+0x16>
    TIMx->BDTR |= TIM_BDTR_MOE;
 800151a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800151e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001522:	b29b      	uxth	r3, r3
 8001524:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001528:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 800152a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800152e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }  
}
 8001532:	4770      	bx	lr

08001534 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001534:	8983      	ldrh	r3, [r0, #12]
 8001536:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8001538:	b112      	cbz	r2, 8001540 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
 800153a:	4319      	orrs	r1, r3
 800153c:	8181      	strh	r1, [r0, #12]
 800153e:	4770      	bx	lr
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001540:	ea23 0101 	bic.w	r1, r3, r1
 8001544:	8181      	strh	r1, [r0, #12]
  }
}
 8001546:	4770      	bx	lr

08001548 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001548:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800154a:	f023 0308 	bic.w	r3, r3, #8
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001552:	430b      	orrs	r3, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001554:	8303      	strh	r3, [r0, #24]
}
 8001556:	4770      	bx	lr

08001558 <TIM_ClearITPendingBit>:
 8001558:	43c9      	mvns	r1, r1
 800155a:	b289      	uxth	r1, r1
 800155c:	8201      	strh	r1, [r0, #16]
 800155e:	4770      	bx	lr

08001560 <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001560:	b510      	push	{r4, lr}
    COOLANT_MIST_DDR |= (1 << COOLANT_MIST_BIT);
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001562:	2101      	movs	r1, #1
{
 8001564:	b082      	sub	sp, #8
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001566:	4c0f      	ldr	r4, [pc, #60]	; (80015a4 <coolant_init+0x44>)
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001568:	2008      	movs	r0, #8
 800156a:	f7ff ff09 	bl	8001380 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <coolant_init+0x48>)
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001570:	4620      	mov	r0, r4
 8001572:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001574:	9301      	str	r3, [sp, #4]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001576:	f7ff fd17 	bl	8000fa8 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 800157a:	2101      	movs	r1, #1
 800157c:	2008      	movs	r0, #8
 800157e:	f7ff feff 	bl	8001380 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <coolant_init+0x4c>)
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001584:	4620      	mov	r0, r4
 8001586:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001588:	9301      	str	r3, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 800158a:	f7ff fd0d 	bl	8000fa8 <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 800158e:	4620      	mov	r0, r4
 8001590:	2110      	movs	r1, #16
 8001592:	f7ff fe99 	bl	80012c8 <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001596:	4620      	mov	r0, r4
 8001598:	2108      	movs	r1, #8
 800159a:	f7ff fe95 	bl	80012c8 <GPIO_ResetBits>
}
 800159e:	b002      	add	sp, #8
 80015a0:	bd10      	pop	{r4, pc}
 80015a2:	bf00      	nop
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	10030010 	.word	0x10030010
 80015ac:	10030008 	.word	0x10030008

080015b0 <coolant_get_state>:
{
 80015b0:	b510      	push	{r4, lr}
    if (bit_istrue(
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <coolant_get_state+0x20>)
 80015b4:	f7ff fe82 	bl	80012bc <GPIO_ReadOutputData>
 80015b8:	4604      	mov	r4, r0
      if (bit_istrue(
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <coolant_get_state+0x20>)
 80015bc:	f7ff fe7e 	bl	80012bc <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 80015c0:	f3c4 1400 	ubfx	r4, r4, #4, #1
      if (bit_istrue(
 80015c4:	0703      	lsls	r3, r0, #28
      cl_state |= COOLANT_STATE_MIST;
 80015c6:	bf48      	it	mi
 80015c8:	f044 0402 	orrmi.w	r4, r4, #2
}
 80015cc:	4620      	mov	r0, r4
 80015ce:	bd10      	pop	{r4, pc}
 80015d0:	40010c00 	.word	0x40010c00

080015d4 <coolant_stop>:
{
 80015d4:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80015d6:	4c05      	ldr	r4, [pc, #20]	; (80015ec <coolant_stop+0x18>)
 80015d8:	2110      	movs	r1, #16
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff fe74 	bl	80012c8 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80015e0:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 80015e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 80015e6:	2108      	movs	r1, #8
 80015e8:	f7ff be6e 	b.w	80012c8 <GPIO_ResetBits>
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 80015f0:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 80015f2:	4d10      	ldr	r5, [pc, #64]	; (8001634 <coolant_set_state+0x44>)
 80015f4:	786b      	ldrb	r3, [r5, #1]
 80015f6:	b93b      	cbnz	r3, 8001608 <coolant_set_state+0x18>
  
  if (mode == COOLANT_DISABLE) {
 80015f8:	4604      	mov	r4, r0
 80015fa:	b130      	cbz	r0, 800160a <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 80015fc:	0642      	lsls	r2, r0, #25
 80015fe:	d40d      	bmi.n	800161c <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8001600:	0623      	lsls	r3, r4, #24
 8001602:	d411      	bmi.n	8001628 <coolant_set_state+0x38>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001604:	2300      	movs	r3, #0
 8001606:	732b      	strb	r3, [r5, #12]
}
 8001608:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 800160a:	2110      	movs	r1, #16
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <coolant_set_state+0x48>)
 800160e:	f7ff fe5b 	bl	80012c8 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001612:	2108      	movs	r1, #8
 8001614:	4808      	ldr	r0, [pc, #32]	; (8001638 <coolant_set_state+0x48>)
 8001616:	f7ff fe57 	bl	80012c8 <GPIO_ResetBits>
}
 800161a:	e7f3      	b.n	8001604 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 800161c:	2110      	movs	r1, #16
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <coolant_set_state+0x48>)
 8001620:	f7ff fe50 	bl	80012c4 <GPIO_SetBits>
      if (mode & COOLANT_MIST_ENABLE) {
 8001624:	0623      	lsls	r3, r4, #24
 8001626:	d5ed      	bpl.n	8001604 <coolant_set_state+0x14>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001628:	2108      	movs	r1, #8
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <coolant_set_state+0x48>)
 800162c:	f7ff fe4a 	bl	80012c4 <GPIO_SetBits>
 8001630:	e7e8      	b.n	8001604 <coolant_set_state+0x14>
 8001632:	bf00      	nop
 8001634:	20001314 	.word	0x20001314
 8001638:	40010c00 	.word	0x40010c00

0800163c <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 800163c:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 800163e:	4d12      	ldr	r5, [pc, #72]	; (8001688 <coolant_sync+0x4c>)
 8001640:	782b      	ldrb	r3, [r5, #0]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d00b      	beq.n	800165e <coolant_sync+0x22>
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001646:	4604      	mov	r4, r0
 8001648:	f003 fe40 	bl	80052cc <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 800164c:	786b      	ldrb	r3, [r5, #1]
 800164e:	b933      	cbnz	r3, 800165e <coolant_sync+0x22>
  if (mode == COOLANT_DISABLE) {
 8001650:	b15c      	cbz	r4, 800166a <coolant_sync+0x2e>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001652:	0662      	lsls	r2, r4, #25
 8001654:	d404      	bmi.n	8001660 <coolant_sync+0x24>
      if (mode & COOLANT_MIST_ENABLE) {
 8001656:	0623      	lsls	r3, r4, #24
 8001658:	d410      	bmi.n	800167c <coolant_sync+0x40>
  sys.report_ovr_counter = 0; // Set to report change immediately
 800165a:	2300      	movs	r3, #0
 800165c:	732b      	strb	r3, [r5, #12]
  coolant_set_state(mode);
}
 800165e:	bd38      	pop	{r3, r4, r5, pc}
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001660:	2110      	movs	r1, #16
 8001662:	480a      	ldr	r0, [pc, #40]	; (800168c <coolant_sync+0x50>)
 8001664:	f7ff fe2e 	bl	80012c4 <GPIO_SetBits>
 8001668:	e7f5      	b.n	8001656 <coolant_sync+0x1a>
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 800166a:	2110      	movs	r1, #16
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <coolant_sync+0x50>)
 800166e:	f7ff fe2b 	bl	80012c8 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001672:	2108      	movs	r1, #8
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <coolant_sync+0x50>)
 8001676:	f7ff fe27 	bl	80012c8 <GPIO_ResetBits>
}
 800167a:	e7ee      	b.n	800165a <coolant_sync+0x1e>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 800167c:	2108      	movs	r1, #8
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <coolant_sync+0x50>)
 8001680:	f7ff fe20 	bl	80012c4 <GPIO_SetBits>
 8001684:	e7e9      	b.n	800165a <coolant_sync+0x1e>
 8001686:	bf00      	nop
 8001688:	20001314 	.word	0x20001314
 800168c:	40010c00 	.word	0x40010c00

08001690 <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001690:	b410      	push	{r4}
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;
 8001692:	4c0d      	ldr	r4, [pc, #52]	; (80016c8 <eeprom_init+0x38>)
 8001694:	4623      	mov	r3, r4
 8001696:	f1c4 6100 	rsb	r1, r4, #134217728	; 0x8000000
 800169a:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 800169e:	f504 6080 	add.w	r0, r4, #1024	; 0x400

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 80016a2:	185a      	adds	r2, r3, r1
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	f803 2b01 	strb.w	r2, [r3], #1
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 80016aa:	4283      	cmp	r3, r0
 80016ac:	d1f9      	bne.n	80016a2 <eeprom_init+0x12>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 80016ae:	7823      	ldrb	r3, [r4, #0]
 80016b0:	2b0a      	cmp	r3, #10
 80016b2:	d006      	beq.n	80016c2 <eeprom_init+0x32>
 80016b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b8:	21ff      	movs	r1, #255	; 0xff
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 80016bc:	bc10      	pop	{r4}
 80016be:	f007 bfc1 	b.w	8009644 <memset>
 80016c2:	bc10      	pop	{r4}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000e8c 	.word	0x20000e8c

080016cc <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 80016cc:	4b01      	ldr	r3, [pc, #4]	; (80016d4 <eeprom_get_char+0x8>)
#endif
}
 80016ce:	5c18      	ldrb	r0, [r3, r0]
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000e8c 	.word	0x20000e8c

080016d8 <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 80016d8:	4b01      	ldr	r3, [pc, #4]	; (80016e0 <eeprom_put_char+0x8>)
 80016da:	5419      	strb	r1, [r3, r0]
#endif
}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000e8c 	.word	0x20000e8c

080016e4 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 80016e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016e8:	4607      	mov	r7, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 80016ea:	2a00      	cmp	r2, #0
 80016ec:	d03c      	beq.n	8001768 <memcpy_to_eeprom_with_checksum+0x84>
  unsigned char checksum = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800177c <memcpy_to_eeprom_with_checksum+0x98>
 80016f4:	1e44      	subs	r4, r0, #1
 80016f6:	4444      	add	r4, r8
 80016f8:	188e      	adds	r6, r1, r2
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
 80016fa:	f811 5b01 	ldrb.w	r5, [r1], #1
    checksum = (checksum << 1) || (checksum >> 7);
 80016fe:	bb63      	cbnz	r3, 800175a <memcpy_to_eeprom_with_checksum+0x76>
    checksum += *source;
 8001700:	eb05 13d3 	add.w	r3, r5, r3, lsr #7
  for(; size > 0; size--) { 
 8001704:	42b1      	cmp	r1, r6
    checksum += *source;
 8001706:	b2db      	uxtb	r3, r3
	EE_Buffer[addr] = new_value;
 8001708:	f804 5f01 	strb.w	r5, [r4, #1]!
  for(; size > 0; size--) { 
 800170c:	d1f5      	bne.n	80016fa <memcpy_to_eeprom_with_checksum+0x16>
 800170e:	4417      	add	r7, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001710:	4817      	ldr	r0, [pc, #92]	; (8001770 <memcpy_to_eeprom_with_checksum+0x8c>)
	EE_Buffer[addr] = new_value;
 8001712:	f808 3007 	strb.w	r3, [r8, r7]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001716:	f7ff fb7b 	bl	8000e10 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 800171a:	2804      	cmp	r0, #4
 800171c:	d11b      	bne.n	8001756 <memcpy_to_eeprom_with_checksum+0x72>
		if (*pBuffer != 0xffff)
 800171e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001722:	4c14      	ldr	r4, [pc, #80]	; (8001774 <memcpy_to_eeprom_with_checksum+0x90>)
 8001724:	4e14      	ldr	r6, [pc, #80]	; (8001778 <memcpy_to_eeprom_with_checksum+0x94>)
 8001726:	1ea5      	subs	r5, r4, #2
 8001728:	f504 6980 	add.w	r9, r4, #1024	; 0x400
 800172c:	eba6 0608 	sub.w	r6, r6, r8
 8001730:	f834 1c04 	ldrh.w	r1, [r4, #-4]
 8001734:	1970      	adds	r0, r6, r5
 8001736:	42b9      	cmp	r1, r7
 8001738:	d001      	beq.n	800173e <memcpy_to_eeprom_with_checksum+0x5a>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 800173a:	f7ff fbd1 	bl	8000ee0 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 800173e:	8829      	ldrh	r1, [r5, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001740:	1930      	adds	r0, r6, r4
		if (*pBuffer != 0xffff)
 8001742:	42b9      	cmp	r1, r7
 8001744:	f105 0504 	add.w	r5, r5, #4
 8001748:	f104 0404 	add.w	r4, r4, #4
 800174c:	d001      	beq.n	8001752 <memcpy_to_eeprom_with_checksum+0x6e>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 800174e:	f7ff fbc7 	bl	8000ee0 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 8001752:	45a1      	cmp	r9, r4
 8001754:	d1ec      	bne.n	8001730 <memcpy_to_eeprom_with_checksum+0x4c>
#if defined(WIN32) || defined(STM32F103C8)
#ifndef NOEEPROMSUPPORT
  eeprom_flush();
#endif
#endif
}
 8001756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    checksum += *source;
 800175a:	1c6b      	adds	r3, r5, #1
  for(; size > 0; size--) { 
 800175c:	42b1      	cmp	r1, r6
	EE_Buffer[addr] = new_value;
 800175e:	f804 5f01 	strb.w	r5, [r4, #1]!
    checksum += *source;
 8001762:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 8001764:	d1c9      	bne.n	80016fa <memcpy_to_eeprom_with_checksum+0x16>
 8001766:	e7d2      	b.n	800170e <memcpy_to_eeprom_with_checksum+0x2a>
  unsigned char checksum = 0;
 8001768:	4613      	mov	r3, r2
 800176a:	f8df 8010 	ldr.w	r8, [pc, #16]	; 800177c <memcpy_to_eeprom_with_checksum+0x98>
 800176e:	e7cf      	b.n	8001710 <memcpy_to_eeprom_with_checksum+0x2c>
 8001770:	0801fc00 	.word	0x0801fc00
 8001774:	20000e90 	.word	0x20000e90
 8001778:	0801fbfe 	.word	0x0801fbfe
 800177c:	20000e8c 	.word	0x20000e8c

08001780 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001780:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8001782:	b1f2      	cbz	r2, 80017c2 <memcpy_from_eeprom_with_checksum+0x42>
  unsigned char data, checksum = 0;
 8001784:	2400      	movs	r4, #0
 8001786:	4f10      	ldr	r7, [pc, #64]	; (80017c8 <memcpy_from_eeprom_with_checksum+0x48>)
 8001788:	1e4d      	subs	r5, r1, #1
 800178a:	443d      	add	r5, r7
 800178c:	1886      	adds	r6, r0, r2
	return EE_Buffer[addr];
 800178e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8001792:	b974      	cbnz	r4, 80017b2 <memcpy_from_eeprom_with_checksum+0x32>
    checksum += data;    
    *(destination++) = data; 
 8001794:	f800 3b01 	strb.w	r3, [r0], #1
    checksum += data;    
 8001798:	eb03 14d4 	add.w	r4, r3, r4, lsr #7
  for(; size > 0; size--) { 
 800179c:	42b0      	cmp	r0, r6
    checksum += data;    
 800179e:	b2e4      	uxtb	r4, r4
  for(; size > 0; size--) { 
 80017a0:	d1f5      	bne.n	800178e <memcpy_from_eeprom_with_checksum+0xe>
 80017a2:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 80017a4:	5c78      	ldrb	r0, [r7, r1]
}
 80017a6:	1b00      	subs	r0, r0, r4
 80017a8:	fab0 f080 	clz	r0, r0
 80017ac:	bcf0      	pop	{r4, r5, r6, r7}
 80017ae:	0940      	lsrs	r0, r0, #5
 80017b0:	4770      	bx	lr
    *(destination++) = data; 
 80017b2:	f800 3b01 	strb.w	r3, [r0], #1
  for(; size > 0; size--) { 
 80017b6:	4286      	cmp	r6, r0
    checksum += data;    
 80017b8:	f103 0301 	add.w	r3, r3, #1
 80017bc:	b2dc      	uxtb	r4, r3
  for(; size > 0; size--) { 
 80017be:	d1e6      	bne.n	800178e <memcpy_from_eeprom_with_checksum+0xe>
 80017c0:	e7ef      	b.n	80017a2 <memcpy_from_eeprom_with_checksum+0x22>
  unsigned char data, checksum = 0;
 80017c2:	4614      	mov	r4, r2
 80017c4:	4f00      	ldr	r7, [pc, #0]	; (80017c8 <memcpy_from_eeprom_with_checksum+0x48>)
 80017c6:	e7ed      	b.n	80017a4 <memcpy_from_eeprom_with_checksum+0x24>
 80017c8:	20000e8c 	.word	0x20000e8c

080017cc <gc_init>:
#define FAIL(status) return(status);


void gc_init()
{
  memset(&gc_state, 0, sizeof(parser_state_t));
 80017cc:	2100      	movs	r1, #0
{
 80017ce:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 80017d0:	2244      	movs	r2, #68	; 0x44
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <gc_init+0x24>)
 80017d4:	f007 ff36 	bl	8009644 <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 80017d8:	2000      	movs	r0, #0
 80017da:	4906      	ldr	r1, [pc, #24]	; (80017f4 <gc_init+0x28>)
 80017dc:	f004 fe44 	bl	8006468 <settings_read_coord_data>
 80017e0:	b100      	cbz	r0, 80017e4 <gc_init+0x18>
    report_status_message(STATUS_SETTING_READ_FAIL);
  }
}
 80017e2:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 80017e4:	2007      	movs	r0, #7
}
 80017e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 80017ea:	f003 bd8b 	b.w	8005304 <report_status_message>
 80017ee:	bf00      	nop
 80017f0:	2000128c 	.word	0x2000128c
 80017f4:	200012b4 	.word	0x200012b4

080017f8 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 80017f8:	4901      	ldr	r1, [pc, #4]	; (8001800 <gc_sync_position+0x8>)
 80017fa:	4802      	ldr	r0, [pc, #8]	; (8001804 <gc_sync_position+0xc>)
 80017fc:	f006 bc3e 	b.w	800807c <system_convert_array_steps_to_mpos>
 8001800:	20001338 	.word	0x20001338
 8001804:	200012a8 	.word	0x200012a8

08001808 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800180c:	4607      	mov	r7, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 800180e:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8001b64 <gc_execute_line+0x35c>
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	2100      	movs	r1, #0
 8001816:	4640      	mov	r0, r8
{
 8001818:	b099      	sub	sp, #100	; 0x64
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 800181a:	f007 ff13 	bl	8009644 <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 800181e:	4bcf      	ldr	r3, [pc, #828]	; (8001b5c <gc_execute_line+0x354>)
 8001820:	cb03      	ldmia	r3!, {r0, r1}
 8001822:	881a      	ldrh	r2, [r3, #0]
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	f8c8 0001 	str.w	r0, [r8, #1]
 800182a:	f8c8 1005 	str.w	r1, [r8, #5]
 800182e:	f8a8 2009 	strh.w	r2, [r8, #9]
 8001832:	f888 300b 	strb.w	r3, [r8, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001836:	783c      	ldrb	r4, [r7, #0]
 8001838:	2c24      	cmp	r4, #36	; 0x24
 800183a:	f000 81c3 	beq.w	8001bc4 <gc_execute_line+0x3bc>
 800183e:	2300      	movs	r3, #0
 8001840:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }

  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001844:	2c00      	cmp	r4, #0
 8001846:	f000 84bf 	beq.w	80021c8 <gc_execute_line+0x9c0>
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 800184a:	9309      	str	r3, [sp, #36]	; 0x24
 800184c:	2500      	movs	r5, #0
          // NOTE: For certain commands, P value must be an integer, but none of these commands are supported.
          // case 'Q': // Not supported
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
		  case 'T': word_bit = WORD_T;
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 800184e:	46ba      	mov	sl, r7
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8001850:	462e      	mov	r6, r5
 8001852:	e9cd 5506 	strd	r5, r5, [sp, #24]
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001856:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8001b68 <gc_execute_line+0x360>
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 800185a:	9508      	str	r5, [sp, #32]
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 800185c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	2a19      	cmp	r2, #25
 8001864:	f200 8384 	bhi.w	8001f70 <gc_execute_line+0x768>
    char_counter++;
 8001868:	3301      	adds	r3, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 800186a:	4650      	mov	r0, sl
 800186c:	aa11      	add	r2, sp, #68	; 0x44
 800186e:	f10d 0143 	add.w	r1, sp, #67	; 0x43
    char_counter++;
 8001872:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001876:	f001 ffe7 	bl	8003848 <read_float>
 800187a:	2800      	cmp	r0, #0
 800187c:	f000 837a 	beq.w	8001f74 <gc_execute_line+0x76c>
    int_value = truncf(value);
 8001880:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8001884:	4658      	mov	r0, fp
 8001886:	f7ff fa07 	bl	8000c98 <__aeabi_f2uiz>
 800188a:	b2c7      	uxtb	r7, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 800188c:	4638      	mov	r0, r7
 800188e:	f7fe ffad 	bl	80007ec <__aeabi_i2f>
 8001892:	4601      	mov	r1, r0
 8001894:	4658      	mov	r0, fp
 8001896:	f7fe fef3 	bl	8000680 <__aeabi_fsub>
 800189a:	4649      	mov	r1, r9
 800189c:	f7fe fffa 	bl	8000894 <__aeabi_fmul>
 80018a0:	f007 fff4 	bl	800988c <lroundf>
    switch(letter) {
 80018a4:	2c47      	cmp	r4, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 80018a6:	b282      	uxth	r2, r0
    switch(letter) {
 80018a8:	d06c      	beq.n	8001984 <gc_execute_line+0x17c>
 80018aa:	2c4d      	cmp	r4, #77	; 0x4d
 80018ac:	d139      	bne.n	8001922 <gc_execute_line+0x11a>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 80018ae:	2a00      	cmp	r2, #0
 80018b0:	f040 837e 	bne.w	8001fb0 <gc_execute_line+0x7a8>
        switch(int_value) {
 80018b4:	2f1e      	cmp	r7, #30
 80018b6:	d82f      	bhi.n	8001918 <gc_execute_line+0x110>
 80018b8:	e8df f017 	tbh	[pc, r7, lsl #1]
 80018bc:	01780178 	.word	0x01780178
 80018c0:	016b0178 	.word	0x016b0178
 80018c4:	016b016b 	.word	0x016b016b
 80018c8:	0158002e 	.word	0x0158002e
 80018cc:	01580158 	.word	0x01580158
 80018d0:	002e002e 	.word	0x002e002e
 80018d4:	002e002e 	.word	0x002e002e
 80018d8:	002e002e 	.word	0x002e002e
 80018dc:	002e002e 	.word	0x002e002e
 80018e0:	002e002e 	.word	0x002e002e
 80018e4:	002e002e 	.word	0x002e002e
 80018e8:	002e002e 	.word	0x002e002e
 80018ec:	002e002e 	.word	0x002e002e
 80018f0:	002e002e 	.word	0x002e002e
 80018f4:	002e002e 	.word	0x002e002e
 80018f8:	0178      	.short	0x0178
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 80018fa:	9b07      	ldr	r3, [sp, #28]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 86cd 	bne.w	800269c <gc_execute_line+0xe94>
            if (int_value == 38){
 8001902:	2f26      	cmp	r7, #38	; 0x26
            gc_block.modal.motion = int_value;
 8001904:	f888 7001 	strb.w	r7, [r8, #1]
            if (int_value == 38){
 8001908:	f040 839a 	bne.w	8002040 <gc_execute_line+0x838>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 800190c:	f1a2 0314 	sub.w	r3, r2, #20
 8001910:	b29b      	uxth	r3, r3
 8001912:	2b1e      	cmp	r3, #30
 8001914:	f240 8356 	bls.w	8001fc4 <gc_execute_line+0x7bc>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
      if (gc_block.values.l != 20) {
        if (gc_block.values.l == 2) {
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8001918:	2314      	movs	r3, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 800191a:	4618      	mov	r0, r3
 800191c:	b019      	add	sp, #100	; 0x64
 800191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch(letter){
 8001922:	3c46      	subs	r4, #70	; 0x46
 8001924:	2c14      	cmp	r4, #20
 8001926:	d8f7      	bhi.n	8001918 <gc_execute_line+0x110>
 8001928:	a301      	add	r3, pc, #4	; (adr r3, 8001930 <gc_execute_line+0x128>)
 800192a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001d2f 	.word	0x08001d2f
 8001934:	08001919 	.word	0x08001919
 8001938:	08001919 	.word	0x08001919
 800193c:	08001d37 	.word	0x08001d37
 8001940:	08001d4b 	.word	0x08001d4b
 8001944:	08001d5f 	.word	0x08001d5f
 8001948:	08001d73 	.word	0x08001d73
 800194c:	08001919 	.word	0x08001919
 8001950:	08001d7d 	.word	0x08001d7d
 8001954:	08001919 	.word	0x08001919
 8001958:	08001d8b 	.word	0x08001d8b
 800195c:	08001919 	.word	0x08001919
 8001960:	08001cd7 	.word	0x08001cd7
 8001964:	08001ce1 	.word	0x08001ce1
 8001968:	08001d05 	.word	0x08001d05
 800196c:	08001919 	.word	0x08001919
 8001970:	08001919 	.word	0x08001919
 8001974:	08001919 	.word	0x08001919
 8001978:	08001d1b 	.word	0x08001d1b
 800197c:	08001c93 	.word	0x08001c93
 8001980:	08001cb3 	.word	0x08001cb3
        switch(int_value) {
 8001984:	2f5e      	cmp	r7, #94	; 0x5e
 8001986:	d8c7      	bhi.n	8001918 <gc_execute_line+0x110>
 8001988:	a301      	add	r3, pc, #4	; (adr r3, 8001990 <gc_execute_line+0x188>)
 800198a:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800198e:	bf00      	nop
 8001990:	080018fb 	.word	0x080018fb
 8001994:	080018fb 	.word	0x080018fb
 8001998:	080018fb 	.word	0x080018fb
 800199c:	080018fb 	.word	0x080018fb
 80019a0:	08001beb 	.word	0x08001beb
 80019a4:	08001919 	.word	0x08001919
 80019a8:	08001919 	.word	0x08001919
 80019ac:	08001919 	.word	0x08001919
 80019b0:	08001919 	.word	0x08001919
 80019b4:	08001919 	.word	0x08001919
 80019b8:	08001bff 	.word	0x08001bff
 80019bc:	08001919 	.word	0x08001919
 80019c0:	08001919 	.word	0x08001919
 80019c4:	08001919 	.word	0x08001919
 80019c8:	08001919 	.word	0x08001919
 80019cc:	08001919 	.word	0x08001919
 80019d0:	08001919 	.word	0x08001919
 80019d4:	08001c65 	.word	0x08001c65
 80019d8:	08001c65 	.word	0x08001c65
 80019dc:	08001c65 	.word	0x08001c65
 80019e0:	08001c37 	.word	0x08001c37
 80019e4:	08001c37 	.word	0x08001c37
 80019e8:	08001919 	.word	0x08001919
 80019ec:	08001919 	.word	0x08001919
 80019f0:	08001919 	.word	0x08001919
 80019f4:	08001919 	.word	0x08001919
 80019f8:	08001919 	.word	0x08001919
 80019fc:	08001919 	.word	0x08001919
 8001a00:	08001bff 	.word	0x08001bff
 8001a04:	08001919 	.word	0x08001919
 8001a08:	08001bff 	.word	0x08001bff
 8001a0c:	08001919 	.word	0x08001919
 8001a10:	08001919 	.word	0x08001919
 8001a14:	08001919 	.word	0x08001919
 8001a18:	08001919 	.word	0x08001919
 8001a1c:	08001919 	.word	0x08001919
 8001a20:	08001919 	.word	0x08001919
 8001a24:	08001919 	.word	0x08001919
 8001a28:	080018fb 	.word	0x080018fb
 8001a2c:	08001919 	.word	0x08001919
 8001a30:	08001b0d 	.word	0x08001b0d
 8001a34:	08001919 	.word	0x08001919
 8001a38:	08001919 	.word	0x08001919
 8001a3c:	08001c43 	.word	0x08001c43
 8001a40:	08001919 	.word	0x08001919
 8001a44:	08001919 	.word	0x08001919
 8001a48:	08001919 	.word	0x08001919
 8001a4c:	08001919 	.word	0x08001919
 8001a50:	08001919 	.word	0x08001919
 8001a54:	08001c43 	.word	0x08001c43
 8001a58:	08001919 	.word	0x08001919
 8001a5c:	08001919 	.word	0x08001919
 8001a60:	08001919 	.word	0x08001919
 8001a64:	08001beb 	.word	0x08001beb
 8001a68:	08001c2d 	.word	0x08001c2d
 8001a6c:	08001c2d 	.word	0x08001c2d
 8001a70:	08001c2d 	.word	0x08001c2d
 8001a74:	08001c2d 	.word	0x08001c2d
 8001a78:	08001c2d 	.word	0x08001c2d
 8001a7c:	08001c2d 	.word	0x08001c2d
 8001a80:	08001919 	.word	0x08001919
 8001a84:	08001c89 	.word	0x08001c89
 8001a88:	08001919 	.word	0x08001919
 8001a8c:	08001919 	.word	0x08001919
 8001a90:	08001919 	.word	0x08001919
 8001a94:	08001919 	.word	0x08001919
 8001a98:	08001919 	.word	0x08001919
 8001a9c:	08001919 	.word	0x08001919
 8001aa0:	08001919 	.word	0x08001919
 8001aa4:	08001919 	.word	0x08001919
 8001aa8:	08001919 	.word	0x08001919
 8001aac:	08001919 	.word	0x08001919
 8001ab0:	08001919 	.word	0x08001919
 8001ab4:	08001919 	.word	0x08001919
 8001ab8:	08001919 	.word	0x08001919
 8001abc:	08001919 	.word	0x08001919
 8001ac0:	08001919 	.word	0x08001919
 8001ac4:	08001919 	.word	0x08001919
 8001ac8:	08001919 	.word	0x08001919
 8001acc:	08001919 	.word	0x08001919
 8001ad0:	08001c6f 	.word	0x08001c6f
 8001ad4:	08001919 	.word	0x08001919
 8001ad8:	08001919 	.word	0x08001919
 8001adc:	08001919 	.word	0x08001919
 8001ae0:	08001919 	.word	0x08001919
 8001ae4:	08001919 	.word	0x08001919
 8001ae8:	08001919 	.word	0x08001919
 8001aec:	08001919 	.word	0x08001919
 8001af0:	08001919 	.word	0x08001919
 8001af4:	08001919 	.word	0x08001919
 8001af8:	08001c79 	.word	0x08001c79
 8001afc:	08001c79 	.word	0x08001c79
 8001b00:	08001bff 	.word	0x08001bff
 8001b04:	08001bdf 	.word	0x08001bdf
 8001b08:	08001bdf 	.word	0x08001bdf
    switch(letter) {
 8001b0c:	2307      	movs	r3, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	f040 824e 	bne.w	8001fb0 <gc_execute_line+0x7a8>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001b14:	fa46 f203 	asr.w	r2, r6, r3
 8001b18:	07d0      	lsls	r0, r2, #31
 8001b1a:	f100 8276 	bmi.w	800200a <gc_execute_line+0x802>
        command_words |= bit(word_bit);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	431e      	orrs	r6, r3
 8001b26:	b2b6      	uxth	r6, r6
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001b28:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001b2c:	f81a 4003 	ldrb.w	r4, [sl, r3]
 8001b30:	2c00      	cmp	r4, #0
 8001b32:	f47f ae93 	bne.w	800185c <gc_execute_line+0x54>
  if (axis_words) {
 8001b36:	9b06      	ldr	r3, [sp, #24]
 8001b38:	b123      	cbz	r3, 8001b44 <gc_execute_line+0x33c>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8001b3a:	9b07      	ldr	r3, [sp, #28]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf08      	it	eq
 8001b40:	2302      	moveq	r3, #2
 8001b42:	9307      	str	r3, [sp, #28]
  if (bit_istrue(value_words,bit(WORD_N))) {
 8001b44:	06aa      	lsls	r2, r5, #26
 8001b46:	f140 8138 	bpl.w	8001dba <gc_execute_line+0x5b2>
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <gc_execute_line+0x358>)
 8001b4c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f340 8132 	ble.w	8001dba <gc_execute_line+0x5b2>
 8001b56:	231b      	movs	r3, #27
 8001b58:	e6df      	b.n	800191a <gc_execute_line+0x112>
 8001b5a:	bf00      	nop
 8001b5c:	2000128c 	.word	0x2000128c
 8001b60:	00989680 	.word	0x00989680
 8001b64:	200012d0 	.word	0x200012d0
 8001b68:	42c80000 	.word	0x42c80000
            switch(int_value) {
 8001b6c:	2f08      	cmp	r7, #8
 8001b6e:	f000 8218 	beq.w	8001fa2 <gc_execute_line+0x79a>
 8001b72:	2f09      	cmp	r7, #9
 8001b74:	f040 820e 	bne.w	8001f94 <gc_execute_line+0x78c>
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7e:	f888 3009 	strb.w	r3, [r8, #9]
 8001b82:	230d      	movs	r3, #13
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8001b84:	fa46 f303 	asr.w	r3, r6, r3
 8001b88:	07d9      	lsls	r1, r3, #31
 8001b8a:	f100 823e 	bmi.w	800200a <gc_execute_line+0x802>
        command_words |= bit(word_bit);
 8001b8e:	4316      	orrs	r6, r2
        break;
 8001b90:	e7ca      	b.n	8001b28 <gc_execute_line+0x320>
            switch(int_value) {
 8001b92:	2f04      	cmp	r7, #4
 8001b94:	f000 81f7 	beq.w	8001f86 <gc_execute_line+0x77e>
 8001b98:	2f05      	cmp	r7, #5
 8001b9a:	f040 81ed 	bne.w	8001f78 <gc_execute_line+0x770>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba4:	f888 300a 	strb.w	r3, [r8, #10]
 8001ba8:	230c      	movs	r3, #12
 8001baa:	e7eb      	b.n	8001b84 <gc_execute_line+0x37c>
            switch(int_value) {
 8001bac:	2f00      	cmp	r7, #0
 8001bae:	f000 81d8 	beq.w	8001f62 <gc_execute_line+0x75a>
 8001bb2:	2f01      	cmp	r7, #1
 8001bb4:	f000 80ed 	beq.w	8001d92 <gc_execute_line+0x58a>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8001bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bbc:	230b      	movs	r3, #11
 8001bbe:	f888 7008 	strb.w	r7, [r8, #8]
 8001bc2:	e7df      	b.n	8001b84 <gc_execute_line+0x37c>
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8001bc4:	2300      	movs	r3, #0
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	78fc      	ldrb	r4, [r7, #3]
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8001bca:	f888 3002 	strb.w	r3, [r8, #2]
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8001bce:	f888 2001 	strb.w	r2, [r8, #1]
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 8001bd2:	2303      	movs	r3, #3
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001bd4:	2c00      	cmp	r4, #0
 8001bd6:	f000 8442 	beq.w	800245e <gc_execute_line+0xc56>
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001bda:	9209      	str	r2, [sp, #36]	; 0x24
 8001bdc:	e636      	b.n	800184c <gc_execute_line+0x44>
            gc_block.modal.feed_rate = 94 - int_value;
 8001bde:	f1c7 075e 	rsb	r7, r7, #94	; 0x5e
            break;
 8001be2:	2305      	movs	r3, #5
            gc_block.modal.feed_rate = 94 - int_value;
 8001be4:	f888 7002 	strb.w	r7, [r8, #2]
            break;
 8001be8:	e791      	b.n	8001b0e <gc_execute_line+0x306>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001bea:	2f1c      	cmp	r7, #28
            gc_block.non_modal_command = int_value;
 8001bec:	f888 7000 	strb.w	r7, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001bf0:	f000 80dc 	beq.w	8001dac <gc_execute_line+0x5a4>
 8001bf4:	2f1e      	cmp	r7, #30
 8001bf6:	f000 80d9 	beq.w	8001dac <gc_execute_line+0x5a4>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e787      	b.n	8001b0e <gc_execute_line+0x306>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8001bfe:	2a00      	cmp	r2, #0
 8001c00:	f040 80cb 	bne.w	8001d9a <gc_execute_line+0x592>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8001c04:	9b07      	ldr	r3, [sp, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 8548 	bne.w	800269c <gc_execute_line+0xe94>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001c0c:	2f1c      	cmp	r7, #28
            gc_block.non_modal_command = int_value;
 8001c0e:	f888 7000 	strb.w	r7, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001c12:	d004      	beq.n	8001c1e <gc_execute_line+0x416>
 8001c14:	2f1e      	cmp	r7, #30
 8001c16:	d002      	beq.n	8001c1e <gc_execute_line+0x416>
 8001c18:	2f5c      	cmp	r7, #92	; 0x5c
 8001c1a:	f040 8502 	bne.w	8002622 <gc_execute_line+0xe1a>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	9307      	str	r3, [sp, #28]
              gc_block.non_modal_command += mantissa;
 8001c22:	4438      	add	r0, r7
 8001c24:	2300      	movs	r3, #0
 8001c26:	f888 0000 	strb.w	r0, [r8]
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001c2a:	e773      	b.n	8001b14 <gc_execute_line+0x30c>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8001c2c:	3f36      	subs	r7, #54	; 0x36
            break;
 8001c2e:	2309      	movs	r3, #9
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8001c30:	f888 7007 	strb.w	r7, [r8, #7]
            break;
 8001c34:	e76b      	b.n	8001b0e <gc_execute_line+0x306>
            gc_block.modal.units = 21 - int_value;
 8001c36:	f1c7 0715 	rsb	r7, r7, #21
            break;
 8001c3a:	2306      	movs	r3, #6
            gc_block.modal.units = 21 - int_value;
 8001c3c:	f888 7003 	strb.w	r7, [r8, #3]
            break;
 8001c40:	e765      	b.n	8001b0e <gc_execute_line+0x306>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 8001c42:	9b07      	ldr	r3, [sp, #28]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 8529 	bne.w	800269c <gc_execute_line+0xe94>
            if (int_value == 49) { // G49
 8001c4a:	2f31      	cmp	r7, #49	; 0x31
 8001c4c:	f000 81f2 	beq.w	8002034 <gc_execute_line+0x82c>
            } else if (mantissa == 10) { // G43.1
 8001c50:	2a0a      	cmp	r2, #10
 8001c52:	f47f ae61 	bne.w	8001918 <gc_execute_line+0x110>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8001c56:	2201      	movs	r2, #1
 8001c58:	f888 2006 	strb.w	r2, [r8, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8001c5c:	2203      	movs	r2, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8001c5e:	2308      	movs	r3, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8001c60:	9207      	str	r2, [sp, #28]
 8001c62:	e757      	b.n	8001b14 <gc_execute_line+0x30c>
            gc_block.modal.plane_select = int_value - 17;
 8001c64:	3f11      	subs	r7, #17
            break;
 8001c66:	2302      	movs	r3, #2
            gc_block.modal.plane_select = int_value - 17;
 8001c68:	f888 7005 	strb.w	r7, [r8, #5]
            break;
 8001c6c:	e74f      	b.n	8001b0e <gc_execute_line+0x306>
            gc_block.modal.motion = int_value;
 8001c6e:	2350      	movs	r3, #80	; 0x50
 8001c70:	f888 3001 	strb.w	r3, [r8, #1]
 8001c74:	2301      	movs	r3, #1
 8001c76:	e74a      	b.n	8001b0e <gc_execute_line+0x306>
            if (mantissa == 0) {
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	f040 819b 	bne.w	8001fb4 <gc_execute_line+0x7ac>
              gc_block.modal.distance = int_value - 90;
 8001c7e:	3f5a      	subs	r7, #90	; 0x5a
 8001c80:	2303      	movs	r3, #3
 8001c82:	f888 7004 	strb.w	r7, [r8, #4]
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001c86:	e745      	b.n	8001b14 <gc_execute_line+0x30c>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	f47f ae45 	bne.w	8001918 <gc_execute_line+0x110>
 8001c8e:	230a      	movs	r3, #10
 8001c90:	e740      	b.n	8001b14 <gc_execute_line+0x30c>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8001c92:	9b06      	ldr	r3, [sp, #24]
 8001c94:	220b      	movs	r2, #11
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	9306      	str	r3, [sp, #24]
 8001c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca0:	f8c8 b038 	str.w	fp, [r8, #56]	; 0x38
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001ca4:	fa45 f202 	asr.w	r2, r5, r2
 8001ca8:	07d0      	lsls	r0, r2, #31
 8001caa:	d40f      	bmi.n	8001ccc <gc_execute_line+0x4c4>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8001cac:	431d      	orrs	r5, r3
 8001cae:	b2ad      	uxth	r5, r5
 8001cb0:	e73a      	b.n	8001b28 <gc_execute_line+0x320>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	9b06      	ldr	r3, [sp, #24]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001cb6:	fa45 f202 	asr.w	r2, r5, r2
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8001cba:	f043 0304 	orr.w	r3, r3, #4
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001cbe:	07d0      	lsls	r0, r2, #31
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8001cc0:	9306      	str	r3, [sp, #24]
 8001cc2:	f8c8 b03c 	str.w	fp, [r8, #60]	; 0x3c
 8001cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001cca:	d5ef      	bpl.n	8001cac <gc_execute_line+0x4a4>
 8001ccc:	2319      	movs	r3, #25
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	b019      	add	sp, #100	; 0x64
 8001cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	2207      	movs	r2, #7
 8001cda:	f8c8 b028 	str.w	fp, [r8, #40]	; 0x28
 8001cde:	e7e1      	b.n	8001ca4 <gc_execute_line+0x49c>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 8001ce0:	2408      	movs	r4, #8
 8001ce2:	f8c8 b02c 	str.w	fp, [r8, #44]	; 0x2c
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8001ce6:	fa45 f304 	asr.w	r3, r5, r4
 8001cea:	07df      	lsls	r7, r3, #31
 8001cec:	d4ee      	bmi.n	8001ccc <gc_execute_line+0x4c4>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8001cee:	4658      	mov	r0, fp
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	f7fe ff6d 	bl	8000bd0 <__aeabi_fcmplt>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	f040 8274 	bne.w	80021e4 <gc_execute_line+0x9dc>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	40a3      	lsls	r3, r4
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	e7d3      	b.n	8001cac <gc_execute_line+0x4a4>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8001d04:	4658      	mov	r0, fp
 8001d06:	49c2      	ldr	r1, [pc, #776]	; (8002010 <gc_execute_line+0x808>)
 8001d08:	f7fe ff80 	bl	8000c0c <__aeabi_fcmpgt>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	f040 8600 	bne.w	8002912 <gc_execute_line+0x110a>
				break;
 8001d12:	2409      	movs	r4, #9
					gc_block.values.t = int_value;
 8001d14:	f888 7030 	strb.w	r7, [r8, #48]	; 0x30
				break;
 8001d18:	e7e5      	b.n	8001ce6 <gc_execute_line+0x4de>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8001d1a:	9b06      	ldr	r3, [sp, #24]
 8001d1c:	220a      	movs	r2, #10
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	9306      	str	r3, [sp, #24]
 8001d24:	f8c8 b034 	str.w	fp, [r8, #52]	; 0x34
 8001d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2c:	e7ba      	b.n	8001ca4 <gc_execute_line+0x49c>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 8001d2e:	2400      	movs	r4, #0
 8001d30:	f8c8 b00c 	str.w	fp, [r8, #12]
 8001d34:	e7d7      	b.n	8001ce6 <gc_execute_line+0x4de>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 8001d36:	9b08      	ldr	r3, [sp, #32]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	9308      	str	r3, [sp, #32]
 8001d42:	f8c8 b010 	str.w	fp, [r8, #16]
 8001d46:	2302      	movs	r3, #2
 8001d48:	e7ac      	b.n	8001ca4 <gc_execute_line+0x49c>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8001d4a:	9b08      	ldr	r3, [sp, #32]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	9308      	str	r3, [sp, #32]
 8001d56:	f8c8 b014 	str.w	fp, [r8, #20]
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e7a2      	b.n	8001ca4 <gc_execute_line+0x49c>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8001d5e:	9b08      	ldr	r3, [sp, #32]
 8001d60:	2203      	movs	r2, #3
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	9308      	str	r3, [sp, #32]
 8001d6a:	f8c8 b018 	str.w	fp, [r8, #24]
 8001d6e:	2308      	movs	r3, #8
 8001d70:	e798      	b.n	8001ca4 <gc_execute_line+0x49c>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 8001d72:	2310      	movs	r3, #16
 8001d74:	2204      	movs	r2, #4
 8001d76:	f888 701c 	strb.w	r7, [r8, #28]
 8001d7a:	e793      	b.n	8001ca4 <gc_execute_line+0x49c>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8001d7c:	4658      	mov	r0, fp
 8001d7e:	f7fe ff65 	bl	8000c4c <__aeabi_f2iz>
 8001d82:	2405      	movs	r4, #5
 8001d84:	f8c8 0020 	str.w	r0, [r8, #32]
 8001d88:	e7ad      	b.n	8001ce6 <gc_execute_line+0x4de>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8001d8a:	2406      	movs	r4, #6
 8001d8c:	f8c8 b024 	str.w	fp, [r8, #36]	; 0x24
 8001d90:	e7a9      	b.n	8001ce6 <gc_execute_line+0x4de>
 8001d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d96:	230b      	movs	r3, #11
 8001d98:	e6f4      	b.n	8001b84 <gc_execute_line+0x37c>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001d9a:	2f1c      	cmp	r7, #28
            gc_block.non_modal_command = int_value;
 8001d9c:	f888 7000 	strb.w	r7, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8001da0:	d007      	beq.n	8001db2 <gc_execute_line+0x5aa>
 8001da2:	2f1e      	cmp	r7, #30
 8001da4:	d005      	beq.n	8001db2 <gc_execute_line+0x5aa>
 8001da6:	2f5c      	cmp	r7, #92	; 0x5c
 8001da8:	f040 8102 	bne.w	8001fb0 <gc_execute_line+0x7a8>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	f43f af38 	beq.w	8001c22 <gc_execute_line+0x41a>
 8001db2:	2a0a      	cmp	r2, #10
 8001db4:	f43f af35 	beq.w	8001c22 <gc_execute_line+0x41a>
 8001db8:	e5ae      	b.n	8001918 <gc_execute_line+0x110>
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8112 	beq.w	8001fe6 <gc_execute_line+0x7de>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8001dc2:	07eb      	lsls	r3, r5, #31
 8001dc4:	f140 834b 	bpl.w	800245e <gc_execute_line+0xc56>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8001dc8:	f898 3003 	ldrb.w	r3, [r8, #3]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d106      	bne.n	8001dde <gc_execute_line+0x5d6>
 8001dd0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8001dd4:	498f      	ldr	r1, [pc, #572]	; (8002014 <gc_execute_line+0x80c>)
 8001dd6:	f7fe fd5d 	bl	8000894 <__aeabi_fmul>
 8001dda:	f8c8 000c 	str.w	r0, [r8, #12]
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8001dde:	05e8      	lsls	r0, r5, #23
 8001de0:	d403      	bmi.n	8001dea <gc_execute_line+0x5e2>
 8001de2:	4b8d      	ldr	r3, [pc, #564]	; (8002018 <gc_execute_line+0x810>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8001dea:	f898 9000 	ldrb.w	r9, [r8]
 8001dee:	f1b9 0f04 	cmp.w	r9, #4
 8001df2:	f000 8132 	beq.w	800205a <gc_execute_line+0x852>
  switch (gc_block.modal.plane_select) {
 8001df6:	f898 a005 	ldrb.w	sl, [r8, #5]
 8001dfa:	f1ba 0f00 	cmp.w	sl, #0
 8001dfe:	f000 815e 	beq.w	80020be <gc_execute_line+0x8b6>
 8001e02:	f1ba 0f01 	cmp.w	sl, #1
 8001e06:	f040 811f 	bne.w	8002048 <gc_execute_line+0x840>
 8001e0a:	2400      	movs	r4, #0
 8001e0c:	f04f 0b02 	mov.w	fp, #2
 8001e10:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8001e14:	2705      	movs	r7, #5
 8001e16:	46da      	mov	sl, fp
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8001e18:	f898 3003 	ldrb.w	r3, [r8, #3]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	f000 8123 	beq.w	8002068 <gc_execute_line+0x860>
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8001e22:	9b07      	ldr	r3, [sp, #28]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	f000 813f 	beq.w	80020a8 <gc_execute_line+0x8a0>
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 8001e2a:	4b7c      	ldr	r3, [pc, #496]	; (800201c <gc_execute_line+0x814>)
 8001e2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e30:	ab12      	add	r3, sp, #72	; 0x48
 8001e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8001e36:	05b1      	lsls	r1, r6, #22
 8001e38:	d510      	bpl.n	8001e5c <gc_execute_line+0x654>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8001e3a:	f898 0007 	ldrb.w	r0, [r8, #7]
 8001e3e:	2806      	cmp	r0, #6
 8001e40:	f200 82f1 	bhi.w	8002426 <gc_execute_line+0xc1e>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8001e44:	4b74      	ldr	r3, [pc, #464]	; (8002018 <gc_execute_line+0x810>)
 8001e46:	799b      	ldrb	r3, [r3, #6]
 8001e48:	4283      	cmp	r3, r0
 8001e4a:	d007      	beq.n	8001e5c <gc_execute_line+0x654>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8001e4c:	a912      	add	r1, sp, #72	; 0x48
 8001e4e:	f004 fb0b 	bl	8006468 <settings_read_coord_data>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	f000 840e 	beq.w	8002674 <gc_execute_line+0xe6c>
 8001e58:	f898 9000 	ldrb.w	r9, [r8]
  switch (gc_block.non_modal_command) {
 8001e5c:	f1b9 0f0a 	cmp.w	r9, #10
 8001e60:	f000 816a 	beq.w	8002138 <gc_execute_line+0x930>
 8001e64:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8001e68:	f000 8130 	beq.w	80020cc <gc_execute_line+0x8c4>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 8001e6c:	9b07      	ldr	r3, [sp, #28]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d029      	beq.n	8001ec6 <gc_execute_line+0x6be>
        if (axis_words) {
 8001e72:	9a06      	ldr	r2, [sp, #24]
 8001e74:	b33a      	cbz	r2, 8001ec6 <gc_execute_line+0x6be>
 8001e76:	f898 3004 	ldrb.w	r3, [r8, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8455 	beq.w	800272a <gc_execute_line+0xf22>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001e80:	07d1      	lsls	r1, r2, #31
 8001e82:	f140 84e6 	bpl.w	8002852 <gc_execute_line+0x104a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8001e86:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8001e8a:	f000 83f6 	beq.w	800267a <gc_execute_line+0xe72>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001e8e:	4b62      	ldr	r3, [pc, #392]	; (8002018 <gc_execute_line+0x810>)
 8001e90:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
 8001e94:	69d8      	ldr	r0, [r3, #28]
 8001e96:	f7fe fbf5 	bl	8000684 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001e9a:	9b06      	ldr	r3, [sp, #24]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001e9c:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001ea0:	079b      	lsls	r3, r3, #30
 8001ea2:	f100 84e0 	bmi.w	8002866 <gc_execute_line+0x105e>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <gc_execute_line+0x810>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8001eae:	9b06      	ldr	r3, [sp, #24]
 8001eb0:	075a      	lsls	r2, r3, #29
 8001eb2:	f140 84e4 	bpl.w	800287e <gc_execute_line+0x1076>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8001eb6:	4b58      	ldr	r3, [pc, #352]	; (8002018 <gc_execute_line+0x810>)
 8001eb8:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8001ebc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001ebe:	f7fe fbe1 	bl	8000684 <__addsf3>
 8001ec2:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
      switch (gc_block.non_modal_command) {
 8001ec6:	f1b9 0f1e 	cmp.w	r9, #30
 8001eca:	f000 846c 	beq.w	80027a6 <gc_execute_line+0xf9e>
 8001ece:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8001ed2:	f000 83da 	beq.w	800268a <gc_execute_line+0xe82>
 8001ed6:	f1b9 0f1c 	cmp.w	r9, #28
 8001eda:	f000 83c4 	beq.w	8002666 <gc_execute_line+0xe5e>
 8001ede:	f898 9001 	ldrb.w	r9, [r8, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 8001ee2:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8001ee6:	f040 83d6 	bne.w	8002696 <gc_execute_line+0xe8e>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8001eea:	9b06      	ldr	r3, [sp, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 850a 	bne.w	8002906 <gc_execute_line+0x10fe>
 8001ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ef4:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	f000 8163 	beq.w	80021c2 <gc_execute_line+0x9ba>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 8001efc:	f025 0521 	bic.w	r5, r5, #33	; 0x21
 8001f00:	b2ad      	uxth	r5, r5
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z))); } // Remove axis words.
 8001f02:	9b07      	ldr	r3, [sp, #28]
 8001f04:	b113      	cbz	r3, 8001f0c <gc_execute_line+0x704>
 8001f06:	f425 55e0 	bic.w	r5, r5, #7168	; 0x1c00
 8001f0a:	b2ad      	uxth	r5, r5
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	f040 816c 	bne.w	80021ea <gc_execute_line+0x9e2>
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 8001f12:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8001f16:	9517      	str	r5, [sp, #92]	; 0x5c
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8001f18:	2a00      	cmp	r2, #0
 8001f1a:	f000 816f 	beq.w	80021fc <gc_execute_line+0x9f4>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8001f1e:	f026 0649 	bic.w	r6, r6, #73	; 0x49
 8001f22:	2e00      	cmp	r6, #0
 8001f24:	f040 83f0 	bne.w	8002708 <gc_execute_line+0xf00>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 8001f28:	f898 3000 	ldrb.w	r3, [r8]
 8001f2c:	2b35      	cmp	r3, #53	; 0x35
 8001f2e:	d002      	beq.n	8001f36 <gc_execute_line+0x72e>
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f040 83e9 	bne.w	8002708 <gc_execute_line+0xf00>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8001f36:	4a38      	ldr	r2, [pc, #224]	; (8002018 <gc_execute_line+0x810>)
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8001f38:	a815      	add	r0, sp, #84	; 0x54
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8001f3a:	7a11      	ldrb	r1, [r2, #8]
 8001f3c:	7a53      	ldrb	r3, [r2, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 8001f3e:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8001f40:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8001f42:	4937      	ldr	r1, [pc, #220]	; (8002020 <gc_execute_line+0x818>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8001f44:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      pl_data->spindle_speed = gc_state.spindle_speed;
 8001f48:	9216      	str	r2, [sp, #88]	; 0x58
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8001f4a:	f000 fe29 	bl	8002ba0 <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2800      	cmp	r0, #0
 8001f52:	f47f ace2 	bne.w	800191a <gc_execute_line+0x112>
 8001f56:	4a33      	ldr	r2, [pc, #204]	; (8002024 <gc_execute_line+0x81c>)
 8001f58:	4c33      	ldr	r4, [pc, #204]	; (8002028 <gc_execute_line+0x820>)
 8001f5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f60:	e4db      	b.n	800191a <gc_execute_line+0x112>
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8001f62:	2303      	movs	r3, #3
 8001f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f68:	f888 3008 	strb.w	r3, [r8, #8]
 8001f6c:	230b      	movs	r3, #11
 8001f6e:	e609      	b.n	8001b84 <gc_execute_line+0x37c>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8001f70:	2301      	movs	r3, #1
 8001f72:	e4d2      	b.n	800191a <gc_execute_line+0x112>
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001f74:	2302      	movs	r3, #2
 8001f76:	e4d0      	b.n	800191a <gc_execute_line+0x112>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f7e:	f888 300a 	strb.w	r3, [r8, #10]
 8001f82:	230c      	movs	r3, #12
 8001f84:	e5fe      	b.n	8001b84 <gc_execute_line+0x37c>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 8001f86:	2320      	movs	r3, #32
 8001f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f8c:	f888 300a 	strb.w	r3, [r8, #10]
 8001f90:	230c      	movs	r3, #12
 8001f92:	e5f7      	b.n	8001b84 <gc_execute_line+0x37c>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9a:	f888 3009 	strb.w	r3, [r8, #9]
 8001f9e:	230d      	movs	r3, #13
 8001fa0:	e5f0      	b.n	8001b84 <gc_execute_line+0x37c>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001fa2:	2340      	movs	r3, #64	; 0x40
 8001fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa8:	f888 3009 	strb.w	r3, [r8, #9]
 8001fac:	230d      	movs	r3, #13
 8001fae:	e5e9      	b.n	8001b84 <gc_execute_line+0x37c>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8001fb0:	2317      	movs	r3, #23
 8001fb2:	e4b2      	b.n	800191a <gc_execute_line+0x112>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 8001fb4:	2a0a      	cmp	r2, #10
 8001fb6:	f47f acaf 	bne.w	8001918 <gc_execute_line+0x110>
 8001fba:	2f5a      	cmp	r7, #90	; 0x5a
 8001fbc:	f43f acac 	beq.w	8001918 <gc_execute_line+0x110>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	e5a7      	b.n	8001b14 <gc_execute_line+0x30c>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8001fc4:	4919      	ldr	r1, [pc, #100]	; (800202c <gc_execute_line+0x824>)
 8001fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fca:	07dc      	lsls	r4, r3, #31
 8001fcc:	f57f aca4 	bpl.w	8001918 <gc_execute_line+0x110>
              gc_block.modal.motion += (mantissa/10)+100;
 8001fd0:	4917      	ldr	r1, [pc, #92]	; (8002030 <gc_execute_line+0x828>)
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	fba1 1202 	umull	r1, r2, r1, r2
 8001fd8:	08d2      	lsrs	r2, r2, #3
 8001fda:	3a76      	subs	r2, #118	; 0x76
 8001fdc:	f888 2001 	strb.w	r2, [r8, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	9207      	str	r2, [sp, #28]
 8001fe4:	e596      	b.n	8001b14 <gc_execute_line+0x30c>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 8001fe6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	f000 821e 	beq.w	800242c <gc_execute_line+0xc24>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 8001ff0:	4a09      	ldr	r2, [pc, #36]	; (8002018 <gc_execute_line+0x810>)
 8001ff2:	7853      	ldrb	r3, [r2, #1]
 8001ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80f1 	bne.w	80021de <gc_execute_line+0x9d6>
        if (bit_istrue(value_words,bit(WORD_F))) {
 8001ffc:	07ec      	lsls	r4, r5, #31
 8001ffe:	f53f aee3 	bmi.w	8001dc8 <gc_execute_line+0x5c0>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 8002002:	6913      	ldr	r3, [r2, #16]
 8002004:	f8c8 300c 	str.w	r3, [r8, #12]
 8002008:	e6e9      	b.n	8001dde <gc_execute_line+0x5d6>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800200a:	2315      	movs	r3, #21
 800200c:	e485      	b.n	800191a <gc_execute_line+0x112>
 800200e:	bf00      	nop
 8002010:	437f0000 	.word	0x437f0000
 8002014:	41cb3333 	.word	0x41cb3333
 8002018:	2000128c 	.word	0x2000128c
 800201c:	200012b4 	.word	0x200012b4
 8002020:	200012d0 	.word	0x200012d0
 8002024:	20001304 	.word	0x20001304
 8002028:	200012a8 	.word	0x200012a8
 800202c:	40100401 	.word	0x40100401
 8002030:	cccccccd 	.word	0xcccccccd
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002034:	2203      	movs	r2, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 8002036:	f888 3006 	strb.w	r3, [r8, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 800203a:	9207      	str	r2, [sp, #28]
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 800203c:	2308      	movs	r3, #8
 800203e:	e569      	b.n	8001b14 <gc_execute_line+0x30c>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002040:	2102      	movs	r1, #2
 8002042:	2301      	movs	r3, #1
 8002044:	9107      	str	r1, [sp, #28]
 8002046:	e562      	b.n	8001b0e <gc_execute_line+0x306>
  switch (gc_block.modal.plane_select) {
 8002048:	2402      	movs	r4, #2
 800204a:	f04f 0b01 	mov.w	fp, #1
      axis_linear = X_AXIS;
 800204e:	2300      	movs	r3, #0
      axis_0 = Y_AXIS;
 8002050:	46da      	mov	sl, fp
  switch (gc_block.modal.plane_select) {
 8002052:	2706      	movs	r7, #6
      axis_1 = Z_AXIS;
 8002054:	940a      	str	r4, [sp, #40]	; 0x28
      axis_linear = X_AXIS;
 8002056:	930b      	str	r3, [sp, #44]	; 0x2c
 8002058:	e6de      	b.n	8001e18 <gc_execute_line+0x610>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 800205a:	0669      	lsls	r1, r5, #25
 800205c:	f140 81f1 	bpl.w	8002442 <gc_execute_line+0xc3a>
    bit_false(value_words,bit(WORD_P));
 8002060:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8002064:	b2ad      	uxth	r5, r5
 8002066:	e6c6      	b.n	8001df6 <gc_execute_line+0x5ee>
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002068:	9b06      	ldr	r3, [sp, #24]
 800206a:	07da      	lsls	r2, r3, #31
 800206c:	d506      	bpl.n	800207c <gc_execute_line+0x874>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800206e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 8002072:	49a7      	ldr	r1, [pc, #668]	; (8002310 <gc_execute_line+0xb08>)
 8002074:	f7fe fc0e 	bl	8000894 <__aeabi_fmul>
 8002078:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
      if (bit_istrue(axis_words,bit(idx)) ) {
 800207c:	9b06      	ldr	r3, [sp, #24]
 800207e:	079b      	lsls	r3, r3, #30
 8002080:	d506      	bpl.n	8002090 <gc_execute_line+0x888>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002082:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8002086:	49a2      	ldr	r1, [pc, #648]	; (8002310 <gc_execute_line+0xb08>)
 8002088:	f7fe fc04 	bl	8000894 <__aeabi_fmul>
 800208c:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002090:	9b06      	ldr	r3, [sp, #24]
 8002092:	0758      	lsls	r0, r3, #29
 8002094:	f57f aec5 	bpl.w	8001e22 <gc_execute_line+0x61a>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002098:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800209c:	499c      	ldr	r1, [pc, #624]	; (8002310 <gc_execute_line+0xb08>)
 800209e:	f7fe fbf9 	bl	8000894 <__aeabi_fmul>
 80020a2:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
    for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 80020a6:	e6bc      	b.n	8001e22 <gc_execute_line+0x61a>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 80020a8:	f898 3006 	ldrb.w	r3, [r8, #6]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	f47f aebc 	bne.w	8001e2a <gc_execute_line+0x622>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 80020b2:	9b06      	ldr	r3, [sp, #24]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	f43f aeb8 	beq.w	8001e2a <gc_execute_line+0x622>
 80020ba:	2325      	movs	r3, #37	; 0x25
 80020bc:	e42d      	b.n	800191a <gc_execute_line+0x112>
  switch (gc_block.modal.plane_select) {
 80020be:	2401      	movs	r4, #1
      axis_linear = Z_AXIS;
 80020c0:	2302      	movs	r3, #2
  switch (gc_block.modal.plane_select) {
 80020c2:	2703      	movs	r7, #3
 80020c4:	46d3      	mov	fp, sl
      axis_1 = Y_AXIS;
 80020c6:	940a      	str	r4, [sp, #40]	; 0x28
      axis_linear = Z_AXIS;
 80020c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80020ca:	e6a5      	b.n	8001e18 <gc_execute_line+0x610>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 80020cc:	9b06      	ldr	r3, [sp, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 81b4 	beq.w	800243c <gc_execute_line+0xc34>
        if (bit_istrue(axis_words,bit(idx)) ) {
 80020d4:	07da      	lsls	r2, r3, #31
 80020d6:	f100 8297 	bmi.w	8002608 <gc_execute_line+0xe00>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 80020da:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <gc_execute_line+0xb0c>)
 80020dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020de:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
        if (bit_istrue(axis_words,bit(idx)) ) {
 80020e2:	9b06      	ldr	r3, [sp, #24]
 80020e4:	079b      	lsls	r3, r3, #30
 80020e6:	f100 82b1 	bmi.w	800264c <gc_execute_line+0xe44>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 80020ea:	4b8a      	ldr	r3, [pc, #552]	; (8002314 <gc_execute_line+0xb0c>)
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
        if (bit_istrue(axis_words,bit(idx)) ) {
 80020f2:	9b06      	ldr	r3, [sp, #24]
 80020f4:	0758      	lsls	r0, r3, #29
 80020f6:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80020fa:	d579      	bpl.n	80021f0 <gc_execute_line+0x9e8>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80020fc:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8002100:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002102:	f7fe fabf 	bl	8000684 <__addsf3>
 8002106:	4b83      	ldr	r3, [pc, #524]	; (8002314 <gc_execute_line+0xb0c>)
 8002108:	4601      	mov	r1, r0
 800210a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800210c:	f7fe fab8 	bl	8000680 <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002110:	4b80      	ldr	r3, [pc, #512]	; (8002314 <gc_execute_line+0xb0c>)
 8002112:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002114:	f7fe fab4 	bl	8000680 <__aeabi_fsub>
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002118:	2300      	movs	r3, #0
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 800211a:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800211e:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 8002120:	f898 9001 	ldrb.w	r9, [r8, #1]
 8002124:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8002128:	f000 83ed 	beq.w	8002906 <gc_execute_line+0x10fe>
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 800212c:	9b07      	ldr	r3, [sp, #28]
 800212e:	2b02      	cmp	r3, #2
 8002130:	f000 8198 	beq.w	8002464 <gc_execute_line+0xc5c>
      switch (gc_block.modal.motion) {
 8002134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002136:	e6de      	b.n	8001ef6 <gc_execute_line+0x6ee>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002138:	9b06      	ldr	r3, [sp, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 817e 	beq.w	800243c <gc_execute_line+0xc34>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 8002140:	f015 0f50 	tst.w	r5, #80	; 0x50
 8002144:	f000 817d 	beq.w	8002442 <gc_execute_line+0xc3a>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002148:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 800214c:	f7fe fda4 	bl	8000c98 <__aeabi_f2uiz>
 8002150:	b2c3      	uxtb	r3, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002152:	2b06      	cmp	r3, #6
 8002154:	f200 8167 	bhi.w	8002426 <gc_execute_line+0xc1e>
      if (gc_block.values.l != 20) {
 8002158:	f898 201c 	ldrb.w	r2, [r8, #28]
 800215c:	2a14      	cmp	r2, #20
 800215e:	d005      	beq.n	800216c <gc_execute_line+0x964>
        if (gc_block.values.l == 2) {
 8002160:	2a02      	cmp	r2, #2
 8002162:	f47f abd9 	bne.w	8001918 <gc_execute_line+0x110>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8002166:	062a      	lsls	r2, r5, #24
 8002168:	f53f abd6 	bmi.w	8001918 <gc_execute_line+0x110>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 800216c:	f025 0550 	bic.w	r5, r5, #80	; 0x50
 8002170:	b2ad      	uxth	r5, r5
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8368 	beq.w	8002848 <gc_execute_line+0x1040>
 8002178:	3b01      	subs	r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	930c      	str	r3, [sp, #48]	; 0x30
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 8002180:	4965      	ldr	r1, [pc, #404]	; (8002318 <gc_execute_line+0xb10>)
 8002182:	f004 f971 	bl	8006468 <settings_read_coord_data>
 8002186:	2800      	cmp	r0, #0
 8002188:	f000 8274 	beq.w	8002674 <gc_execute_line+0xe6c>
 800218c:	f898 301c 	ldrb.w	r3, [r8, #28]
 8002190:	2b14      	cmp	r3, #20
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002192:	9b06      	ldr	r3, [sp, #24]
 8002194:	f000 83e8 	beq.w	8002968 <gc_execute_line+0x1160>
 8002198:	07d8      	lsls	r0, r3, #31
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 800219a:	bf44      	itt	mi
 800219c:	f8d8 3034 	ldrmi.w	r3, [r8, #52]	; 0x34
 80021a0:	f8c8 3010 	strmi.w	r3, [r8, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 80021a4:	9b06      	ldr	r3, [sp, #24]
 80021a6:	0799      	lsls	r1, r3, #30
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 80021a8:	bf44      	itt	mi
 80021aa:	f8d8 3038 	ldrmi.w	r3, [r8, #56]	; 0x38
 80021ae:	f8c8 3014 	strmi.w	r3, [r8, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 80021b2:	9b06      	ldr	r3, [sp, #24]
 80021b4:	075a      	lsls	r2, r3, #29
 80021b6:	d5b3      	bpl.n	8002120 <gc_execute_line+0x918>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 80021b8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80021bc:	f8c8 3018 	str.w	r3, [r8, #24]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 80021c0:	e7ae      	b.n	8002120 <gc_execute_line+0x918>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 80021c2:	4b56      	ldr	r3, [pc, #344]	; (800231c <gc_execute_line+0xb14>)
 80021c4:	401d      	ands	r5, r3
 80021c6:	e69c      	b.n	8001f02 <gc_execute_line+0x6fa>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 80021c8:	f898 3002 	ldrb.w	r3, [r8, #2]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	f000 829e 	beq.w	800270e <gc_execute_line+0xf06>
 80021d2:	4625      	mov	r5, r4
 80021d4:	4626      	mov	r6, r4
 80021d6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80021da:	9406      	str	r4, [sp, #24]
 80021dc:	e708      	b.n	8001ff0 <gc_execute_line+0x7e8>
 80021de:	2300      	movs	r3, #0
 80021e0:	9309      	str	r3, [sp, #36]	; 0x24
 80021e2:	e5fc      	b.n	8001dde <gc_execute_line+0x5d6>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 80021e4:	2304      	movs	r3, #4
 80021e6:	f7ff bb98 	b.w	800191a <gc_execute_line+0x112>
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 80021ea:	2324      	movs	r3, #36	; 0x24
 80021ec:	f7ff bb95 	b.w	800191a <gc_execute_line+0x112>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <gc_execute_line+0xb0c>)
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80021f2:	920c      	str	r2, [sp, #48]	; 0x30
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 80021fa:	e791      	b.n	8002120 <gc_execute_line+0x918>
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80021fc:	4b48      	ldr	r3, [pc, #288]	; (8002320 <gc_execute_line+0xb18>)
 80021fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002202:	079c      	lsls	r4, r3, #30
 8002204:	f100 824f 	bmi.w	80026a6 <gc_execute_line+0xe9e>
 8002208:	4b42      	ldr	r3, [pc, #264]	; (8002314 <gc_execute_line+0xb0c>)
 800220a:	7a5c      	ldrb	r4, [r3, #9]
 800220c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800220e:	f003 0540 	and.w	r5, r3, #64	; 0x40
  gc_state.line_number = gc_block.values.n;
 8002212:	4940      	ldr	r1, [pc, #256]	; (8002314 <gc_execute_line+0xb0c>)
 8002214:	f8d8 2020 	ldr.w	r2, [r8, #32]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002218:	f898 3002 	ldrb.w	r3, [r8, #2]
  gc_state.line_number = gc_block.values.n;
 800221c:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 800221e:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8002220:	b113      	cbz	r3, 8002228 <gc_execute_line+0xa20>
 8002222:	2308      	movs	r3, #8
 8002224:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002228:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <gc_execute_line+0xb0c>)
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800222a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 800222e:	68d7      	ldr	r7, [r2, #12]
 8002230:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
 8002234:	4638      	mov	r0, r7
 8002236:	4649      	mov	r1, r9
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002238:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 800223a:	9315      	str	r3, [sp, #84]	; 0x54
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 800223c:	f7fe fcbe 	bl	8000bbc <__aeabi_fcmpeq>
 8002240:	2800      	cmp	r0, #0
 8002242:	f000 81cc 	beq.w	80025de <gc_execute_line+0xdd6>
 8002246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002248:	069a      	lsls	r2, r3, #26
 800224a:	f100 81c8 	bmi.w	80025de <gc_execute_line+0xdd6>
 800224e:	46b9      	mov	r9, r7
 8002250:	b2ee      	uxtb	r6, r5
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002252:	2e00      	cmp	r6, #0
 8002254:	f000 8255 	beq.w	8002702 <gc_execute_line+0xefa>
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002258:	f898 000a 	ldrb.w	r0, [r8, #10]
  gc_state.tool = gc_block.values.t;
 800225c:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8002260:	4d2c      	ldr	r5, [pc, #176]	; (8002314 <gc_execute_line+0xb0c>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002262:	42a0      	cmp	r0, r4
  gc_state.tool = gc_block.values.t;
 8002264:	752b      	strb	r3, [r5, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002266:	d005      	beq.n	8002274 <gc_execute_line+0xa6c>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 8002268:	9916      	ldr	r1, [sp, #88]	; 0x58
 800226a:	f004 fc0b 	bl	8006a84 <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 800226e:	f898 400a 	ldrb.w	r4, [r8, #10]
 8002272:	726c      	strb	r4, [r5, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <gc_execute_line+0xb0c>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002276:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 800227a:	7a1b      	ldrb	r3, [r3, #8]
 800227c:	f898 0009 	ldrb.w	r0, [r8, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002280:	4314      	orrs	r4, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002282:	4283      	cmp	r3, r0
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002284:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002288:	f040 8225 	bne.w	80026d6 <gc_execute_line+0xece>
 800228c:	431c      	orrs	r4, r3
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 800228e:	f898 3000 	ldrb.w	r3, [r8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002292:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002296:	2b04      	cmp	r3, #4
 8002298:	f000 8343 	beq.w	8002922 <gc_execute_line+0x111a>
  gc_state.modal.units = gc_block.modal.units;
 800229c:	f898 3003 	ldrb.w	r3, [r8, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 80022a0:	491c      	ldr	r1, [pc, #112]	; (8002314 <gc_execute_line+0xb0c>)
 80022a2:	f898 2005 	ldrb.w	r2, [r8, #5]
  gc_state.modal.units = gc_block.modal.units;
 80022a6:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 80022a8:	9b07      	ldr	r3, [sp, #28]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 80022aa:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	f000 8289 	beq.w	80027c4 <gc_execute_line+0xfbc>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 80022b2:	4c18      	ldr	r4, [pc, #96]	; (8002314 <gc_execute_line+0xb0c>)
 80022b4:	f898 3007 	ldrb.w	r3, [r8, #7]
 80022b8:	79a2      	ldrb	r2, [r4, #6]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d008      	beq.n	80022d0 <gc_execute_line+0xac8>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 80022be:	aa12      	add	r2, sp, #72	; 0x48
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 80022c0:	71a3      	strb	r3, [r4, #6]
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 80022c2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80022c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80022c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    system_flag_wco_change();
 80022cc:	f005 fecc 	bl	8008068 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 80022d0:	f898 3000 	ldrb.w	r3, [r8]
  gc_state.modal.distance = gc_block.modal.distance;
 80022d4:	f898 2004 	ldrb.w	r2, [r8, #4]
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <gc_execute_line+0xb0c>)
  switch(gc_block.non_modal_command) {
 80022da:	2b28      	cmp	r3, #40	; 0x28
  gc_state.modal.distance = gc_block.modal.distance;
 80022dc:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 80022de:	d821      	bhi.n	8002324 <gc_execute_line+0xb1c>
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	d92d      	bls.n	8002340 <gc_execute_line+0xb38>
 80022e4:	3b0a      	subs	r3, #10
 80022e6:	2b1e      	cmp	r3, #30
 80022e8:	d82a      	bhi.n	8002340 <gc_execute_line+0xb38>
 80022ea:	e8df f003 	tbb	[pc, r3]
 80022ee:	298a      	.short	0x298a
 80022f0:	29292929 	.word	0x29292929
 80022f4:	29292929 	.word	0x29292929
 80022f8:	29292929 	.word	0x29292929
 80022fc:	29292929 	.word	0x29292929
 8002300:	29752975 	.word	0x29752975
 8002304:	29292929 	.word	0x29292929
 8002308:	29702929 	.word	0x29702929
 800230c:	6b          	.byte	0x6b
 800230d:	00          	.byte	0x00
 800230e:	bf00      	nop
 8002310:	41cb3333 	.word	0x41cb3333
 8002314:	2000128c 	.word	0x2000128c
 8002318:	200012e0 	.word	0x200012e0
 800231c:	fffffcde 	.word	0xfffffcde
 8002320:	200014c8 	.word	0x200014c8
 8002324:	2b5c      	cmp	r3, #92	; 0x5c
 8002326:	f000 8366 	beq.w	80029f6 <gc_execute_line+0x11ee>
 800232a:	2b66      	cmp	r3, #102	; 0x66
 800232c:	d108      	bne.n	8002340 <gc_execute_line+0xb38>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 800232e:	2300      	movs	r3, #0
 8002330:	4abe      	ldr	r2, [pc, #760]	; (800262c <gc_execute_line+0xe24>)
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002338:	f1a2 0134 	sub.w	r1, r2, #52	; 0x34
      system_flag_wco_change();
 800233c:	f005 fe94 	bl	8008068 <system_flag_wco_change>
  gc_state.modal.motion = gc_block.modal.motion;
 8002340:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002344:	4aba      	ldr	r2, [pc, #744]	; (8002630 <gc_execute_line+0xe28>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8002346:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 8002348:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 800234a:	d003      	beq.n	8002354 <gc_execute_line+0xb4c>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 800234c:	9a07      	ldr	r2, [sp, #28]
 800234e:	2a02      	cmp	r2, #2
 8002350:	f000 82ba 	beq.w	80028c8 <gc_execute_line+0x10c0>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8002354:	f898 3008 	ldrb.w	r3, [r8, #8]
 8002358:	4ab5      	ldr	r2, [pc, #724]	; (8002630 <gc_execute_line+0xe28>)
 800235a:	71d3      	strb	r3, [r2, #7]
  if (gc_state.modal.program_flow) {
 800235c:	2b00      	cmp	r3, #0
 800235e:	f43f aadc 	beq.w	800191a <gc_execute_line+0x112>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8002362:	f002 ffb3 	bl	80052cc <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 8002366:	4bb2      	ldr	r3, [pc, #712]	; (8002630 <gc_execute_line+0xe28>)
 8002368:	79db      	ldrb	r3, [r3, #7]
 800236a:	2b03      	cmp	r3, #3
 800236c:	f000 834b 	beq.w	8002a06 <gc_execute_line+0x11fe>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002370:	2201      	movs	r2, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002372:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002374:	f246 4064 	movw	r0, #25700	; 0x6464
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 8002378:	2164      	movs	r1, #100	; 0x64
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 800237a:	4dad      	ldr	r5, [pc, #692]	; (8002630 <gc_execute_line+0xe28>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 800237c:	4bad      	ldr	r3, [pc, #692]	; (8002634 <gc_execute_line+0xe2c>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 800237e:	802a      	strh	r2, [r5, #0]
      if (sys.state != STATE_CHECK_MODE) {
 8002380:	781a      	ldrb	r2, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002382:	712c      	strb	r4, [r5, #4]
      if (sys.state != STATE_CHECK_MODE) {
 8002384:	2a02      	cmp	r2, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8002386:	70ec      	strb	r4, [r5, #3]
      gc_state.modal.coord_select = 0; // G54
 8002388:	71ac      	strb	r4, [r5, #6]
      gc_state.modal.coolant = COOLANT_DISABLE;
 800238a:	812c      	strh	r4, [r5, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 800238c:	8118      	strh	r0, [r3, #8]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 800238e:	7299      	strb	r1, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 8002390:	d010      	beq.n	80023b4 <gc_execute_line+0xbac>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002392:	4620      	mov	r0, r4
 8002394:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8002398:	f004 f866 	bl	8006468 <settings_read_coord_data>
 800239c:	2800      	cmp	r0, #0
 800239e:	f000 8169 	beq.w	8002674 <gc_execute_line+0xe6c>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 80023a2:	f005 fe61 	bl	8008068 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 80023a6:	4620      	mov	r0, r4
 80023a8:	2100      	movs	r1, #0
 80023aa:	f004 fadf 	bl	800696c <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 80023ae:	4620      	mov	r0, r4
 80023b0:	f7ff f91e 	bl	80015f0 <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 80023b4:	2008      	movs	r0, #8
 80023b6:	f002 ffd3 	bl	8005360 <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80023ba:	2300      	movs	r3, #0
 80023bc:	4a9c      	ldr	r2, [pc, #624]	; (8002630 <gc_execute_line+0xe28>)
 80023be:	71d3      	strb	r3, [r2, #7]
 80023c0:	f7ff baab 	b.w	800191a <gc_execute_line+0x112>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 80023c4:	2007      	movs	r0, #7
 80023c6:	499c      	ldr	r1, [pc, #624]	; (8002638 <gc_execute_line+0xe30>)
 80023c8:	f003 ff7a 	bl	80062c0 <settings_write_coord_data>
      break;
 80023cc:	e7b8      	b.n	8002340 <gc_execute_line+0xb38>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 80023ce:	2006      	movs	r0, #6
 80023d0:	4999      	ldr	r1, [pc, #612]	; (8002638 <gc_execute_line+0xe30>)
 80023d2:	f003 ff75 	bl	80062c0 <settings_write_coord_data>
      break;
 80023d6:	e7b3      	b.n	8002340 <gc_execute_line+0xb38>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 80023d8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 80023e4:	9b07      	ldr	r3, [sp, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 839f 	bne.w	8002b2a <gc_execute_line+0x1322>
      mc_line(gc_block.values.ijk, pl_data);
 80023ec:	4d93      	ldr	r5, [pc, #588]	; (800263c <gc_execute_line+0xe34>)
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 80023ee:	4c92      	ldr	r4, [pc, #584]	; (8002638 <gc_execute_line+0xe30>)
      mc_line(gc_block.values.ijk, pl_data);
 80023f0:	4628      	mov	r0, r5
 80023f2:	a915      	add	r1, sp, #84	; 0x54
 80023f4:	f000 ff7c 	bl	80032f0 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 80023f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 8002400:	e79e      	b.n	8002340 <gc_execute_line+0xb38>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002404:	4c8d      	ldr	r4, [pc, #564]	; (800263c <gc_execute_line+0xe34>)
 8002406:	4628      	mov	r0, r5
 8002408:	4621      	mov	r1, r4
 800240a:	f003 ff59 	bl	80062c0 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 800240e:	4b88      	ldr	r3, [pc, #544]	; (8002630 <gc_execute_line+0xe28>)
 8002410:	799b      	ldrb	r3, [r3, #6]
 8002412:	42ab      	cmp	r3, r5
 8002414:	d194      	bne.n	8002340 <gc_execute_line+0xb38>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8002416:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <gc_execute_line+0xe38>)
 800241c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        system_flag_wco_change();
 8002420:	f005 fe22 	bl	8008068 <system_flag_wco_change>
 8002424:	e78c      	b.n	8002340 <gc_execute_line+0xb38>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002426:	231d      	movs	r3, #29
 8002428:	f7ff ba77 	b.w	800191a <gc_execute_line+0x112>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 800242c:	9b07      	ldr	r3, [sp, #28]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d00a      	beq.n	8002448 <gc_execute_line+0xc40>
 8002432:	9c08      	ldr	r4, [sp, #32]
 8002434:	2300      	movs	r3, #0
 8002436:	9408      	str	r4, [sp, #32]
 8002438:	9309      	str	r3, [sp, #36]	; 0x24
 800243a:	e4d0      	b.n	8001dde <gc_execute_line+0x5d6>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 800243c:	231a      	movs	r3, #26
 800243e:	f7ff ba6c 	b.w	800191a <gc_execute_line+0x112>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 8002442:	231c      	movs	r3, #28
 8002444:	f7ff ba69 	b.w	800191a <gc_execute_line+0x112>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 8002448:	f898 3001 	ldrb.w	r3, [r8, #1]
 800244c:	2b50      	cmp	r3, #80	; 0x50
 800244e:	f43f acc6 	beq.w	8001dde <gc_execute_line+0x5d6>
 8002452:	2b00      	cmp	r3, #0
 8002454:	f43f acc3 	beq.w	8001dde <gc_execute_line+0x5d6>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 8002458:	07ef      	lsls	r7, r5, #31
 800245a:	f53f acc0 	bmi.w	8001dde <gc_execute_line+0x5d6>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800245e:	2316      	movs	r3, #22
 8002460:	f7ff ba5b 	b.w	800191a <gc_execute_line+0x112>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 8002464:	f1b9 0f00 	cmp.w	r9, #0
 8002468:	f000 8156 	beq.w	8002718 <gc_execute_line+0xf10>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800246c:	2100      	movs	r1, #0
 800246e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8002472:	f7fe fba3 	bl	8000bbc <__aeabi_fcmpeq>
 8002476:	2800      	cmp	r0, #0
 8002478:	d1f1      	bne.n	800245e <gc_execute_line+0xc56>
      switch (gc_block.modal.motion) {
 800247a:	f1b9 0f03 	cmp.w	r9, #3
 800247e:	d00d      	beq.n	800249c <gc_execute_line+0xc94>
 8002480:	f200 81b5 	bhi.w	80027ee <gc_execute_line+0xfe6>
 8002484:	f1b9 0f01 	cmp.w	r9, #1
 8002488:	f000 8146 	beq.w	8002718 <gc_execute_line+0xf10>
 800248c:	f1b9 0f02 	cmp.w	r9, #2
 8002490:	f47f ae50 	bne.w	8002134 <gc_execute_line+0x92c>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8002494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 800249c:	9b06      	ldr	r3, [sp, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0cc      	beq.n	800243c <gc_execute_line+0xc34>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 80024a2:	423b      	tst	r3, r7
 80024a4:	f000 8349 	beq.w	8002b3a <gc_execute_line+0x1332>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 80024a8:	4b61      	ldr	r3, [pc, #388]	; (8002630 <gc_execute_line+0xe28>)
 80024aa:	eb08 028b 	add.w	r2, r8, fp, lsl #2
 80024ae:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80024b2:	69d9      	ldr	r1, [r3, #28]
 80024b4:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80024b6:	f7fe f8e3 	bl	8000680 <__aeabi_fsub>
 80024ba:	4684      	mov	ip, r0
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 80024bc:	4b5c      	ldr	r3, [pc, #368]	; (8002630 <gc_execute_line+0xe28>)
 80024be:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 80024c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80024c6:	69d9      	ldr	r1, [r3, #28]
 80024c8:	6b50      	ldr	r0, [r2, #52]	; 0x34
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 80024ca:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 80024ce:	f7fe f8d7 	bl	8000680 <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 80024d2:	f015 0380 	ands.w	r3, r5, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 80024d6:	4681      	mov	r9, r0
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 80024d8:	f000 82aa 	beq.w	8002a30 <gc_execute_line+0x1228>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 80024dc:	220c      	movs	r2, #12
 80024de:	4959      	ldr	r1, [pc, #356]	; (8002644 <gc_execute_line+0xe3c>)
 80024e0:	4855      	ldr	r0, [pc, #340]	; (8002638 <gc_execute_line+0xe30>)
 80024e2:	f007 f8a1 	bl	8009628 <memcmp>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	f000 82e6 	beq.w	8002ab8 <gc_execute_line+0x12b0>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 80024ec:	f898 3003 	ldrb.w	r3, [r8, #3]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d106      	bne.n	8002502 <gc_execute_line+0xcfa>
 80024f4:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80024f8:	4953      	ldr	r1, [pc, #332]	; (8002648 <gc_execute_line+0xe40>)
 80024fa:	f7fe f9cb 	bl	8000894 <__aeabi_fmul>
 80024fe:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002502:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8002506:	4608      	mov	r0, r1
 8002508:	f7fe f9c4 	bl	8000894 <__aeabi_fmul>
 800250c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002510:	f7fe f9c0 	bl	8000894 <__aeabi_fmul>
 8002514:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002516:	4607      	mov	r7, r0
 8002518:	4608      	mov	r0, r1
 800251a:	f7fe f9bb 	bl	8000894 <__aeabi_fmul>
 800251e:	4649      	mov	r1, r9
 8002520:	9008      	str	r0, [sp, #32]
 8002522:	4648      	mov	r0, r9
 8002524:	f7fe f9b6 	bl	8000894 <__aeabi_fmul>
 8002528:	9b08      	ldr	r3, [sp, #32]
 800252a:	4601      	mov	r1, r0
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f8a9 	bl	8000684 <__addsf3>
 8002532:	4601      	mov	r1, r0
 8002534:	4638      	mov	r0, r7
 8002536:	f7fe f8a3 	bl	8000680 <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 800253a:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 800253c:	4607      	mov	r7, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 800253e:	f7fe fb47 	bl	8000bd0 <__aeabi_fcmplt>
 8002542:	2800      	cmp	r0, #0
 8002544:	f040 82f6 	bne.w	8002b34 <gc_execute_line+0x132c>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002548:	4638      	mov	r0, r7
 800254a:	f007 fa03 	bl	8009954 <sqrtf>
 800254e:	4649      	mov	r1, r9
 8002550:	4607      	mov	r7, r0
 8002552:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002554:	f001 fa54 	bl	8003a00 <hypot_f>
 8002558:	4601      	mov	r1, r0
 800255a:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 800255e:	f7fe fa4d 	bl	80009fc <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002562:	f898 3001 	ldrb.w	r3, [r8, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002566:	4607      	mov	r7, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002568:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 800256a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 800256e:	bf08      	it	eq
 8002570:	f100 4700 	addeq.w	r7, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	9308      	str	r3, [sp, #32]
 800257a:	f7fe fb29 	bl	8000bd0 <__aeabi_fcmplt>
 800257e:	b130      	cbz	r0, 800258e <gc_execute_line+0xd86>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002580:	9b08      	ldr	r3, [sp, #32]
                h_x2_div_d = -h_x2_div_d;
 8002582:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002586:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800258a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 800258e:	f10b 0302 	add.w	r3, fp, #2
 8002592:	4649      	mov	r1, r9
 8002594:	4638      	mov	r0, r7
 8002596:	eb08 0b83 	add.w	fp, r8, r3, lsl #2
 800259a:	f7fe f97b 	bl	8000894 <__aeabi_fmul>
 800259e:	4601      	mov	r1, r0
 80025a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80025a2:	f7fe f86d 	bl	8000680 <__aeabi_fsub>
 80025a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025aa:	f7fe f973 	bl	8000894 <__aeabi_fmul>
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80025ae:	990d      	ldr	r1, [sp, #52]	; 0x34
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 80025b0:	f8cb 0008 	str.w	r0, [fp, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80025b4:	4638      	mov	r0, r7
 80025b6:	f7fe f96d 	bl	8000894 <__aeabi_fmul>
 80025ba:	4649      	mov	r1, r9
 80025bc:	f7fe f862 	bl	8000684 <__addsf3>
 80025c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025c4:	f7fe f966 	bl	8000894 <__aeabi_fmul>
 80025c8:	3402      	adds	r4, #2
 80025ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
            bit_false(value_words,bit(WORD_R));
 80025cc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80025d0:	eb08 0484 	add.w	r4, r8, r4, lsl #2
            bit_false(value_words,bit(WORD_R));
 80025d4:	b2ad      	uxth	r5, r5
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	60a0      	str	r0, [r4, #8]
 80025dc:	e48b      	b.n	8001ef6 <gc_execute_line+0x6ee>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80025de:	2c00      	cmp	r4, #0
 80025e0:	d05f      	beq.n	80026a2 <gc_execute_line+0xe9a>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 80025e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	d45c      	bmi.n	80026a2 <gc_execute_line+0xe9a>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80025e8:	f005 06ff 	and.w	r6, r5, #255	; 0xff
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d07e      	beq.n	80026ee <gc_execute_line+0xee6>
            spindle_sync(gc_state.modal.spindle, 0.0);
 80025f0:	4620      	mov	r0, r4
 80025f2:	2100      	movs	r1, #0
 80025f4:	f004 fa46 	bl	8006a84 <spindle_sync>
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <gc_execute_line+0xe28>)
 80025fa:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
 80025fe:	7a5c      	ldrb	r4, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <gc_execute_line+0xe28>)
 8002602:	f8c3 900c 	str.w	r9, [r3, #12]
 8002606:	e624      	b.n	8002252 <gc_execute_line+0xa4a>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002608:	9912      	ldr	r1, [sp, #72]	; 0x48
 800260a:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 800260e:	f7fe f839 	bl	8000684 <__addsf3>
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <gc_execute_line+0xe28>)
 8002614:	4601      	mov	r1, r0
 8002616:	69d8      	ldr	r0, [r3, #28]
 8002618:	f7fe f832 	bl	8000680 <__aeabi_fsub>
 800261c:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002620:	e55f      	b.n	80020e2 <gc_execute_line+0x8da>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002622:	2201      	movs	r2, #1
 8002624:	9207      	str	r2, [sp, #28]
 8002626:	f7ff ba75 	b.w	8001b14 <gc_execute_line+0x30c>
 800262a:	bf00      	nop
 800262c:	200012c0 	.word	0x200012c0
 8002630:	2000128c 	.word	0x2000128c
 8002634:	20001314 	.word	0x20001314
 8002638:	200012a8 	.word	0x200012a8
 800263c:	200012e0 	.word	0x200012e0
 8002640:	200012b4 	.word	0x200012b4
 8002644:	20001304 	.word	0x20001304
 8002648:	41cb3333 	.word	0x41cb3333
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 800264c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800264e:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8002652:	f7fe f817 	bl	8000684 <__addsf3>
 8002656:	4bb5      	ldr	r3, [pc, #724]	; (800292c <gc_execute_line+0x1124>)
 8002658:	4601      	mov	r1, r0
 800265a:	6a18      	ldr	r0, [r3, #32]
 800265c:	f7fe f810 	bl	8000680 <__aeabi_fsub>
 8002660:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002664:	e545      	b.n	80020f2 <gc_execute_line+0x8ea>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002666:	2006      	movs	r0, #6
 8002668:	49b1      	ldr	r1, [pc, #708]	; (8002930 <gc_execute_line+0x1128>)
 800266a:	f003 fefd 	bl	8006468 <settings_read_coord_data>
 800266e:	2800      	cmp	r0, #0
 8002670:	f040 80a0 	bne.w	80027b4 <gc_execute_line+0xfac>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002674:	2307      	movs	r3, #7
 8002676:	f7ff b950 	b.w	800191a <gc_execute_line+0x112>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800267a:	9b06      	ldr	r3, [sp, #24]
 800267c:	079b      	lsls	r3, r3, #30
 800267e:	f140 8167 	bpl.w	8002950 <gc_execute_line+0x1148>
 8002682:	9b06      	ldr	r3, [sp, #24]
 8002684:	0759      	lsls	r1, r3, #29
 8002686:	f140 80fa 	bpl.w	800287e <gc_execute_line+0x1076>
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 800268a:	f898 9001 	ldrb.w	r9, [r8, #1]
 800268e:	f1b9 0f01 	cmp.w	r9, #1
 8002692:	f200 813b 	bhi.w	800290c <gc_execute_line+0x1104>
  switch (gc_block.modal.plane_select) {
 8002696:	2300      	movs	r3, #0
 8002698:	930c      	str	r3, [sp, #48]	; 0x30
 800269a:	e547      	b.n	800212c <gc_execute_line+0x924>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800269c:	2318      	movs	r3, #24
 800269e:	f7ff b93c 	b.w	800191a <gc_execute_line+0x112>
 80026a2:	b2ee      	uxtb	r6, r5
 80026a4:	e7ac      	b.n	8002600 <gc_execute_line+0xdf8>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 80026a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d903      	bls.n	80026b8 <gc_execute_line+0xeb0>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 80026b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b6:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 80026b8:	9b06      	ldr	r3, [sp, #24]
 80026ba:	b11b      	cbz	r3, 80026c4 <gc_execute_line+0xebc>
 80026bc:	9b07      	ldr	r3, [sp, #28]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	f000 81ac 	beq.w	8002a1c <gc_execute_line+0x1214>
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 80026c4:	4b99      	ldr	r3, [pc, #612]	; (800292c <gc_execute_line+0x1124>)
 80026c6:	7a5c      	ldrb	r4, [r3, #9]
 80026c8:	2c10      	cmp	r4, #16
 80026ca:	f000 8183 	beq.w	80029d4 <gc_execute_line+0x11cc>
 80026ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026d0:	f003 0540 	and.w	r5, r3, #64	; 0x40
 80026d4:	e59d      	b.n	8002212 <gc_execute_line+0xa0a>
    coolant_sync(gc_block.modal.coolant);
 80026d6:	f7fe ffb1 	bl	800163c <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 80026da:	f898 3009 	ldrb.w	r3, [r8, #9]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 80ea 	bne.w	80028b8 <gc_execute_line+0x10b0>
 80026e4:	4a91      	ldr	r2, [pc, #580]	; (800292c <gc_execute_line+0x1124>)
 80026e6:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80026ea:	7213      	strb	r3, [r2, #8]
 80026ec:	e5cf      	b.n	800228e <gc_execute_line+0xa86>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 80026ee:	4649      	mov	r1, r9
 80026f0:	4620      	mov	r0, r4
 80026f2:	f004 f9c7 	bl	8006a84 <spindle_sync>
 80026f6:	4b8d      	ldr	r3, [pc, #564]	; (800292c <gc_execute_line+0x1124>)
 80026f8:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
 80026fc:	7a5c      	ldrb	r4, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80026fe:	f8c3 900c 	str.w	r9, [r3, #12]
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 8002702:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8002706:	e5a7      	b.n	8002258 <gc_execute_line+0xa50>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8002708:	2310      	movs	r3, #16
 800270a:	f7ff b906 	b.w	800191a <gc_execute_line+0x112>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 800270e:	4626      	mov	r6, r4
 8002710:	4625      	mov	r5, r4
 8002712:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002716:	e68d      	b.n	8002434 <gc_execute_line+0xc2c>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8002718:	9b06      	ldr	r3, [sp, #24]
 800271a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800271c:	2b00      	cmp	r3, #0
 800271e:	9b07      	ldr	r3, [sp, #28]
 8002720:	bf08      	it	eq
 8002722:	2300      	moveq	r3, #0
 8002724:	9307      	str	r3, [sp, #28]
 8002726:	f7ff bbe6 	b.w	8001ef6 <gc_execute_line+0x6ee>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800272a:	4613      	mov	r3, r2
 800272c:	07da      	lsls	r2, r3, #31
 800272e:	f140 810a 	bpl.w	8002946 <gc_execute_line+0x113e>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002732:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002736:	d00a      	beq.n	800274e <gc_execute_line+0xf46>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002738:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
 800273c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800273e:	f7fd ffa1 	bl	8000684 <__addsf3>
 8002742:	4b7a      	ldr	r3, [pc, #488]	; (800292c <gc_execute_line+0x1124>)
 8002744:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002746:	f7fd ff9d 	bl	8000684 <__addsf3>
 800274a:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800274e:	9b06      	ldr	r3, [sp, #24]
 8002750:	079b      	lsls	r3, r3, #30
 8002752:	f140 80f3 	bpl.w	800293c <gc_execute_line+0x1134>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002756:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 800275a:	d00a      	beq.n	8002772 <gc_execute_line+0xf6a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800275c:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 8002760:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002762:	f7fd ff8f 	bl	8000684 <__addsf3>
 8002766:	4b71      	ldr	r3, [pc, #452]	; (800292c <gc_execute_line+0x1124>)
 8002768:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800276a:	f7fd ff8b 	bl	8000684 <__addsf3>
 800276e:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002772:	9b06      	ldr	r3, [sp, #24]
 8002774:	0758      	lsls	r0, r3, #29
 8002776:	f140 8082 	bpl.w	800287e <gc_execute_line+0x1076>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 800277a:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 800277e:	d084      	beq.n	800268a <gc_execute_line+0xe82>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002780:	9914      	ldr	r1, [sp, #80]	; 0x50
 8002782:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8002786:	f7fd ff7d 	bl	8000684 <__addsf3>
 800278a:	4b68      	ldr	r3, [pc, #416]	; (800292c <gc_execute_line+0x1124>)
 800278c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800278e:	f7fd ff79 	bl	8000684 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8002792:	4b66      	ldr	r3, [pc, #408]	; (800292c <gc_execute_line+0x1124>)
 8002794:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002796:	f7fd ff75 	bl	8000684 <__addsf3>
 800279a:	f1b9 0f1e 	cmp.w	r9, #30
 800279e:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
      switch (gc_block.non_modal_command) {
 80027a2:	f47f ab98 	bne.w	8001ed6 <gc_execute_line+0x6ce>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80027a6:	2007      	movs	r0, #7
 80027a8:	4961      	ldr	r1, [pc, #388]	; (8002930 <gc_execute_line+0x1128>)
 80027aa:	f003 fe5d 	bl	8006468 <settings_read_coord_data>
 80027ae:	2800      	cmp	r0, #0
 80027b0:	f43f af60 	beq.w	8002674 <gc_execute_line+0xe6c>
          if (axis_words) {
 80027b4:	9b06      	ldr	r3, [sp, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d167      	bne.n	800288a <gc_execute_line+0x1082>
 80027ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80027bc:	930c      	str	r3, [sp, #48]	; 0x30
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 80027be:	9307      	str	r3, [sp, #28]
 80027c0:	f7ff bb99 	b.w	8001ef6 <gc_execute_line+0x6ee>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 80027c4:	f898 3006 	ldrb.w	r3, [r8, #6]
 80027c8:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80a4 	beq.w	8002918 <gc_execute_line+0x1110>
 80027d0:	f8d8 403c 	ldr.w	r4, [r8, #60]	; 0x3c
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 80027d4:	4b55      	ldr	r3, [pc, #340]	; (800292c <gc_execute_line+0x1124>)
 80027d6:	4621      	mov	r1, r4
 80027d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80027da:	f7fe f9ef 	bl	8000bbc <__aeabi_fcmpeq>
 80027de:	2800      	cmp	r0, #0
 80027e0:	f47f ad67 	bne.w	80022b2 <gc_execute_line+0xaaa>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 80027e4:	4b51      	ldr	r3, [pc, #324]	; (800292c <gc_execute_line+0x1124>)
 80027e6:	641c      	str	r4, [r3, #64]	; 0x40
      system_flag_wco_change();
 80027e8:	f005 fc3e 	bl	8008068 <system_flag_wco_change>
 80027ec:	e561      	b.n	80022b2 <gc_execute_line+0xaaa>
      switch (gc_block.modal.motion) {
 80027ee:	f109 0374 	add.w	r3, r9, #116	; 0x74
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	f63f ac9d 	bhi.w	8002134 <gc_execute_line+0x92c>
 80027fa:	f1a9 038c 	sub.w	r3, r9, #140	; 0x8c
 80027fe:	2b03      	cmp	r3, #3
 8002800:	f63f ac98 	bhi.w	8002134 <gc_execute_line+0x92c>
 8002804:	e8df f003 	tbb	[pc, r3]
 8002808:	02060206 	.word	0x02060206
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 800280c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002814:	f109 0372 	add.w	r3, r9, #114	; 0x72
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d803      	bhi.n	8002826 <gc_execute_line+0x101e>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 800281e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002826:	9b06      	ldr	r3, [sp, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f43f ae07 	beq.w	800243c <gc_execute_line+0xc34>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 800282e:	220c      	movs	r2, #12
 8002830:	4940      	ldr	r1, [pc, #256]	; (8002934 <gc_execute_line+0x112c>)
 8002832:	4841      	ldr	r0, [pc, #260]	; (8002938 <gc_execute_line+0x1130>)
 8002834:	f006 fef8 	bl	8009628 <memcmp>
 8002838:	2800      	cmp	r0, #0
 800283a:	f000 813d 	beq.w	8002ab8 <gc_execute_line+0x12b0>
 800283e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002840:	f003 0201 	and.w	r2, r3, #1
 8002844:	f7ff bb57 	b.w	8001ef6 <gc_execute_line+0x6ee>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002848:	f898 3007 	ldrb.w	r3, [r8, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	930c      	str	r3, [sp, #48]	; 0x30
 8002850:	e496      	b.n	8002180 <gc_execute_line+0x978>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002852:	4b36      	ldr	r3, [pc, #216]	; (800292c <gc_execute_line+0x1124>)
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002854:	0792      	lsls	r2, r2, #30
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800285c:	d578      	bpl.n	8002950 <gc_execute_line+0x1148>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 800285e:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002862:	f43f af0e 	beq.w	8002682 <gc_execute_line+0xe7a>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <gc_execute_line+0x1124>)
 8002868:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 800286c:	6a18      	ldr	r0, [r3, #32]
 800286e:	f7fd ff09 	bl	8000684 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002872:	9b06      	ldr	r3, [sp, #24]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002874:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002878:	0759      	lsls	r1, r3, #29
 800287a:	f53f ab1c 	bmi.w	8001eb6 <gc_execute_line+0x6ae>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <gc_execute_line+0x1124>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 8002886:	f7ff bb1e 	b.w	8001ec6 <gc_execute_line+0x6be>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 800288a:	07d9      	lsls	r1, r3, #31
 800288c:	d403      	bmi.n	8002896 <gc_execute_line+0x108e>
 800288e:	4b27      	ldr	r3, [pc, #156]	; (800292c <gc_execute_line+0x1124>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f8c8 3010 	str.w	r3, [r8, #16]
 8002896:	9b06      	ldr	r3, [sp, #24]
 8002898:	079a      	lsls	r2, r3, #30
 800289a:	d403      	bmi.n	80028a4 <gc_execute_line+0x109c>
 800289c:	4b23      	ldr	r3, [pc, #140]	; (800292c <gc_execute_line+0x1124>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f8c8 3014 	str.w	r3, [r8, #20]
 80028a4:	9b06      	ldr	r3, [sp, #24]
 80028a6:	075b      	lsls	r3, r3, #29
 80028a8:	d403      	bmi.n	80028b2 <gc_execute_line+0x10aa>
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <gc_execute_line+0x1124>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	f8c8 3018 	str.w	r3, [r8, #24]
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80028b2:	2300      	movs	r3, #0
 80028b4:	930c      	str	r3, [sp, #48]	; 0x30
 80028b6:	e433      	b.n	8002120 <gc_execute_line+0x918>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 80028b8:	491c      	ldr	r1, [pc, #112]	; (800292c <gc_execute_line+0x1124>)
 80028ba:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80028be:	7a0c      	ldrb	r4, [r1, #8]
 80028c0:	431c      	orrs	r4, r3
 80028c2:	720c      	strb	r4, [r1, #8]
 80028c4:	4314      	orrs	r4, r2
 80028c6:	e4e2      	b.n	800228e <gc_execute_line+0xa86>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f000 8127 	beq.w	8002b1c <gc_execute_line+0x1314>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8117 	beq.w	8002b02 <gc_execute_line+0x12fa>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 80028d4:	3b02      	subs	r3, #2
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f240 80fd 	bls.w	8002ad6 <gc_execute_line+0x12ce>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80028dc:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 80028e0:	4d14      	ldr	r5, [pc, #80]	; (8002934 <gc_execute_line+0x112c>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80028e2:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 80028e6:	4628      	mov	r0, r5
 80028e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ea:	a915      	add	r1, sp, #84	; 0x54
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80028ec:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 80028f0:	f000 ff12 	bl	8003718 <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 80028f4:	2800      	cmp	r0, #0
 80028f6:	f040 80e6 	bne.w	8002ac6 <gc_execute_line+0x12be>
 80028fa:	4c0f      	ldr	r4, [pc, #60]	; (8002938 <gc_execute_line+0x1130>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 80028fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002904:	e526      	b.n	8002354 <gc_execute_line+0xb4c>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002906:	231f      	movs	r3, #31
 8002908:	f7ff b807 	b.w	800191a <gc_execute_line+0x112>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 800290c:	231e      	movs	r3, #30
 800290e:	f7ff b804 	b.w	800191a <gc_execute_line+0x112>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002912:	2326      	movs	r3, #38	; 0x26
 8002914:	f7ff b801 	b.w	800191a <gc_execute_line+0x112>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002918:	2300      	movs	r3, #0
 800291a:	461c      	mov	r4, r3
 800291c:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 8002920:	e758      	b.n	80027d4 <gc_execute_line+0xfcc>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002922:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 8002926:	f000 fec3 	bl	80036b0 <mc_dwell>
 800292a:	e4b7      	b.n	800229c <gc_execute_line+0xa94>
 800292c:	2000128c 	.word	0x2000128c
 8002930:	200012e0 	.word	0x200012e0
 8002934:	20001304 	.word	0x20001304
 8002938:	200012a8 	.word	0x200012a8
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800293c:	4b8e      	ldr	r3, [pc, #568]	; (8002b78 <gc_execute_line+0x1370>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8002944:	e715      	b.n	8002772 <gc_execute_line+0xf6a>
 8002946:	4b8c      	ldr	r3, [pc, #560]	; (8002b78 <gc_execute_line+0x1370>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 800294e:	e6fe      	b.n	800274e <gc_execute_line+0xf46>
 8002950:	4b89      	ldr	r3, [pc, #548]	; (8002b78 <gc_execute_line+0x1370>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002958:	9b06      	ldr	r3, [sp, #24]
 800295a:	0758      	lsls	r0, r3, #29
 800295c:	d58f      	bpl.n	800287e <gc_execute_line+0x1076>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 800295e:	f1b9 0f35 	cmp.w	r9, #53	; 0x35
 8002962:	f47f aaa8 	bne.w	8001eb6 <gc_execute_line+0x6ae>
 8002966:	e690      	b.n	800268a <gc_execute_line+0xe82>
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002968:	07db      	lsls	r3, r3, #31
 800296a:	d50c      	bpl.n	8002986 <gc_execute_line+0x117e>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 800296c:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <gc_execute_line+0x1370>)
 800296e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 8002972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002974:	f7fd fe86 	bl	8000684 <__addsf3>
 8002978:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <gc_execute_line+0x1370>)
 800297a:	4601      	mov	r1, r0
 800297c:	69d8      	ldr	r0, [r3, #28]
 800297e:	f7fd fe7f 	bl	8000680 <__aeabi_fsub>
 8002982:	f8c8 0010 	str.w	r0, [r8, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002986:	9b06      	ldr	r3, [sp, #24]
 8002988:	0798      	lsls	r0, r3, #30
 800298a:	d50c      	bpl.n	80029a6 <gc_execute_line+0x119e>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 800298c:	4b7a      	ldr	r3, [pc, #488]	; (8002b78 <gc_execute_line+0x1370>)
 800298e:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8002992:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002994:	f7fd fe76 	bl	8000684 <__addsf3>
 8002998:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <gc_execute_line+0x1370>)
 800299a:	4601      	mov	r1, r0
 800299c:	6a18      	ldr	r0, [r3, #32]
 800299e:	f7fd fe6f 	bl	8000680 <__aeabi_fsub>
 80029a2:	f8c8 0014 	str.w	r0, [r8, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 80029a6:	9b06      	ldr	r3, [sp, #24]
 80029a8:	0759      	lsls	r1, r3, #29
 80029aa:	f57f abb9 	bpl.w	8002120 <gc_execute_line+0x918>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 80029ae:	4b72      	ldr	r3, [pc, #456]	; (8002b78 <gc_execute_line+0x1370>)
 80029b0:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 80029b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80029b6:	f7fd fe65 	bl	8000684 <__addsf3>
 80029ba:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <gc_execute_line+0x1370>)
 80029bc:	4601      	mov	r1, r0
 80029be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80029c0:	f7fd fe5e 	bl	8000680 <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 80029c4:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <gc_execute_line+0x1370>)
 80029c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029c8:	f7fd fe5a 	bl	8000680 <__aeabi_fsub>
 80029cc:	f8c8 0018 	str.w	r0, [r8, #24]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 80029d0:	f7ff bba6 	b.w	8002120 <gc_execute_line+0x918>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <gc_execute_line+0x1370>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 80029d8:	3b01      	subs	r3, #1
 80029da:	2b02      	cmp	r3, #2
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80029dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029de:	f003 0540 	and.w	r5, r3, #64	; 0x40
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 80029e2:	d86c      	bhi.n	8002abe <gc_execute_line+0x12b6>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80029e4:	0658      	lsls	r0, r3, #25
 80029e6:	f57f ac14 	bpl.w	8002212 <gc_execute_line+0xa0a>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 80029ea:	f043 0320 	orr.w	r3, r3, #32
 80029ee:	9309      	str	r3, [sp, #36]	; 0x24
 80029f0:	f003 0540 	and.w	r5, r3, #64	; 0x40
 80029f4:	e40d      	b.n	8002212 <gc_execute_line+0xa0a>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 80029f6:	4b61      	ldr	r3, [pc, #388]	; (8002b7c <gc_execute_line+0x1374>)
 80029f8:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <gc_execute_line+0x1378>)
 80029fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80029fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      system_flag_wco_change();
 8002a00:	f005 fb32 	bl	8008068 <system_flag_wco_change>
      break;
 8002a04:	e49c      	b.n	8002340 <gc_execute_line+0xb38>
      if (sys.state != STATE_CHECK_MODE) {
 8002a06:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <gc_execute_line+0x137c>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	f43f acd5 	beq.w	80023ba <gc_execute_line+0xbb2>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002a10:	2008      	movs	r0, #8
 8002a12:	f005 fb7d 	bl	8008110 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002a16:	f002 fb91 	bl	800513c <protocol_execute_realtime>
 8002a1a:	e4ce      	b.n	80023ba <gc_execute_line+0xbb2>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a22:	9309      	str	r3, [sp, #36]	; 0x24
 8002a24:	f003 0540 	and.w	r5, r3, #64	; 0x40
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <gc_execute_line+0x1370>)
 8002a2a:	7a5c      	ldrb	r4, [r3, #9]
 8002a2c:	f7ff bbf1 	b.w	8002212 <gc_execute_line+0xa0a>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002a30:	9a08      	ldr	r2, [sp, #32]
 8002a32:	423a      	tst	r2, r7
 8002a34:	f000 809c 	beq.w	8002b70 <gc_execute_line+0x1368>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002a38:	f898 2003 	ldrb.w	r2, [r8, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002a3c:	f025 050e 	bic.w	r5, r5, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002a40:	2a01      	cmp	r2, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002a42:	b2ad      	uxth	r5, r5
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002a44:	d07c      	beq.n	8002b40 <gc_execute_line+0x1338>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002a46:	3402      	adds	r4, #2
 8002a48:	eb08 0784 	add.w	r7, r8, r4, lsl #2
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4648      	mov	r0, r9
 8002a50:	f7fd fe16 	bl	8000680 <__aeabi_fsub>
 8002a54:	4681      	mov	r9, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8002a56:	f10b 0402 	add.w	r4, fp, #2
 8002a5a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8002a5e:	68a1      	ldr	r1, [r4, #8]
 8002a60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a62:	f7fd fe0d 	bl	8000680 <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8002a66:	4649      	mov	r1, r9
 8002a68:	f000 ffca 	bl	8003a00 <hypot_f>
 8002a6c:	4603      	mov	r3, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	68a0      	ldr	r0, [r4, #8]
            float target_r = hypot_f(x,y);
 8002a72:	461c      	mov	r4, r3
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002a74:	f000 ffc4 	bl	8003a00 <hypot_f>
 8002a78:	4607      	mov	r7, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4639      	mov	r1, r7
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002a7e:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002a82:	f7fd fdfd 	bl	8000680 <__aeabi_fsub>
 8002a86:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	493e      	ldr	r1, [pc, #248]	; (8002b88 <gc_execute_line+0x1380>)
 8002a8e:	f7fe f8bd 	bl	8000c0c <__aeabi_fcmpgt>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	f43f aed3 	beq.w	800283e <gc_execute_line+0x1036>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8002a98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe f8b5 	bl	8000c0c <__aeabi_fcmpgt>
 8002aa2:	b948      	cbnz	r0, 8002ab8 <gc_execute_line+0x12b0>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8002aa4:	4939      	ldr	r1, [pc, #228]	; (8002b8c <gc_execute_line+0x1384>)
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	f7fd fef4 	bl	8000894 <__aeabi_fmul>
 8002aac:	4621      	mov	r1, r4
 8002aae:	f7fe f88f 	bl	8000bd0 <__aeabi_fcmplt>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	f43f aec3 	beq.w	800283e <gc_execute_line+0x1036>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002ab8:	2321      	movs	r3, #33	; 0x21
 8002aba:	f7fe bf2e 	b.w	800191a <gc_execute_line+0x112>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002abe:	0659      	lsls	r1, r3, #25
 8002ac0:	f53f aba7 	bmi.w	8002212 <gc_execute_line+0xa0a>
 8002ac4:	e791      	b.n	80029ea <gc_execute_line+0x11e2>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8002ac6:	2801      	cmp	r0, #1
 8002ac8:	f47f ac44 	bne.w	8002354 <gc_execute_line+0xb4c>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8002acc:	4930      	ldr	r1, [pc, #192]	; (8002b90 <gc_execute_line+0x1388>)
 8002ace:	4831      	ldr	r0, [pc, #196]	; (8002b94 <gc_execute_line+0x138c>)
 8002ad0:	f005 fad4 	bl	800807c <system_convert_array_steps_to_mpos>
}
 8002ad4:	e43e      	b.n	8002354 <gc_execute_line+0xb4c>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8002ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ad8:	4d29      	ldr	r5, [pc, #164]	; (8002b80 <gc_execute_line+0x1378>)
 8002ada:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ade:	9304      	str	r3, [sp, #16]
 8002ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ae2:	4c2c      	ldr	r4, [pc, #176]	; (8002b94 <gc_execute_line+0x138c>)
 8002ae4:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 8002ae8:	9303      	str	r3, [sp, #12]
 8002aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aec:	4622      	mov	r2, r4
 8002aee:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002af2:	4628      	mov	r0, r5
 8002af4:	a915      	add	r1, sp, #84	; 0x54
 8002af6:	f1a5 0324 	sub.w	r3, r5, #36	; 0x24
 8002afa:	9600      	str	r6, [sp, #0]
 8002afc:	f000 fc2c 	bl	8003358 <mc_arc>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002b00:	e6fc      	b.n	80028fc <gc_execute_line+0x10f4>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b02:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        mc_line(gc_block.values.xyz, pl_data);
 8002b06:	4d1e      	ldr	r5, [pc, #120]	; (8002b80 <gc_execute_line+0x1378>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b08:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	a915      	add	r1, sp, #84	; 0x54
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002b10:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        mc_line(gc_block.values.xyz, pl_data);
 8002b14:	4c1f      	ldr	r4, [pc, #124]	; (8002b94 <gc_execute_line+0x138c>)
 8002b16:	f000 fbeb 	bl	80032f0 <mc_line>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002b1a:	e6ef      	b.n	80028fc <gc_execute_line+0x10f4>
        mc_line(gc_block.values.xyz, pl_data);
 8002b1c:	4d18      	ldr	r5, [pc, #96]	; (8002b80 <gc_execute_line+0x1378>)
 8002b1e:	a915      	add	r1, sp, #84	; 0x54
 8002b20:	4628      	mov	r0, r5
 8002b22:	f000 fbe5 	bl	80032f0 <mc_line>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002b26:	4c1b      	ldr	r4, [pc, #108]	; (8002b94 <gc_execute_line+0x138c>)
 8002b28:	e6e8      	b.n	80028fc <gc_execute_line+0x10f4>
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002b2a:	4815      	ldr	r0, [pc, #84]	; (8002b80 <gc_execute_line+0x1378>)
 8002b2c:	a915      	add	r1, sp, #84	; 0x54
 8002b2e:	f000 fbdf 	bl	80032f0 <mc_line>
 8002b32:	e45b      	b.n	80023ec <gc_execute_line+0xbe4>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002b34:	2322      	movs	r3, #34	; 0x22
 8002b36:	f7fe bef0 	b.w	800191a <gc_execute_line+0x112>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	f7fe beed 	b.w	800191a <gc_execute_line+0x112>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002b40:	461f      	mov	r7, r3
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <gc_execute_line+0x1390>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8002b44:	940e      	str	r4, [sp, #56]	; 0x38
 8002b46:	461c      	mov	r4, r3
 8002b48:	4914      	ldr	r1, [pc, #80]	; (8002b9c <gc_execute_line+0x1394>)
 8002b4a:	9b08      	ldr	r3, [sp, #32]
 8002b4c:	413b      	asrs	r3, r7
 8002b4e:	f013 0f01 	tst.w	r3, #1
 8002b52:	f107 0701 	add.w	r7, r7, #1
 8002b56:	d005      	beq.n	8002b64 <gc_execute_line+0x135c>
 8002b58:	6920      	ldr	r0, [r4, #16]
 8002b5a:	910f      	str	r1, [sp, #60]	; 0x3c
 8002b5c:	f7fd fe9a 	bl	8000894 <__aeabi_fmul>
 8002b60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002b62:	6120      	str	r0, [r4, #16]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8002b64:	2f03      	cmp	r7, #3
 8002b66:	f104 0404 	add.w	r4, r4, #4
 8002b6a:	d1ee      	bne.n	8002b4a <gc_execute_line+0x1342>
 8002b6c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002b6e:	e76a      	b.n	8002a46 <gc_execute_line+0x123e>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002b70:	2323      	movs	r3, #35	; 0x23
 8002b72:	f7fe bed2 	b.w	800191a <gc_execute_line+0x112>
 8002b76:	bf00      	nop
 8002b78:	2000128c 	.word	0x2000128c
 8002b7c:	200012c0 	.word	0x200012c0
 8002b80:	20001304 	.word	0x20001304
 8002b84:	20001314 	.word	0x20001314
 8002b88:	3ba3d70a 	.word	0x3ba3d70a
 8002b8c:	3a83126f 	.word	0x3a83126f
 8002b90:	20001338 	.word	0x20001338
 8002b94:	200012a8 	.word	0x200012a8
 8002b98:	200012d0 	.word	0x200012d0
 8002b9c:	41cb3333 	.word	0x41cb3333

08002ba0 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	460b      	mov	r3, r1
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002ba6:	7a02      	ldrb	r2, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8002ba8:	68c8      	ldr	r0, [r1, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002baa:	f042 0204 	orr.w	r2, r2, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002bae:	4913      	ldr	r1, [pc, #76]	; (8002bfc <jog_execute+0x5c>)
  pl_data->feed_rate = gc_block->values.f;
 8002bb0:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002bb2:	722a      	strb	r2, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002bb4:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002bb8:	f103 0434 	add.w	r4, r3, #52	; 0x34
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8002bbc:	0693      	lsls	r3, r2, #26
 8002bbe:	d503      	bpl.n	8002bc8 <jog_execute+0x28>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f005 fa79 	bl	80080b8 <system_check_travel_limits>
 8002bc6:	b9a8      	cbnz	r0, 8002bf4 <jog_execute+0x54>
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz, pl_data);
  if (sys.state == STATE_IDLE) {
 8002bc8:	4e0d      	ldr	r6, [pc, #52]	; (8002c00 <jog_execute+0x60>)
  mc_line(gc_block->values.xyz, pl_data);
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f000 fb8f 	bl	80032f0 <mc_line>
  if (sys.state == STATE_IDLE) {
 8002bd2:	7834      	ldrb	r4, [r6, #0]
 8002bd4:	b114      	cbz	r4, 8002bdc <jog_execute+0x3c>
      st_prep_buffer();
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
 8002bd6:	2400      	movs	r4, #0
}
 8002bd8:	4620      	mov	r0, r4
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8002bdc:	f001 f8f8 	bl	8003dd0 <plan_get_current_block>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d0f8      	beq.n	8002bd6 <jog_execute+0x36>
      sys.state = STATE_JOG;
 8002be4:	2320      	movs	r3, #32
 8002be6:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 8002be8:	f004 fb04 	bl	80071f4 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8002bec:	f004 f802 	bl	8006bf4 <st_wake_up>
}
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8002bf4:	240f      	movs	r4, #15
}
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200014c8 	.word	0x200014c8
 8002c00:	20001314 	.word	0x20001314

08002c04 <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8002c04:	b510      	push	{r4, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002c06:	2101      	movs	r1, #1
{
 8002c08:	b084      	sub	sp, #16
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8002c0a:	2009      	movs	r0, #9
 8002c0c:	f7fe fbb8 	bl	8001380 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002c10:	4c1e      	ldr	r4, [pc, #120]	; (8002c8c <limits_init+0x88>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002c12:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <limits_init+0x8c>)
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002c14:	4669      	mov	r1, sp
 8002c16:	481f      	ldr	r0, [pc, #124]	; (8002c94 <limits_init+0x90>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8002c18:	9300      	str	r3, [sp, #0]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8002c1a:	f7fe f9c5 	bl	8000fa8 <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8002c1e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002c22:	071b      	lsls	r3, r3, #28
 8002c24:	d406      	bmi.n	8002c34 <limits_init+0x30>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8002c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <limits_init+0x94>)
 8002c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8002c30:	b004      	add	sp, #16
 8002c32:	bd10      	pop	{r4, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 8002c34:	2064      	movs	r0, #100	; 0x64
 8002c36:	f000 fed3 	bl	80039e0 <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8002c3a:	210c      	movs	r1, #12
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7fe fb81 	bl	8001344 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8002c42:	210d      	movs	r1, #13
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7fe fb7d 	bl	8001344 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8002c4a:	210e      	movs	r1, #14
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f7fe fb79 	bl	8001344 <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8002c52:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8002c56:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8002c5a:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8002c5e:	bf14      	ite	ne
 8002c60:	2408      	movne	r4, #8
 8002c62:	240c      	moveq	r4, #12
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8002c64:	2200      	movs	r2, #0
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002c66:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 8002c68:	a802      	add	r0, sp, #8
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8002c6a:	9102      	str	r1, [sp, #8]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8002c6c:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002c70:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_Init(&EXTI_InitStructure);
 8002c74:	f88d 400d 	strb.w	r4, [sp, #13]
 8002c78:	f7fe f86a 	bl	8000d50 <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <limits_init+0x98>)
		NVIC_Init(&NVIC_InitStructure);
 8002c7e:	a801      	add	r0, sp, #4
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8002c80:	9301      	str	r3, [sp, #4]
		NVIC_Init(&NVIC_InitStructure);
 8002c82:	f7fe f833 	bl	8000cec <NVIC_Init>
}
 8002c86:	b004      	add	sp, #16
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200014c8 	.word	0x200014c8
 8002c90:	48037000 	.word	0x48037000
 8002c94:	40010c00 	.word	0x40010c00
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	01020228 	.word	0x01020228

08002ca0 <limits_disable>:
 8002ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca4:	4b01      	ldr	r3, [pc, #4]	; (8002cac <limits_disable+0xc>)
 8002ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PCICR &= ~(1 << LIMIT_INT);  // Disable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  NVIC_DisableIRQ(EXTI15_10_IRQn);
#endif
}
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8002cb0:	b508      	push	{r3, lr}
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8002cb2:	4810      	ldr	r0, [pc, #64]	; (8002cf4 <limits_get_state+0x44>)
 8002cb4:	f7fe fafe 	bl	80012b4 <GPIO_ReadInputData>
 8002cb8:	4603      	mov	r3, r0
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8002cba:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <limits_get_state+0x48>)
 8002cbc:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8002cc0:	0652      	lsls	r2, r2, #25
 8002cc2:	bf5c      	itt	pl
 8002cc4:	f480 43e0 	eorpl.w	r3, r0, #28672	; 0x7000
 8002cc8:	b29b      	uxthpl	r3, r3
  if (pin) {
 8002cca:	b18b      	cbz	r3, 8002cf0 <limits_get_state+0x40>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <limits_get_state+0x4c>)
 8002cce:	8810      	ldrh	r0, [r2, #0]
 8002cd0:	8851      	ldrh	r1, [r2, #2]
 8002cd2:	4203      	tst	r3, r0
  uint8_t limit_state = 0;
 8002cd4:	bf18      	it	ne
 8002cd6:	2001      	movne	r0, #1
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002cd8:	8892      	ldrh	r2, [r2, #4]
  uint8_t limit_state = 0;
 8002cda:	bf08      	it	eq
 8002cdc:	2000      	moveq	r0, #0
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002cde:	420b      	tst	r3, r1
 8002ce0:	bf18      	it	ne
 8002ce2:	f040 0002 	orrne.w	r0, r0, #2
 8002ce6:	4213      	tst	r3, r2
 8002ce8:	d001      	beq.n	8002cee <limits_get_state+0x3e>
 8002cea:	f040 0004 	orr.w	r0, r0, #4
    }
  }
#endif
  return(limit_state);
}
 8002cee:	bd08      	pop	{r3, pc}
  uint8_t limit_state = 0;
 8002cf0:	4618      	mov	r0, r3
}
 8002cf2:	bd08      	pop	{r3, pc}
 8002cf4:	40010c00 	.word	0x40010c00
 8002cf8:	200014c8 	.word	0x200014c8
 8002cfc:	0800aa58 	.word	0x0800aa58

08002d00 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8002d00:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8002d02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d06:	f7fe f863 	bl	8000dd0 <EXTI_GetITStatus>
 8002d0a:	bb38      	cbnz	r0, 8002d5c <EXTI15_10_IRQHandler+0x5c>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 8002d0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d10:	f7fe f85e 	bl	8000dd0 <EXTI_GetITStatus>
 8002d14:	b9e8      	cbnz	r0, 8002d52 <EXTI15_10_IRQHandler+0x52>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 8002d16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d1a:	f7fe f859 	bl	8000dd0 <EXTI_GetITStatus>
 8002d1e:	b998      	cbnz	r0, 8002d48 <EXTI15_10_IRQHandler+0x48>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8002d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d24:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <EXTI15_10_IRQHandler+0x68>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <EXTI15_10_IRQHandler+0x6c>)
 8002d28:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d002      	beq.n	8002d38 <EXTI15_10_IRQHandler+0x38>
    if (!(sys_rt_exec_alarm)) {
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <EXTI15_10_IRQHandler+0x70>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b103      	cbz	r3, 8002d3a <EXTI15_10_IRQHandler+0x3a>
      mc_reset(); // Initiate system kill.
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 8002d38:	bd08      	pop	{r3, pc}
      mc_reset(); // Initiate system kill.
 8002d3a:	f000 fd55 	bl	80037e8 <mc_reset>
}
 8002d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8002d42:	2001      	movs	r0, #1
 8002d44:	f005 b9f8 	b.w	8008138 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 8002d48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d4c:	f7fe f84e 	bl	8000dec <EXTI_ClearITPendingBit>
 8002d50:	e7e6      	b.n	8002d20 <EXTI15_10_IRQHandler+0x20>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 8002d52:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d56:	f7fe f849 	bl	8000dec <EXTI_ClearITPendingBit>
 8002d5a:	e7dc      	b.n	8002d16 <EXTI15_10_IRQHandler+0x16>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8002d5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d60:	f7fe f844 	bl	8000dec <EXTI_ClearITPendingBit>
 8002d64:	e7d2      	b.n	8002d0c <EXTI15_10_IRQHandler+0xc>
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100
 8002d6c:	20001314 	.word	0x20001314
 8002d70:	20001344 	.word	0x20001344

08002d74 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8002d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002d78:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 800303c <limits_go_home+0x2c8>
{
 8002d7c:	b08f      	sub	sp, #60	; 0x3c
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002d7e:	f898 3001 	ldrb.w	r3, [r8, #1]
{
 8002d82:	9004      	str	r0, [sp, #16]
  if (sys.abort) { return; } // Block if system reset has been issued.
 8002d84:	b113      	cbz	r3, 8002d8c <limits_go_home+0x18>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8002d86:	b00f      	add	sp, #60	; 0x3c
 8002d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memset(pl_data,0,sizeof(plan_line_data_t));
 8002d8c:	4604      	mov	r4, r0
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8002d8e:	2106      	movs	r1, #6
 8002d90:	4aa1      	ldr	r2, [pc, #644]	; (8003018 <limits_go_home+0x2a4>)
  memset(pl_data,0,sizeof(plan_line_data_t));
 8002d92:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8002d96:	6810      	ldr	r0, [r2, #0]
 8002d98:	8892      	ldrh	r2, [r2, #4]
 8002d9a:	9308      	str	r3, [sp, #32]
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002d9c:	f014 0301 	ands.w	r3, r4, #1
 8002da0:	9006      	str	r0, [sp, #24]
 8002da2:	f8ad 201c 	strh.w	r2, [sp, #28]
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8002da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002daa:	f004 0901 	and.w	r9, r4, #1
 8002dae:	9305      	str	r3, [sp, #20]
 8002db0:	f000 8199 	beq.w	80030e6 <limits_go_home+0x372>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002db4:	4f99      	ldr	r7, [pc, #612]	; (800301c <limits_go_home+0x2a8>)
 8002db6:	499a      	ldr	r1, [pc, #616]	; (8003020 <limits_go_home+0x2ac>)
 8002db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dba:	f7fd fd6b 	bl	8000894 <__aeabi_fmul>
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4682      	mov	sl, r0
 8002dc2:	f7fd ff19 	bl	8000bf8 <__aeabi_fcmpge>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	f000 8195 	beq.w	80030f6 <limits_go_home+0x382>
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002dcc:	9b04      	ldr	r3, [sp, #16]
 8002dce:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002dd2:	0798      	lsls	r0, r3, #30
 8002dd4:	9202      	str	r2, [sp, #8]
 8002dd6:	d50b      	bpl.n	8002df0 <limits_go_home+0x7c>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002dd8:	4991      	ldr	r1, [pc, #580]	; (8003020 <limits_go_home+0x2ac>)
 8002dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ddc:	f7fd fd5a 	bl	8000894 <__aeabi_fmul>
 8002de0:	4604      	mov	r4, r0
 8002de2:	4650      	mov	r0, sl
 8002de4:	4621      	mov	r1, r4
 8002de6:	f7fd ff07 	bl	8000bf8 <__aeabi_fcmpge>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	f000 8181 	beq.w	80030f2 <limits_go_home+0x37e>
    if (bit_istrue(cycle_mask,bit(idx))) {
 8002df0:	9b04      	ldr	r3, [sp, #16]
 8002df2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8002df6:	0759      	lsls	r1, r3, #29
 8002df8:	9203      	str	r2, [sp, #12]
 8002dfa:	d50b      	bpl.n	8002e14 <limits_go_home+0xa0>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8002dfc:	4988      	ldr	r1, [pc, #544]	; (8003020 <limits_go_home+0x2ac>)
 8002dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e00:	f7fd fd48 	bl	8000894 <__aeabi_fmul>
 8002e04:	4604      	mov	r4, r0
 8002e06:	4650      	mov	r0, sl
 8002e08:	4621      	mov	r1, r4
 8002e0a:	f7fd fef5 	bl	8000bf8 <__aeabi_fcmpge>
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	f000 816d 	beq.w	80030ee <limits_go_home+0x37a>
  float homing_rate = settings.homing_seek_rate;
 8002e14:	2204      	movs	r2, #4
 8002e16:	f8d7 b050 	ldr.w	fp, [r7, #80]	; 0x50
 8002e1a:	fa5f f989 	uxtb.w	r9, r9
 8002e1e:	4653      	mov	r3, sl
  bool approach = true;
 8002e20:	2501      	movs	r5, #1
 8002e22:	46da      	mov	sl, fp
 8002e24:	46cb      	mov	fp, r9
 8002e26:	4691      	mov	r9, r2
 8002e28:	4e7e      	ldr	r6, [pc, #504]	; (8003024 <limits_go_home+0x2b0>)
    system_convert_array_steps_to_mpos(target,sys_position);
 8002e2a:	497f      	ldr	r1, [pc, #508]	; (8003028 <limits_go_home+0x2b4>)
 8002e2c:	a80b      	add	r0, sp, #44	; 0x2c
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	f005 f924 	bl	800807c <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002e34:	9b01      	ldr	r3, [sp, #4]
 8002e36:	f1bb 0f00 	cmp.w	fp, #0
 8002e3a:	f000 80e9 	beq.w	8003010 <limits_go_home+0x29c>
          sys_position[idx] = 0;
 8002e3e:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e40:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
          sys_position[idx] = 0;
 8002e44:	4878      	ldr	r0, [pc, #480]	; (8003028 <limits_go_home+0x2b4>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e46:	07d2      	lsls	r2, r2, #31
          sys_position[idx] = 0;
 8002e48:	6001      	str	r1, [r0, #0]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e4a:	f140 813a 	bpl.w	80030c2 <limits_go_home+0x34e>
          if (approach) { target[idx] = -max_travel; }
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	f040 813a 	bne.w	80030c8 <limits_go_home+0x354>
          else { target[idx] = max_travel; }
 8002e54:	930b      	str	r3, [sp, #44]	; 0x2c
        n_active_axis++;
 8002e56:	4658      	mov	r0, fp
        axislock |= step_pin[idx];
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002e5e:	9902      	ldr	r1, [sp, #8]
 8002e60:	b181      	cbz	r1, 8002e84 <limits_go_home+0x110>
          sys_position[idx] = 0;
 8002e62:	2000      	movs	r0, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e64:	f8b7 c04a 	ldrh.w	ip, [r7, #74]	; 0x4a
          sys_position[idx] = 0;
 8002e68:	496f      	ldr	r1, [pc, #444]	; (8003028 <limits_go_home+0x2b4>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e6a:	f01c 0f02 	tst.w	ip, #2
          sys_position[idx] = 0;
 8002e6e:	6048      	str	r0, [r1, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e70:	f000 812e 	beq.w	80030d0 <limits_go_home+0x35c>
          if (approach) { target[idx] = -max_travel; }
 8002e74:	2d00      	cmp	r5, #0
 8002e76:	f040 812e 	bne.w	80030d6 <limits_go_home+0x362>
          else { target[idx] = max_travel; }
 8002e7a:	930c      	str	r3, [sp, #48]	; 0x30
        n_active_axis++;
 8002e7c:	4610      	mov	r0, r2
        axislock |= step_pin[idx];
 8002e7e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8002e82:	430c      	orrs	r4, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 8002e84:	9a03      	ldr	r2, [sp, #12]
 8002e86:	b18a      	cbz	r2, 8002eac <limits_go_home+0x138>
          sys_position[idx] = 0;
 8002e88:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e8a:	f8b7 c04a 	ldrh.w	ip, [r7, #74]	; 0x4a
          sys_position[idx] = 0;
 8002e8e:	4a66      	ldr	r2, [pc, #408]	; (8003028 <limits_go_home+0x2b4>)
        n_active_axis++;
 8002e90:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e92:	f01c 0f04 	tst.w	ip, #4
        n_active_axis++;
 8002e96:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 8002e98:	6091      	str	r1, [r2, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8002e9a:	f040 810e 	bne.w	80030ba <limits_go_home+0x346>
          if (approach) { target[idx] = max_travel; }
 8002e9e:	b90d      	cbnz	r5, 8002ea4 <limits_go_home+0x130>
          if (approach) { target[idx] = -max_travel; }
 8002ea0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002ea4:	930d      	str	r3, [sp, #52]	; 0x34
        axislock |= step_pin[idx];
 8002ea6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002eaa:	431c      	orrs	r4, r3
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8002eac:	f7fd fc9a 	bl	80007e4 <__aeabi_ui2f>
 8002eb0:	f006 fd50 	bl	8009954 <sqrtf>
 8002eb4:	4651      	mov	r1, sl
    sys.homing_axis_lock = axislock;
 8002eb6:	f8a8 4006 	strh.w	r4, [r8, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8002eba:	f7fd fceb 	bl	8000894 <__aeabi_fmul>
 8002ebe:	4603      	mov	r3, r0
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8002ec0:	a908      	add	r1, sp, #32
 8002ec2:	a80b      	add	r0, sp, #44	; 0x2c
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8002ec4:	9308      	str	r3, [sp, #32]
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8002ec6:	f001 f877 	bl	8003fb8 <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8002eca:	2304      	movs	r3, #4
 8002ecc:	f888 3004 	strb.w	r3, [r8, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8002ed0:	f004 f990 	bl	80071f4 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8002ed4:	f003 fe8e 	bl	8006bf4 <st_wake_up>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8002ed8:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8003038 <limits_go_home+0x2c4>
      if (approach) {
 8002edc:	bb15      	cbnz	r5, 8002f24 <limits_go_home+0x1b0>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8002ede:	f004 f989 	bl	80071f4 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8002ee2:	7833      	ldrb	r3, [r6, #0]
 8002ee4:	f013 0f34 	tst.w	r3, #52	; 0x34
 8002ee8:	d155      	bne.n	8002f96 <limits_go_home+0x222>
    } while (STEP_MASK & axislock);
 8002eea:	0763      	lsls	r3, r4, #29
 8002eec:	d1f6      	bne.n	8002edc <limits_go_home+0x168>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8002eee:	f004 f85b 	bl	8006fa8 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8002ef2:	f8b7 0054 	ldrh.w	r0, [r7, #84]	; 0x54
 8002ef6:	f000 fd73 	bl	80039e0 <delay_ms>
    approach = !approach;
 8002efa:	f085 0401 	eor.w	r4, r5, #1
    if (approach) {
 8002efe:	2d00      	cmp	r5, #0
 8002f00:	f040 809e 	bne.w	8003040 <limits_go_home+0x2cc>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8002f04:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 8002f06:	4949      	ldr	r1, [pc, #292]	; (800302c <limits_go_home+0x2b8>)
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f7fd fcc3 	bl	8000894 <__aeabi_fmul>
 8002f0e:	f109 39ff 	add.w	r9, r9, #4294967295
  } while (n_cycle-- > 0);
 8002f12:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8002f16:	4603      	mov	r3, r0
      homing_rate = settings.homing_feed_rate;
 8002f18:	f8d7 a04c 	ldr.w	sl, [r7, #76]	; 0x4c
  } while (n_cycle-- > 0);
 8002f1c:	f000 809a 	beq.w	8003054 <limits_go_home+0x2e0>
    approach = !approach;
 8002f20:	4625      	mov	r5, r4
 8002f22:	e782      	b.n	8002e2a <limits_go_home+0xb6>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8002f24:	4650      	mov	r0, sl
 8002f26:	f7fe f9c5 	bl	80012b4 <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8002f2a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f2e:	065b      	lsls	r3, r3, #25
 8002f30:	bf5c      	itt	pl
 8002f32:	f480 40e0 	eorpl.w	r0, r0, #28672	; 0x7000
 8002f36:	b280      	uxthpl	r0, r0
  if (pin) {
 8002f38:	b328      	cbz	r0, 8002f86 <limits_go_home+0x212>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002f3a:	4a3d      	ldr	r2, [pc, #244]	; (8003030 <limits_go_home+0x2bc>)
 8002f3c:	8813      	ldrh	r3, [r2, #0]
 8002f3e:	8852      	ldrh	r2, [r2, #2]
 8002f40:	4218      	tst	r0, r3
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	4210      	tst	r0, r2
 8002f4a:	4a39      	ldr	r2, [pc, #228]	; (8003030 <limits_go_home+0x2bc>)
 8002f4c:	bf18      	it	ne
 8002f4e:	f043 0302 	orrne.w	r3, r3, #2
 8002f52:	8892      	ldrh	r2, [r2, #4]
 8002f54:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 8002f56:	f8bd 2018 	ldrh.w	r2, [sp, #24]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002f5a:	bf18      	it	ne
 8002f5c:	f043 0304 	orrne.w	r3, r3, #4
          if (axislock & step_pin[idx]) {
 8002f60:	4214      	tst	r4, r2
 8002f62:	d002      	beq.n	8002f6a <limits_go_home+0x1f6>
            if (limit_state & (1 << idx)) {
 8002f64:	07d8      	lsls	r0, r3, #31
                axislock &= ~(step_pin[idx]);
 8002f66:	bf48      	it	mi
 8002f68:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 8002f6a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8002f6e:	4214      	tst	r4, r2
 8002f70:	d002      	beq.n	8002f78 <limits_go_home+0x204>
            if (limit_state & (1 << idx)) {
 8002f72:	0799      	lsls	r1, r3, #30
                axislock &= ~(step_pin[idx]);
 8002f74:	bf48      	it	mi
 8002f76:	4394      	bicmi	r4, r2
          if (axislock & step_pin[idx]) {
 8002f78:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8002f7c:	4214      	tst	r4, r2
 8002f7e:	d002      	beq.n	8002f86 <limits_go_home+0x212>
            if (limit_state & (1 << idx)) {
 8002f80:	089b      	lsrs	r3, r3, #2
                axislock &= ~(step_pin[idx]);
 8002f82:	bf18      	it	ne
 8002f84:	4394      	bicne	r4, r2
        sys.homing_axis_lock = axislock;
 8002f86:	f8a8 4006 	strh.w	r4, [r8, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8002f8a:	f004 f933 	bl	80071f4 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8002f8e:	7833      	ldrb	r3, [r6, #0]
 8002f90:	f013 0f34 	tst.w	r3, #52	; 0x34
 8002f94:	d0a9      	beq.n	8002eea <limits_go_home+0x176>
        uint8_t rt_exec = sys_rt_exec_state;
 8002f96:	7833      	ldrb	r3, [r6, #0]
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8002f98:	06d8      	lsls	r0, r3, #27
        uint8_t rt_exec = sys_rt_exec_state;
 8002f9a:	b2dc      	uxtb	r4, r3
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8002f9c:	f100 809f 	bmi.w	80030de <limits_go_home+0x36a>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8002fa0:	06a1      	lsls	r1, r4, #26
 8002fa2:	d40c      	bmi.n	8002fbe <limits_go_home+0x24a>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8002fa4:	b185      	cbz	r5, 8002fc8 <limits_go_home+0x254>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8002fa6:	0763      	lsls	r3, r4, #29
 8002fa8:	f100 80c5 	bmi.w	8003136 <limits_go_home+0x3c2>
        if (sys_rt_exec_alarm) {
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <limits_go_home+0x2c0>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 80c4 	bne.w	800313e <limits_go_home+0x3ca>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8002fb6:	2004      	movs	r0, #4
 8002fb8:	f005 f8b4 	bl	8008124 <system_clear_exec_state_flag>
          break;
 8002fbc:	e797      	b.n	8002eee <limits_go_home+0x17a>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8002fbe:	2007      	movs	r0, #7
 8002fc0:	f005 f8ba 	bl	8008138 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8002fc4:	2d00      	cmp	r5, #0
 8002fc6:	d1ee      	bne.n	8002fa6 <limits_go_home+0x232>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8002fc8:	481b      	ldr	r0, [pc, #108]	; (8003038 <limits_go_home+0x2c4>)
 8002fca:	f7fe f973 	bl	80012b4 <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8002fce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fd2:	065a      	lsls	r2, r3, #25
 8002fd4:	bf5c      	itt	pl
 8002fd6:	f480 40e0 	eorpl.w	r0, r0, #28672	; 0x7000
 8002fda:	b280      	uxthpl	r0, r0
  if (pin) {
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d0e5      	beq.n	8002fac <limits_go_home+0x238>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002fe0:	4a13      	ldr	r2, [pc, #76]	; (8003030 <limits_go_home+0x2bc>)
 8002fe2:	8813      	ldrh	r3, [r2, #0]
 8002fe4:	8852      	ldrh	r2, [r2, #2]
 8002fe6:	4218      	tst	r0, r3
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	4210      	tst	r0, r2
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <limits_go_home+0x2bc>)
 8002ff2:	bf18      	it	ne
 8002ff4:	f043 0302 	orrne.w	r3, r3, #2
 8002ff8:	8892      	ldrh	r2, [r2, #4]
 8002ffa:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8002ffc:	9a04      	ldr	r2, [sp, #16]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8002ffe:	bf18      	it	ne
 8003000:	f043 0304 	orrne.w	r3, r3, #4
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003004:	421a      	tst	r2, r3
 8003006:	d0d1      	beq.n	8002fac <limits_go_home+0x238>
 8003008:	2008      	movs	r0, #8
 800300a:	f005 f895 	bl	8008138 <system_set_exec_alarm>
 800300e:	e7cd      	b.n	8002fac <limits_go_home+0x238>
    n_active_axis = 0;
 8003010:	4658      	mov	r0, fp
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003012:	2201      	movs	r2, #1
    axislock = 0;
 8003014:	465c      	mov	r4, fp
 8003016:	e722      	b.n	8002e5e <limits_go_home+0xea>
 8003018:	0800aa60 	.word	0x0800aa60
 800301c:	200014c8 	.word	0x200014c8
 8003020:	bfc00000 	.word	0xbfc00000
 8003024:	20001329 	.word	0x20001329
 8003028:	20001338 	.word	0x20001338
 800302c:	40a00000 	.word	0x40a00000
 8003030:	0800aa58 	.word	0x0800aa58
 8003034:	20001344 	.word	0x20001344
 8003038:	40010c00 	.word	0x40010c00
 800303c:	20001314 	.word	0x20001314
      max_travel = settings.homing_pulloff;
 8003040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
      homing_rate = settings.homing_seek_rate;
 8003042:	f109 39ff 	add.w	r9, r9, #4294967295
  } while (n_cycle-- > 0);
 8003046:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
      homing_rate = settings.homing_seek_rate;
 800304a:	461d      	mov	r5, r3
 800304c:	f8d7 a050 	ldr.w	sl, [r7, #80]	; 0x50
  } while (n_cycle-- > 0);
 8003050:	f47f af66 	bne.w	8002f20 <limits_go_home+0x1ac>
    if (cycle_mask & bit(idx)) {
 8003054:	9b05      	ldr	r3, [sp, #20]
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003056:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
    if (cycle_mask & bit(idx)) {
 800305a:	b15b      	cbz	r3, 8003074 <limits_go_home+0x300>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 800305c:	07e0      	lsls	r0, r4, #31
 800305e:	d460      	bmi.n	8003122 <limits_go_home+0x3ae>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8003060:	4628      	mov	r0, r5
 8003062:	6839      	ldr	r1, [r7, #0]
 8003064:	f7fd fc16 	bl	8000894 <__aeabi_fmul>
 8003068:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800306c:	f006 fc0e 	bl	800988c <lroundf>
        sys_position[idx] = set_axis_position;
 8003070:	4b35      	ldr	r3, [pc, #212]	; (8003148 <limits_go_home+0x3d4>)
 8003072:	6018      	str	r0, [r3, #0]
    if (cycle_mask & bit(idx)) {
 8003074:	9b02      	ldr	r3, [sp, #8]
 8003076:	b15b      	cbz	r3, 8003090 <limits_go_home+0x31c>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003078:	07a1      	lsls	r1, r4, #30
 800307a:	d448      	bmi.n	800310e <limits_go_home+0x39a>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 800307c:	4628      	mov	r0, r5
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	f7fd fc08 	bl	8000894 <__aeabi_fmul>
 8003084:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003088:	f006 fc00 	bl	800988c <lroundf>
        sys_position[idx] = set_axis_position;
 800308c:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <limits_go_home+0x3d4>)
 800308e:	6058      	str	r0, [r3, #4]
    if (cycle_mask & bit(idx)) {
 8003090:	9b03      	ldr	r3, [sp, #12]
 8003092:	b163      	cbz	r3, 80030ae <limits_go_home+0x33a>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8003094:	0762      	lsls	r2, r4, #29
 8003096:	d531      	bpl.n	80030fc <limits_go_home+0x388>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8003098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800309a:	4628      	mov	r0, r5
 800309c:	f7fd faf2 	bl	8000684 <__addsf3>
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	f7fd fbf7 	bl	8000894 <__aeabi_fmul>
 80030a6:	f006 fbf1 	bl	800988c <lroundf>
        sys_position[idx] = set_axis_position;
 80030aa:	4b27      	ldr	r3, [pc, #156]	; (8003148 <limits_go_home+0x3d4>)
 80030ac:	6098      	str	r0, [r3, #8]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 80030ae:	2300      	movs	r3, #0
 80030b0:	f888 3004 	strb.w	r3, [r8, #4]
}
 80030b4:	b00f      	add	sp, #60	; 0x3c
 80030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (approach) { target[idx] = -max_travel; }
 80030ba:	2d00      	cmp	r5, #0
 80030bc:	f47f aef0 	bne.w	8002ea0 <limits_go_home+0x12c>
 80030c0:	e6f0      	b.n	8002ea4 <limits_go_home+0x130>
          if (approach) { target[idx] = max_travel; }
 80030c2:	2d00      	cmp	r5, #0
 80030c4:	f47f aec6 	bne.w	8002e54 <limits_go_home+0xe0>
          if (approach) { target[idx] = -max_travel; }
 80030c8:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80030cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80030ce:	e6c2      	b.n	8002e56 <limits_go_home+0xe2>
          if (approach) { target[idx] = max_travel; }
 80030d0:	2d00      	cmp	r5, #0
 80030d2:	f47f aed2 	bne.w	8002e7a <limits_go_home+0x106>
          if (approach) { target[idx] = -max_travel; }
 80030d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80030da:	910c      	str	r1, [sp, #48]	; 0x30
 80030dc:	e6ce      	b.n	8002e7c <limits_go_home+0x108>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80030de:	2006      	movs	r0, #6
 80030e0:	f005 f82a 	bl	8008138 <system_set_exec_alarm>
 80030e4:	e75c      	b.n	8002fa0 <limits_go_home+0x22c>
  float max_travel = 0.0f;
 80030e6:	f04f 0a00 	mov.w	sl, #0
 80030ea:	4f18      	ldr	r7, [pc, #96]	; (800314c <limits_go_home+0x3d8>)
 80030ec:	e66e      	b.n	8002dcc <limits_go_home+0x58>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80030ee:	46a2      	mov	sl, r4
 80030f0:	e690      	b.n	8002e14 <limits_go_home+0xa0>
 80030f2:	46a2      	mov	sl, r4
 80030f4:	e67c      	b.n	8002df0 <limits_go_home+0x7c>
 80030f6:	f04f 0a00 	mov.w	sl, #0
 80030fa:	e667      	b.n	8002dcc <limits_go_home+0x58>
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 80030fc:	4628      	mov	r0, r5
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	f7fd fbc8 	bl	8000894 <__aeabi_fmul>
 8003104:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003108:	f006 fbc0 	bl	800988c <lroundf>
 800310c:	e7cd      	b.n	80030aa <limits_go_home+0x336>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 800310e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003110:	4628      	mov	r0, r5
 8003112:	f7fd fab7 	bl	8000684 <__addsf3>
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	f7fd fbbc 	bl	8000894 <__aeabi_fmul>
 800311c:	f006 fbb6 	bl	800988c <lroundf>
 8003120:	e7b4      	b.n	800308c <limits_go_home+0x318>
 8003122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003124:	4628      	mov	r0, r5
 8003126:	f7fd faad 	bl	8000684 <__addsf3>
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	f7fd fbb2 	bl	8000894 <__aeabi_fmul>
 8003130:	f006 fbac 	bl	800988c <lroundf>
 8003134:	e79c      	b.n	8003070 <limits_go_home+0x2fc>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003136:	2009      	movs	r0, #9
 8003138:	f004 fffe 	bl	8008138 <system_set_exec_alarm>
 800313c:	e736      	b.n	8002fac <limits_go_home+0x238>
          mc_reset(); // Stop motors, if they are running.
 800313e:	f000 fb53 	bl	80037e8 <mc_reset>
          protocol_execute_realtime();
 8003142:	f001 fffb 	bl	800513c <protocol_execute_realtime>
          return;
 8003146:	e61e      	b.n	8002d86 <limits_go_home+0x12>
 8003148:	20001338 	.word	0x20001338
 800314c:	200014c8 	.word	0x200014c8

08003150 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8003150:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 8003152:	f004 ffb1 	bl	80080b8 <system_check_travel_limits>
 8003156:	b178      	cbz	r0, 8003178 <limits_soft_check+0x28>
    sys.soft_limit = true;
 8003158:	2301      	movs	r3, #1
 800315a:	4c0c      	ldr	r4, [pc, #48]	; (800318c <limits_soft_check+0x3c>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 800315c:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 800315e:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8003160:	2808      	cmp	r0, #8
 8003162:	d10a      	bne.n	800317a <limits_soft_check+0x2a>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 8003164:	f004 ffd4 	bl	8008110 <system_set_exec_state_flag>
 8003168:	e001      	b.n	800316e <limits_soft_check+0x1e>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
 800316a:	7823      	ldrb	r3, [r4, #0]
 800316c:	b12b      	cbz	r3, 800317a <limits_soft_check+0x2a>
        protocol_execute_realtime();
 800316e:	f001 ffe5 	bl	800513c <protocol_execute_realtime>
        if (sys.abort) { return; }
 8003172:	7863      	ldrb	r3, [r4, #1]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f8      	beq.n	800316a <limits_soft_check+0x1a>
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003178:	bd10      	pop	{r4, pc}
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 800317a:	f000 fb35 	bl	80037e8 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 800317e:	2002      	movs	r0, #2
 8003180:	f004 ffda 	bl	8008138 <system_set_exec_alarm>
}
 8003184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8003188:	f001 bfd8 	b.w	800513c <protocol_execute_realtime>
 800318c:	20001314 	.word	0x20001314

08003190 <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003194:	2101      	movs	r1, #1
{
 8003196:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003198:	2010      	movs	r0, #16
 800319a:	f7fe f8f1 	bl	8001380 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800319e:	4b33      	ldr	r3, [pc, #204]	; (800326c <main+0xdc>)
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80031a0:	4833      	ldr	r0, [pc, #204]	; (8003270 <main+0xe0>)
 80031a2:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80031a4:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80031a6:	f7fd feff 	bl	8000fa8 <GPIO_Init>
#endif
	//Set_System();
#ifndef USEUSB
	USART1_Configuration(115200);
#else
	Set_USBClock();
 80031aa:	f005 ff5f 	bl	800906c <Set_USBClock>
	USB_Interrupts_Config();
 80031ae:	f005 ff69 	bl	8009084 <USB_Interrupts_Config>
	USB_Init();
 80031b2:	f005 fd09 	bl	8008bc8 <USB_Init>
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 80031b6:	f7fd fe1f 	bl	8000df8 <FLASH_Unlock>
	eeprom_init();
 80031ba:	f7fe fa69 	bl	8001690 <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 80031be:	492d      	ldr	r1, [pc, #180]	; (8003274 <main+0xe4>)
  // Initialize system state.
  #ifdef FORCE_INITIALIZATION_ALARM
    // Force Grbl into an ALARM state upon a power-cycle or hard reset.
    sys.state = STATE_ALARM;
  #else
    sys.state = STATE_IDLE;
 80031c0:	4e2d      	ldr	r6, [pc, #180]	; (8003278 <main+0xe8>)
	SysTick->CTRL &= 0xfffffffb;
 80031c2:	680a      	ldr	r2, [r1, #0]
  // will return to this loop to be cleanly re-initialized.
  for(;;) {

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80031c4:	2400      	movs	r4, #0
	SysTick->CTRL &= 0xfffffffb;
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	600a      	str	r2, [r1, #0]
  serial_init();   // Setup serial baud rate and interrupts
 80031cc:	f002 ff3e 	bl	800604c <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 80031d0:	f003 fac2 	bl	8006758 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 80031d4:	f003 ff56 	bl	8007084 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 80031d8:	f004 fcf8 	bl	8007bcc <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80031dc:	2200      	movs	r2, #0
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 80031de:	4827      	ldr	r0, [pc, #156]	; (800327c <main+0xec>)
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80031e0:	4927      	ldr	r1, [pc, #156]	; (8003280 <main+0xf0>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 80031e2:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    sys.state = STATE_IDLE;
 80031e6:	7032      	strb	r2, [r6, #0]
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 80031e8:	06c3      	lsls	r3, r0, #27
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80031ea:	e9c1 2200 	strd	r2, r2, [r1]
 80031ee:	608a      	str	r2, [r1, #8]
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 80031f0:	bf48      	it	mi
 80031f2:	2201      	movmi	r2, #1
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 80031f4:	f246 4b64 	movw	fp, #25700	; 0x6464
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 80031f8:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80031fc:	4d21      	ldr	r5, [pc, #132]	; (8003284 <main+0xf4>)
 80031fe:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8003294 <main+0x104>
 8003202:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003298 <main+0x108>
 8003206:	4f20      	ldr	r7, [pc, #128]	; (8003288 <main+0xf8>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8003208:	bf48      	it	mi
 800320a:	7032      	strbmi	r2, [r6, #0]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
    sys_probe_state = 0;
    sys_rt_exec_state = 0;
    sys_rt_exec_alarm = 0;
    sys_rt_exec_motion_override = 0;
 800320c:	4b1f      	ldr	r3, [pc, #124]	; (800328c <main+0xfc>)
    uint8_t prior_state = sys.state;
 800320e:	7831      	ldrb	r1, [r6, #0]
    sys_probe_state = 0;
 8003210:	f889 4000 	strb.w	r4, [r9]
    sys_rt_exec_state = 0;
 8003214:	f888 4000 	strb.w	r4, [r8]
    sys_rt_exec_alarm = 0;
 8003218:	703c      	strb	r4, [r7, #0]
    sys_rt_exec_motion_override = 0;
 800321a:	701c      	strb	r4, [r3, #0]
    sys_rt_exec_accessory_override = 0;
 800321c:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <main+0x100>)
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800321e:	60b4      	str	r4, [r6, #8]
    sys_rt_exec_accessory_override = 0;
 8003220:	701c      	strb	r4, [r3, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003222:	6034      	str	r4, [r6, #0]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8003224:	e9c5 4400 	strd	r4, r4, [r5]
    sys.state = prior_state;
 8003228:	7031      	strb	r1, [r6, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800322a:	6074      	str	r4, [r6, #4]
 800322c:	60f4      	str	r4, [r6, #12]
 800322e:	6134      	str	r4, [r6, #16]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8003230:	f8a6 b008 	strh.w	fp, [r6, #8]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 8003234:	f886 a00a 	strb.w	sl, [r6, #10]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8003238:	60ac      	str	r4, [r5, #8]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 800323a:	f003 f81f 	bl	800627c <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 800323e:	f7fe fac5 	bl	80017cc <gc_init>
    spindle_init();
 8003242:	f003 faa3 	bl	800678c <spindle_init>
    coolant_init();
 8003246:	f7fe f98b 	bl	8001560 <coolant_init>
    limits_init();
 800324a:	f7ff fcdb 	bl	8002c04 <limits_init>
    probe_init();
 800324e:	f001 fbf1 	bl	8004a34 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 8003252:	f000 fd75 	bl	8003d40 <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 8003256:	f003 fea7 	bl	8006fa8 <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 800325a:	f001 f8d3 	bl	8004404 <plan_sync_position>
    gc_sync_position();
 800325e:	f7fe facb 	bl	80017f8 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 8003262:	f002 f8db 	bl	800541c <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 8003266:	f001 ff77 	bl	8005158 <protocol_main_loop>
  for(;;) {
 800326a:	e7cf      	b.n	800320c <main+0x7c>
 800326c:	10022000 	.word	0x10022000
 8003270:	40011000 	.word	0x40011000
 8003274:	e000e010 	.word	0xe000e010
 8003278:	20001314 	.word	0x20001314
 800327c:	200014c8 	.word	0x200014c8
 8003280:	20001338 	.word	0x20001338
 8003284:	2000132c 	.word	0x2000132c
 8003288:	20001344 	.word	0x20001344
 800328c:	20001310 	.word	0x20001310
 8003290:	20001328 	.word	0x20001328
 8003294:	2000132a 	.word	0x2000132a
 8003298:	20001329 	.word	0x20001329

0800329c <_delay_ms>:
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 800329c:	f242 3128 	movw	r1, #9000	; 0x2328
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <_delay_ms+0x2c>)
{
 80032a2:	b430      	push	{r4, r5}
	SysTick->VAL = 0x00;                                            // Empty the counter
 80032a4:	2500      	movs	r5, #0
	SysTick->CTRL = 0x01;                                           // Start from bottom
 80032a6:	2401      	movs	r4, #1
	do
	{
		temp = SysTick->CTRL;
 80032a8:	461a      	mov	r2, r3
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 80032aa:	fb01 f100 	mul.w	r1, r1, r0
 80032ae:	6059      	str	r1, [r3, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 80032b0:	609d      	str	r5, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 80032b2:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL;
 80032b4:	6813      	ldr	r3, [r2, #0]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 80032b6:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d0fa      	beq.n	80032b4 <_delay_ms+0x18>
	SysTick->CTRL = 0x00;                                            // Close the counter
	SysTick->VAL = 0X00;                                            // Empty the counter
}
 80032be:	bc30      	pop	{r4, r5}
	SysTick->CTRL = 0x00;                                            // Close the counter
 80032c0:	2300      	movs	r3, #0
 80032c2:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 80032c4:	6093      	str	r3, [r2, #8]
}
 80032c6:	4770      	bx	lr
 80032c8:	e000e010 	.word	0xe000e010

080032cc <LedBlink>:
void LedBlink(void)
{
 80032cc:	b510      	push	{r4, lr}
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 80032ce:	4c06      	ldr	r4, [pc, #24]	; (80032e8 <LedBlink+0x1c>)
 80032d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032d4:	7822      	ldrb	r2, [r4, #0]
 80032d6:	4805      	ldr	r0, [pc, #20]	; (80032ec <LedBlink+0x20>)
 80032d8:	f7fd fff8 	bl	80012cc <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 80032dc:	7823      	ldrb	r3, [r4, #0]
 80032de:	3b01      	subs	r3, #1
 80032e0:	bf18      	it	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	7023      	strb	r3, [r4, #0]
}
 80032e6:	bd10      	pop	{r4, pc}
 80032e8:	20000000 	.word	0x20000000
 80032ec:	40011000 	.word	0x40011000

080032f0 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80032f2:	4e17      	ldr	r6, [pc, #92]	; (8003350 <mc_line+0x60>)
{
 80032f4:	460f      	mov	r7, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80032f6:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
{
 80032fa:	4605      	mov	r5, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80032fc:	0699      	lsls	r1, r3, #26
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80032fe:	4c15      	ldr	r4, [pc, #84]	; (8003354 <mc_line+0x64>)
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003300:	d504      	bpl.n	800330c <mc_line+0x1c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003302:	7823      	ldrb	r3, [r4, #0]
 8003304:	2b20      	cmp	r3, #32
 8003306:	d00a      	beq.n	800331e <mc_line+0x2e>
 8003308:	f7ff ff22 	bl	8003150 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 800330c:	7823      	ldrb	r3, [r4, #0]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d105      	bne.n	800331e <mc_line+0x2e>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
			}
		}
	}
}
 8003312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003314:	f000 fd88 	bl	8003e28 <plan_check_full_buffer>
 8003318:	b138      	cbz	r0, 800332a <mc_line+0x3a>
 800331a:	f001 fbf5 	bl	8004b08 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 800331e:	f001 ff0d 	bl	800513c <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003322:	7863      	ldrb	r3, [r4, #1]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f5      	beq.n	8003314 <mc_line+0x24>
 8003328:	e7f3      	b.n	8003312 <mc_line+0x22>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 800332a:	4628      	mov	r0, r5
 800332c:	4639      	mov	r1, r7
 800332e:	f000 fe43 	bl	8003fb8 <plan_buffer_line>
 8003332:	2800      	cmp	r0, #0
 8003334:	d1ed      	bne.n	8003312 <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003336:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800333a:	079a      	lsls	r2, r3, #30
 800333c:	d5e9      	bpl.n	8003312 <mc_line+0x22>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 800333e:	7a3b      	ldrb	r3, [r7, #8]
 8003340:	06db      	lsls	r3, r3, #27
 8003342:	d5e6      	bpl.n	8003312 <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	2010      	movs	r0, #16
}
 8003348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 800334c:	f003 bb9a 	b.w	8006a84 <spindle_sync>
 8003350:	200014c8 	.word	0x200014c8
 8003354:	20001314 	.word	0x20001314

08003358 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	b08f      	sub	sp, #60	; 0x3c
 800335e:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8003362:	461d      	mov	r5, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003364:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
{
 8003368:	4604      	mov	r4, r0
 800336a:	900d      	str	r0, [sp, #52]	; 0x34
 800336c:	468b      	mov	fp, r1
  float center_axis0 = position[axis_0] + offset[axis_0];
 800336e:	4648      	mov	r0, r9
 8003370:	f852 1027 	ldr.w	r1, [r2, r7, lsl #2]
{
 8003374:	4692      	mov	sl, r2
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003376:	f7fd f985 	bl	8000684 <__addsf3>
{
 800337a:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
  float center_axis0 = position[axis_0] + offset[axis_0];
 800337e:	9002      	str	r0, [sp, #8]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003380:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8003384:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 8003388:	4618      	mov	r0, r3
 800338a:	9308      	str	r3, [sp, #32]
 800338c:	f7fd f97a 	bl	8000684 <__addsf3>
 8003390:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8003394:	9005      	str	r0, [sp, #20]
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
  float rt_axis1 = target[axis_1] - center_axis1;

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003396:	f7fd f973 	bl	8000680 <__aeabi_fsub>
 800339a:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 800339e:	4680      	mov	r8, r0
 80033a0:	9802      	ldr	r0, [sp, #8]
 80033a2:	f7fd f96d 	bl	8000680 <__aeabi_fsub>
 80033a6:	4604      	mov	r4, r0
 80033a8:	4648      	mov	r0, r9
 80033aa:	4621      	mov	r1, r4
 80033ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80033b0:	f7fd fa70 	bl	8000894 <__aeabi_fmul>
 80033b4:	4641      	mov	r1, r8
 80033b6:	4681      	mov	r9, r0
 80033b8:	9808      	ldr	r0, [sp, #32]
 80033ba:	f7fd fa6b 	bl	8000894 <__aeabi_fmul>
 80033be:	4601      	mov	r1, r0
 80033c0:	4648      	mov	r0, r9
 80033c2:	f7fd f95f 	bl	8000684 <__addsf3>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4641      	mov	r1, r8
 80033ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033cc:	4698      	mov	r8, r3
 80033ce:	f7fd fa61 	bl	8000894 <__aeabi_fmul>
 80033d2:	4621      	mov	r1, r4
 80033d4:	4604      	mov	r4, r0
 80033d6:	9808      	ldr	r0, [sp, #32]
 80033d8:	f7fd fa5c 	bl	8000894 <__aeabi_fmul>
 80033dc:	4601      	mov	r1, r0
 80033de:	4620      	mov	r0, r4
 80033e0:	f7fd f94e 	bl	8000680 <__aeabi_fsub>
 80033e4:	4641      	mov	r1, r8
 80033e6:	f006 fab3 	bl	8009950 <atan2f>
  float center_axis0 = position[axis_0] + offset[axis_0];
 80033ea:	eb0a 0287 	add.w	r2, sl, r7, lsl #2
 80033ee:	9203      	str	r2, [sp, #12]
 80033f0:	eb05 0287 	add.w	r2, r5, r7, lsl #2
 80033f4:	920a      	str	r2, [sp, #40]	; 0x28
{
 80033f6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 80033fa:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 80033fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8003400:	eb0a 0286 	add.w	r2, sl, r6, lsl #2
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003404:	4604      	mov	r4, r0
{
 8003406:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8003408:	f89d 806c 	ldrb.w	r8, [sp, #108]	; 0x6c
  float center_axis1 = position[axis_1] + offset[axis_1];
 800340c:	9204      	str	r2, [sp, #16]
  if (is_clockwise_arc) { // Correct atan2 output per direction
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8103 	beq.w	800361a <mc_arc+0x2c2>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003414:	f7fd f800 	bl	8000418 <__aeabi_f2d>
 8003418:	a39b      	add	r3, pc, #620	; (adr r3, 8003688 <mc_arc+0x330>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	4606      	mov	r6, r0
 8003420:	460f      	mov	r7, r1
 8003422:	f7fd f8c5 	bl	80005b0 <__aeabi_dcmpge>
 8003426:	2800      	cmp	r0, #0
 8003428:	f040 811d 	bne.w	8003666 <mc_arc+0x30e>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 800342c:	4b9c      	ldr	r3, [pc, #624]	; (80036a0 <mc_arc+0x348>)
 800342e:	4629      	mov	r1, r5
 8003430:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8003432:	4628      	mov	r0, r5
 8003434:	f7fd f926 	bl	8000684 <__addsf3>
 8003438:	4631      	mov	r1, r6
 800343a:	f7fd f921 	bl	8000680 <__aeabi_fsub>
 800343e:	4631      	mov	r1, r6
 8003440:	f7fd fa28 	bl	8000894 <__aeabi_fmul>
 8003444:	f006 fa86 	bl	8009954 <sqrtf>
 8003448:	4603      	mov	r3, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 800344a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800344e:	4628      	mov	r0, r5
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003450:	461d      	mov	r5, r3
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003452:	f7fd fa1f 	bl	8000894 <__aeabi_fmul>
 8003456:	4621      	mov	r1, r4
 8003458:	f7fd fa1c 	bl	8000894 <__aeabi_fmul>
 800345c:	4629      	mov	r1, r5
 800345e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003462:	f7fd facb 	bl	80009fc <__aeabi_fdiv>
 8003466:	f006 f9cf 	bl	8009808 <floorf>
 800346a:	f7fd fc15 	bl	8000c98 <__aeabi_f2uiz>
 800346e:	b283      	uxth	r3, r0
 8003470:	9301      	str	r3, [sp, #4]

  if (segments) {
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80ca 	beq.w	800360c <mc_arc+0x2b4>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003478:	f89b 6008 	ldrb.w	r6, [fp, #8]
 800347c:	4618      	mov	r0, r3
 800347e:	0733      	lsls	r3, r6, #28
 8003480:	f100 80e2 	bmi.w	8003648 <mc_arc+0x2f0>
 8003484:	f7fd f9b2 	bl	80007ec <__aeabi_i2f>
 8003488:	4605      	mov	r5, r0
      pl_data->feed_rate *= segments; 
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 800348a:	4629      	mov	r1, r5
 800348c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003490:	f7fd fab4 	bl	80009fc <__aeabi_fdiv>
 8003494:	4605      	mov	r5, r0
 8003496:	4620      	mov	r0, r4
 8003498:	4629      	mov	r1, r5
 800349a:	f7fd f9fb 	bl	8000894 <__aeabi_fmul>
 800349e:	4603      	mov	r3, r0
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80034a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80034a2:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80034a6:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
    float theta_per_segment = angular_travel/segments;
 80034aa:	461e      	mov	r6, r3
 80034ac:	930c      	str	r3, [sp, #48]	; 0x30
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80034ae:	f7fd f8e7 	bl	8000680 <__aeabi_fsub>
 80034b2:	4629      	mov	r1, r5
 80034b4:	f7fd f9ee 	bl	8000894 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80034b8:	4631      	mov	r1, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80034ba:	4681      	mov	r9, r0
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80034bc:	4630      	mov	r0, r6
 80034be:	f7fd f9e9 	bl	8000894 <__aeabi_fmul>
 80034c2:	4604      	mov	r4, r0
 80034c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80034c8:	4621      	mov	r1, r4
 80034ca:	f7fd f8d9 	bl	8000680 <__aeabi_fsub>
 80034ce:	4603      	mov	r3, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80034d0:	4621      	mov	r1, r4
 80034d2:	4874      	ldr	r0, [pc, #464]	; (80036a4 <mc_arc+0x34c>)
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80034d4:	461c      	mov	r4, r3
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80034d6:	f7fd f8d3 	bl	8000680 <__aeabi_fsub>
 80034da:	4973      	ldr	r1, [pc, #460]	; (80036a8 <mc_arc+0x350>)
 80034dc:	4605      	mov	r5, r0
 80034de:	4630      	mov	r0, r6
 80034e0:	f7fd f9d8 	bl	8000894 <__aeabi_fmul>
 80034e4:	4601      	mov	r1, r0
 80034e6:	4628      	mov	r0, r5
 80034e8:	f7fd f9d4 	bl	8000894 <__aeabi_fmul>
 80034ec:	4603      	mov	r3, r0
    cos_T *= 0.5;
 80034ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034f2:	4620      	mov	r0, r4
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80034f4:	9306      	str	r3, [sp, #24]
    cos_T *= 0.5;
 80034f6:	f7fd f9cd 	bl	8000894 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80034fa:	9b01      	ldr	r3, [sp, #4]
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 80034fc:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003500:	2b01      	cmp	r3, #1
    cos_T *= 0.5;
 8003502:	9007      	str	r0, [sp, #28]
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003504:	f000 8082 	beq.w	800360c <mc_arc+0x2b4>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003508:	9b09      	ldr	r3, [sp, #36]	; 0x24
  float r_axis1 = -offset[axis_1];
 800350a:	2601      	movs	r6, #1
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 800350c:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  float r_axis1 = -offset[axis_1];
 8003510:	9b08      	ldr	r3, [sp, #32]
    uint8_t count = 0;
 8003512:	2700      	movs	r7, #0
  float r_axis1 = -offset[axis_1];
 8003514:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 8003518:	e040      	b.n	800359c <mc_arc+0x244>

      if (count < N_ARC_CORRECTION) {
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 800351a:	4621      	mov	r1, r4
 800351c:	9806      	ldr	r0, [sp, #24]
 800351e:	f7fd f9b9 	bl	8000894 <__aeabi_fmul>
 8003522:	4629      	mov	r1, r5
 8003524:	9008      	str	r0, [sp, #32]
 8003526:	9807      	ldr	r0, [sp, #28]
 8003528:	f7fd f9b4 	bl	8000894 <__aeabi_fmul>
 800352c:	9b08      	ldr	r3, [sp, #32]
 800352e:	4601      	mov	r1, r0
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f8a7 	bl	8000684 <__addsf3>
 8003536:	4603      	mov	r3, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003538:	4621      	mov	r1, r4
 800353a:	9807      	ldr	r0, [sp, #28]
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 800353c:	461c      	mov	r4, r3
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 800353e:	f7fd f9a9 	bl	8000894 <__aeabi_fmul>
 8003542:	4629      	mov	r1, r5
 8003544:	4605      	mov	r5, r0
 8003546:	9806      	ldr	r0, [sp, #24]
 8003548:	f7fd f9a4 	bl	8000894 <__aeabi_fmul>
 800354c:	4601      	mov	r1, r0
 800354e:	4628      	mov	r0, r5
 8003550:	f7fd f896 	bl	8000680 <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003554:	4625      	mov	r5, r4
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003556:	4604      	mov	r4, r0
        count++;
 8003558:	3701      	adds	r7, #1
 800355a:	b2ff      	uxtb	r7, r7
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 800355c:	9902      	ldr	r1, [sp, #8]
 800355e:	4620      	mov	r0, r4
 8003560:	f7fd f890 	bl	8000684 <__addsf3>
 8003564:	9b03      	ldr	r3, [sp, #12]
      position[axis_1] = center_axis1 + r_axis1;
 8003566:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 8003568:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 800356a:	4628      	mov	r0, r5
 800356c:	f7fd f88a 	bl	8000684 <__addsf3>
 8003570:	9b04      	ldr	r3, [sp, #16]
      position[axis_linear] += linear_per_segment;
 8003572:	4649      	mov	r1, r9
      position[axis_1] = center_axis1 + r_axis1;
 8003574:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8003576:	f8d8 0000 	ldr.w	r0, [r8]
 800357a:	f7fd f883 	bl	8000684 <__addsf3>

      mc_line(position, pl_data);
 800357e:	4659      	mov	r1, fp
      position[axis_linear] += linear_per_segment;
 8003580:	f8c8 0000 	str.w	r0, [r8]
      mc_line(position, pl_data);
 8003584:	4650      	mov	r0, sl
 8003586:	f7ff feb3 	bl	80032f0 <mc_line>

      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
 800358a:	4b48      	ldr	r3, [pc, #288]	; (80036ac <mc_arc+0x354>)
 800358c:	3601      	adds	r6, #1
 800358e:	785b      	ldrb	r3, [r3, #1]
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003590:	b2b2      	uxth	r2, r6
      if (sys.abort) { return; }
 8003592:	2b00      	cmp	r3, #0
 8003594:	d172      	bne.n	800367c <mc_arc+0x324>
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003596:	9b01      	ldr	r3, [sp, #4]
 8003598:	4293      	cmp	r3, r2
 800359a:	d937      	bls.n	800360c <mc_arc+0x2b4>
      if (count < N_ARC_CORRECTION) {
 800359c:	2f0b      	cmp	r7, #11
 800359e:	d9bc      	bls.n	800351a <mc_arc+0x1c2>
        cos_Ti = cosf(i*theta_per_segment);
 80035a0:	4630      	mov	r0, r6
 80035a2:	f7fd f923 	bl	80007ec <__aeabi_i2f>
 80035a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035a8:	f7fd f974 	bl	8000894 <__aeabi_fmul>
 80035ac:	4604      	mov	r4, r0
 80035ae:	f006 f8f7 	bl	80097a0 <cosf>
 80035b2:	4605      	mov	r5, r0
        sin_Ti = sinf(i*theta_per_segment);
 80035b4:	4620      	mov	r0, r4
 80035b6:	f006 f995 	bl	80098e4 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 80035ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        sin_Ti = sinf(i*theta_per_segment);
 80035bc:	4604      	mov	r4, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 80035be:	681f      	ldr	r7, [r3, #0]
 80035c0:	4629      	mov	r1, r5
 80035c2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80035c6:	4638      	mov	r0, r7
 80035c8:	f7fd f964 	bl	8000894 <__aeabi_fmul>
 80035cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035ce:	4621      	mov	r1, r4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	9009      	str	r0, [sp, #36]	; 0x24
 80035d4:	4618      	mov	r0, r3
 80035d6:	9308      	str	r3, [sp, #32]
 80035d8:	f7fd f95c 	bl	8000894 <__aeabi_fmul>
 80035dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035de:	4601      	mov	r1, r0
 80035e0:	4610      	mov	r0, r2
 80035e2:	f7fd f84f 	bl	8000684 <__addsf3>
 80035e6:	4602      	mov	r2, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 80035e8:	4621      	mov	r1, r4
 80035ea:	4638      	mov	r0, r7
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 80035ec:	4614      	mov	r4, r2
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 80035ee:	f7fd f951 	bl	8000894 <__aeabi_fmul>
 80035f2:	9b08      	ldr	r3, [sp, #32]
 80035f4:	4629      	mov	r1, r5
 80035f6:	4605      	mov	r5, r0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd f94b 	bl	8000894 <__aeabi_fmul>
 80035fe:	4601      	mov	r1, r0
 8003600:	4628      	mov	r0, r5
 8003602:	f7fd f83d 	bl	8000680 <__aeabi_fsub>
        count = 0;
 8003606:	2700      	movs	r7, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003608:	4605      	mov	r5, r0
        count = 0;
 800360a:	e7a7      	b.n	800355c <mc_arc+0x204>
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 800360c:	4659      	mov	r1, fp
 800360e:	980d      	ldr	r0, [sp, #52]	; 0x34
}
 8003610:	b00f      	add	sp, #60	; 0x3c
 8003612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mc_line(target, pl_data);
 8003616:	f7ff be6b 	b.w	80032f0 <mc_line>
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 800361a:	f7fc fefd 	bl	8000418 <__aeabi_f2d>
 800361e:	a31c      	add	r3, pc, #112	; (adr r3, 8003690 <mc_arc+0x338>)
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	4606      	mov	r6, r0
 8003626:	460f      	mov	r7, r1
 8003628:	f7fc ffb8 	bl	800059c <__aeabi_dcmple>
 800362c:	2800      	cmp	r0, #0
 800362e:	f43f aefd 	beq.w	800342c <mc_arc+0xd4>
 8003632:	a319      	add	r3, pc, #100	; (adr r3, 8003698 <mc_arc+0x340>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	4630      	mov	r0, r6
 800363a:	4639      	mov	r1, r7
 800363c:	f7fc fd8e 	bl	800015c <__adddf3>
 8003640:	f7fc ffca 	bl	80005d8 <__aeabi_d2f>
 8003644:	4604      	mov	r4, r0
 8003646:	e6f1      	b.n	800342c <mc_arc+0xd4>
      pl_data->feed_rate *= segments; 
 8003648:	f7fd f8d0 	bl	80007ec <__aeabi_i2f>
 800364c:	4605      	mov	r5, r0
 800364e:	f8db 0000 	ldr.w	r0, [fp]
 8003652:	4629      	mov	r1, r5
 8003654:	f7fd f91e 	bl	8000894 <__aeabi_fmul>
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003658:	f026 0608 	bic.w	r6, r6, #8
      pl_data->feed_rate *= segments; 
 800365c:	f8cb 0000 	str.w	r0, [fp]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003660:	f88b 6008 	strb.w	r6, [fp, #8]
 8003664:	e711      	b.n	800348a <mc_arc+0x132>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003666:	a30c      	add	r3, pc, #48	; (adr r3, 8003698 <mc_arc+0x340>)
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	4630      	mov	r0, r6
 800366e:	4639      	mov	r1, r7
 8003670:	f7fc fd72 	bl	8000158 <__aeabi_dsub>
 8003674:	f7fc ffb0 	bl	80005d8 <__aeabi_d2f>
 8003678:	4604      	mov	r4, r0
 800367a:	e6d7      	b.n	800342c <mc_arc+0xd4>
}
 800367c:	b00f      	add	sp, #60	; 0x3c
 800367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003682:	bf00      	nop
 8003684:	f3af 8000 	nop.w
 8003688:	a0b5ed8d 	.word	0xa0b5ed8d
 800368c:	bea0c6f7 	.word	0xbea0c6f7
 8003690:	a0b5ed8d 	.word	0xa0b5ed8d
 8003694:	3ea0c6f7 	.word	0x3ea0c6f7
 8003698:	54442d18 	.word	0x54442d18
 800369c:	401921fb 	.word	0x401921fb
 80036a0:	200014c8 	.word	0x200014c8
 80036a4:	40c00000 	.word	0x40c00000
 80036a8:	3e2aaaab 	.word	0x3e2aaaab
 80036ac:	20001314 	.word	0x20001314

080036b0 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <mc_dwell+0x20>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d009      	beq.n	80036cc <mc_dwell+0x1c>
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 80036bc:	f001 fe06 	bl	80052cc <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 80036c0:	4620      	mov	r0, r4
}
 80036c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 80036c6:	2100      	movs	r1, #0
 80036c8:	f000 b952 	b.w	8003970 <delay_sec>
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20001314 	.word	0x20001314

080036d4 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 80036d4:	b508      	push	{r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 80036d6:	f7ff fae3 	bl	8002ca0 <limits_disable>
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
    else
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 80036da:	2004      	movs	r0, #4
 80036dc:	f7ff fb4a 	bl	8002d74 <limits_go_home>
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 80036e0:	2003      	movs	r0, #3
 80036e2:	f7ff fb47 	bl	8002d74 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 80036e6:	f001 fd29 	bl	800513c <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <mc_homing_cycle+0x3c>)
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	b103      	cbz	r3, 80036f2 <mc_homing_cycle+0x1e>
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
#else
	limits_init();
#endif
}
 80036f0:	bd08      	pop	{r3, pc}
  gc_sync_position();
 80036f2:	f7fe f881 	bl	80017f8 <gc_sync_position>
  plan_sync_position();
 80036f6:	f000 fe85 	bl	8004404 <plan_sync_position>
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT));
 80036fa:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 80036fe:	f7fd fb75 	bl	8000dec <EXTI_ClearITPendingBit>
 8003702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003706:	4b03      	ldr	r3, [pc, #12]	; (8003714 <mc_homing_cycle+0x40>)
 8003708:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800370c:	605a      	str	r2, [r3, #4]
}
 800370e:	bd08      	pop	{r3, pc}
 8003710:	20001314 	.word	0x20001314
 8003714:	e000e100 	.word	0xe000e100

08003718 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 800371c:	4c2e      	ldr	r4, [pc, #184]	; (80037d8 <mc_probe_cycle+0xc0>)
 800371e:	7823      	ldrb	r3, [r4, #0]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d027      	beq.n	8003774 <mc_probe_cycle+0x5c>

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003724:	4607      	mov	r7, r0
 8003726:	460d      	mov	r5, r1
 8003728:	4616      	mov	r6, r2
 800372a:	f001 fdcf 	bl	80052cc <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 800372e:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003732:	f1b8 0f00 	cmp.w	r8, #0
 8003736:	d11a      	bne.n	800376e <mc_probe_cycle+0x56>

  // Initialize probing control variables
  uint8_t is_probe_away = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_AWAY);
  uint8_t is_no_error = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_NO_ERROR);
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
  probe_configure_invert_mask(is_probe_away);
 8003738:	f3c6 00c0 	ubfx	r0, r6, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 800373c:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003740:	f001 f99a 	bl	8004a78 <probe_configure_invert_mask>

  // After syncing, check if probe is already triggered. If so, halt and issue alarm.
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
 8003744:	f001 f9ac 	bl	8004aa0 <probe_get_state>
 8003748:	bb80      	cbnz	r0, 80037ac <mc_probe_cycle+0x94>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 800374a:	4629      	mov	r1, r5
 800374c:	4638      	mov	r0, r7
 800374e:	f7ff fdcf 	bl	80032f0 <mc_line>

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 8003752:	2301      	movs	r3, #1
 8003754:	4d21      	ldr	r5, [pc, #132]	; (80037dc <mc_probe_cycle+0xc4>)

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003756:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003758:	702b      	strb	r3, [r5, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 800375a:	f004 fcd9 	bl	8008110 <system_set_exec_state_flag>
 800375e:	e001      	b.n	8003764 <mc_probe_cycle+0x4c>
  do {
    protocol_execute_realtime();
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
  } while (sys.state != STATE_IDLE);
 8003760:	7823      	ldrb	r3, [r4, #0]
 8003762:	b153      	cbz	r3, 800377a <mc_probe_cycle+0x62>
    protocol_execute_realtime();
 8003764:	f001 fcea 	bl	800513c <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003768:	7863      	ldrb	r3, [r4, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f8      	beq.n	8003760 <mc_probe_cycle+0x48>
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 800376e:	2002      	movs	r0, #2
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003774:	2000      	movs	r0, #0
}
 8003776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys_probe_state == PROBE_ACTIVE) {
 800377a:	782b      	ldrb	r3, [r5, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d01e      	beq.n	80037be <mc_probe_cycle+0xa6>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8003780:	2301      	movs	r3, #1
 8003782:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003784:	2000      	movs	r0, #0
 8003786:	7028      	strb	r0, [r5, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003788:	f001 f976 	bl	8004a78 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 800378c:	f001 fcd6 	bl	800513c <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8003790:	f003 fc0a 	bl	8006fa8 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8003794:	f000 fad4 	bl	8003d40 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8003798:	f000 fe34 	bl	8004404 <plan_sync_position>
    report_probe_parameters();
 800379c:	f002 f846 	bl	800582c <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 80037a0:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80037a2:	3800      	subs	r0, #0
 80037a4:	bf18      	it	ne
 80037a6:	2001      	movne	r0, #1
}
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 80037ac:	2004      	movs	r0, #4
 80037ae:	f004 fcc3 	bl	8008138 <system_set_exec_alarm>
    protocol_execute_realtime();
 80037b2:	f001 fcc3 	bl	800513c <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 80037b6:	4640      	mov	r0, r8
 80037b8:	f001 f95e 	bl	8004a78 <probe_configure_invert_mask>
 80037bc:	e7d7      	b.n	800376e <mc_probe_cycle+0x56>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 80037be:	06f3      	lsls	r3, r6, #27
 80037c0:	d505      	bpl.n	80037ce <mc_probe_cycle+0xb6>
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <mc_probe_cycle+0xc8>)
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <mc_probe_cycle+0xcc>)
 80037c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80037c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037cc:	e7da      	b.n	8003784 <mc_probe_cycle+0x6c>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 80037ce:	2005      	movs	r0, #5
 80037d0:	f004 fcb2 	bl	8008138 <system_set_exec_alarm>
 80037d4:	e7d6      	b.n	8003784 <mc_probe_cycle+0x6c>
 80037d6:	bf00      	nop
 80037d8:	20001314 	.word	0x20001314
 80037dc:	2000132a 	.word	0x2000132a
 80037e0:	20001338 	.word	0x20001338
 80037e4:	2000132c 	.word	0x2000132c

080037e8 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 80037e8:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <mc_reset+0x54>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	06db      	lsls	r3, r3, #27
 80037f0:	d500      	bpl.n	80037f4 <mc_reset+0xc>
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 80037f2:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 80037f4:	2010      	movs	r0, #16
 80037f6:	f004 fc8b 	bl	8008110 <system_set_exec_state_flag>
    spindle_stop();
 80037fa:	f003 f857 	bl	80068ac <spindle_stop>
    coolant_stop();
 80037fe:	f7fd fee9 	bl	80015d4 <coolant_stop>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <mc_reset+0x58>)
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	791b      	ldrb	r3, [r3, #4]
 8003808:	f002 012c 	and.w	r1, r2, #44	; 0x2c
 800380c:	f003 0306 	and.w	r3, r3, #6
 8003810:	430b      	orrs	r3, r1
 8003812:	d0ee      	beq.n	80037f2 <mc_reset+0xa>
      if (sys.state == STATE_HOMING) {
 8003814:	2a04      	cmp	r2, #4
 8003816:	d106      	bne.n	8003826 <mc_reset+0x3e>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <mc_reset+0x5c>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b153      	cbz	r3, 8003834 <mc_reset+0x4c>
}
 800381e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003822:	f003 ba27 	b.w	8006c74 <st_go_idle>
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8003826:	2003      	movs	r0, #3
 8003828:	f004 fc86 	bl	8008138 <system_set_exec_alarm>
}
 800382c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8003830:	f003 ba20 	b.w	8006c74 <st_go_idle>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003834:	2006      	movs	r0, #6
 8003836:	f004 fc7f 	bl	8008138 <system_set_exec_alarm>
 800383a:	e7f0      	b.n	800381e <mc_reset+0x36>
 800383c:	20001329 	.word	0x20001329
 8003840:	20001314 	.word	0x20001314
 8003844:	20001344 	.word	0x20001344

08003848 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	460e      	mov	r6, r1
  char *ptr = line + *char_counter;
 800384e:	7809      	ldrb	r1, [r1, #0]
{
 8003850:	4605      	mov	r5, r0
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8003852:	5c43      	ldrb	r3, [r0, r1]
{
 8003854:	4617      	mov	r7, r2

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 8003856:	2b2d      	cmp	r3, #45	; 0x2d
{
 8003858:	b083      	sub	sp, #12
  char *ptr = line + *char_counter;
 800385a:	4401      	add	r1, r0
  if (c == '-') {
 800385c:	d067      	beq.n	800392e <read_float+0xe6>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 800385e:	2b2b      	cmp	r3, #43	; 0x2b
 8003860:	d020      	beq.n	80038a4 <read_float+0x5c>
  bool isnegative = false;
 8003862:	2200      	movs	r2, #0
  c = *ptr++;
 8003864:	f101 0901 	add.w	r9, r1, #1
  bool isnegative = false;
 8003868:	9201      	str	r2, [sp, #4]

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 800386a:	2200      	movs	r2, #0
  uint8_t ndigit = 0;
 800386c:	4614      	mov	r4, r2
  int8_t exp = 0;
 800386e:	4692      	mov	sl, r2
  uint32_t intval = 0;
 8003870:	4610      	mov	r0, r2
 8003872:	e00e      	b.n	8003892 <read_float+0x4a>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 8003874:	3401      	adds	r4, #1
 8003876:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 8003878:	2c08      	cmp	r4, #8
 800387a:	d819      	bhi.n	80038b0 <read_float+0x68>
        if (isdecimal) { exp--; }
 800387c:	b11a      	cbz	r2, 8003886 <read_float+0x3e>
 800387e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003882:	fa4f fa8a 	sxtb.w	sl, sl
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8003886:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800388a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 800388e:	f819 3b01 	ldrb.w	r3, [r9], #1
    c -= '0';
 8003892:	3b30      	subs	r3, #48	; 0x30
 8003894:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8003896:	2b09      	cmp	r3, #9
 8003898:	d9ec      	bls.n	8003874 <read_float+0x2c>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 800389a:	2bfe      	cmp	r3, #254	; 0xfe
 800389c:	d10f      	bne.n	80038be <read_float+0x76>
 800389e:	b972      	cbnz	r2, 80038be <read_float+0x76>
      isdecimal = true;
 80038a0:	2201      	movs	r2, #1
 80038a2:	e7f4      	b.n	800388e <read_float+0x46>
  bool isnegative = false;
 80038a4:	2300      	movs	r3, #0
    c = *ptr++;
 80038a6:	f101 0902 	add.w	r9, r1, #2
  bool isnegative = false;
 80038aa:	9301      	str	r3, [sp, #4]
    c = *ptr++;
 80038ac:	784b      	ldrb	r3, [r1, #1]
 80038ae:	e7dc      	b.n	800386a <read_float+0x22>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 80038b0:	2a00      	cmp	r2, #0
 80038b2:	d1ec      	bne.n	800388e <read_float+0x46>
 80038b4:	f10a 0a01 	add.w	sl, sl, #1
 80038b8:	fa4f fa8a 	sxtb.w	sl, sl
 80038bc:	e7e7      	b.n	800388e <read_float+0x46>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 80038be:	b394      	cbz	r4, 8003926 <read_float+0xde>

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 80038c0:	f7fc ff90 	bl	80007e4 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 80038c4:	2100      	movs	r1, #0
  fval = (float)intval;
 80038c6:	4683      	mov	fp, r0
  if (fval != 0) {
 80038c8:	f7fd f978 	bl	8000bbc <__aeabi_fcmpeq>
 80038cc:	b9f8      	cbnz	r0, 800390e <read_float+0xc6>
    while (exp <= -2) {
 80038ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 80038d2:	da16      	bge.n	8003902 <read_float+0xba>
 80038d4:	4654      	mov	r4, sl
      fval *= 0.01f;
 80038d6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800396c <read_float+0x124>
 80038da:	4658      	mov	r0, fp
 80038dc:	4641      	mov	r1, r8
 80038de:	f7fc ffd9 	bl	8000894 <__aeabi_fmul>
 80038e2:	3402      	adds	r4, #2
 80038e4:	b264      	sxtb	r4, r4
    while (exp <= -2) {
 80038e6:	1c63      	adds	r3, r4, #1
      fval *= 0.01f;
 80038e8:	4683      	mov	fp, r0
    while (exp <= -2) {
 80038ea:	dbf6      	blt.n	80038da <read_float+0x92>
 80038ec:	fa5f fa8a 	uxtb.w	sl, sl
 80038f0:	f1ca 03fe 	rsb	r3, sl, #254	; 0xfe
 80038f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80038f8:	449a      	add	sl, r3
 80038fa:	f10a 0a02 	add.w	sl, sl, #2
 80038fe:	fa4f fa8a 	sxtb.w	sl, sl
      exp += 2;
    }
    if (exp < 0) {
 8003902:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003906:	d026      	beq.n	8003956 <read_float+0x10e>
      fval *= 0.1f;
    } else if (exp > 0) {
 8003908:	f1ba 0f00 	cmp.w	sl, #0
 800390c:	d115      	bne.n	800393a <read_float+0xf2>
      } while (--exp > 0);
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 800390e:	9b01      	ldr	r3, [sp, #4]
 8003910:	b113      	cbz	r3, 8003918 <read_float+0xd0>
    *float_ptr = -fval;
 8003912:	f10b 4000 	add.w	r0, fp, #2147483648	; 0x80000000
 8003916:	4683      	mov	fp, r0
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 8003918:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 800391a:	eba9 0505 	sub.w	r5, r9, r5
 800391e:	3d01      	subs	r5, #1
 8003920:	f8c7 b000 	str.w	fp, [r7]
 8003924:	7035      	strb	r5, [r6, #0]
}
 8003926:	4620      	mov	r0, r4
 8003928:	b003      	add	sp, #12
 800392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    isnegative = true;
 800392e:	2201      	movs	r2, #1
    c = *ptr++;
 8003930:	784b      	ldrb	r3, [r1, #1]
 8003932:	f101 0902 	add.w	r9, r1, #2
    isnegative = true;
 8003936:	9201      	str	r2, [sp, #4]
 8003938:	e797      	b.n	800386a <read_float+0x22>
        fval *= 10.0f;
 800393a:	4c0a      	ldr	r4, [pc, #40]	; (8003964 <read_float+0x11c>)
 800393c:	4658      	mov	r0, fp
 800393e:	4621      	mov	r1, r4
 8003940:	f7fc ffa8 	bl	8000894 <__aeabi_fmul>
 8003944:	f10a 33ff 	add.w	r3, sl, #4294967295
      } while (--exp > 0);
 8003948:	f013 0fff 	tst.w	r3, #255	; 0xff
        fval *= 10.0f;
 800394c:	4683      	mov	fp, r0
      } while (--exp > 0);
 800394e:	fa4f fa83 	sxtb.w	sl, r3
 8003952:	d1f3      	bne.n	800393c <read_float+0xf4>
 8003954:	e7db      	b.n	800390e <read_float+0xc6>
      fval *= 0.1f;
 8003956:	4658      	mov	r0, fp
 8003958:	4903      	ldr	r1, [pc, #12]	; (8003968 <read_float+0x120>)
 800395a:	f7fc ff9b 	bl	8000894 <__aeabi_fmul>
 800395e:	4683      	mov	fp, r0
 8003960:	e7d5      	b.n	800390e <read_float+0xc6>
 8003962:	bf00      	nop
 8003964:	41200000 	.word	0x41200000
 8003968:	3dcccccd 	.word	0x3dcccccd
 800396c:	3c23d70a 	.word	0x3c23d70a

08003970 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	460d      	mov	r5, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8003974:	4918      	ldr	r1, [pc, #96]	; (80039d8 <delay_sec+0x68>)
 8003976:	f7fc ff8d 	bl	8000894 <__aeabi_fmul>
 800397a:	f005 fed1 	bl	8009720 <ceilf>
 800397e:	f7fd f98b 	bl	8000c98 <__aeabi_f2uiz>
 8003982:	b280      	uxth	r0, r0
	while (i-- > 0) {
 8003984:	b1a8      	cbz	r0, 80039b2 <delay_sec+0x42>
 8003986:	1e44      	subs	r4, r0, #1
 8003988:	b2a4      	uxth	r4, r4
 800398a:	b19d      	cbz	r5, 80039b4 <delay_sec+0x44>
 800398c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003990:	4d12      	ldr	r5, [pc, #72]	; (80039dc <delay_sec+0x6c>)
 8003992:	e00b      	b.n	80039ac <delay_sec+0x3c>
		if (sys.abort) { return; }
		if (mode == DELAY_MODE_DWELL) {
			protocol_execute_realtime();
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
 8003994:	f001 f8c2 	bl	8004b1c <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8003998:	78ab      	ldrb	r3, [r5, #2]
 800399a:	079b      	lsls	r3, r3, #30
 800399c:	d409      	bmi.n	80039b2 <delay_sec+0x42>
	while (i-- > 0) {
 800399e:	3c01      	subs	r4, #1
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 80039a0:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 80039a2:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 80039a4:	f7ff fc7a 	bl	800329c <_delay_ms>
	while (i-- > 0) {
 80039a8:	42b4      	cmp	r4, r6
 80039aa:	d002      	beq.n	80039b2 <delay_sec+0x42>
		if (sys.abort) { return; }
 80039ac:	786b      	ldrb	r3, [r5, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <delay_sec+0x24>
	}
}
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 80039b4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80039b8:	4d08      	ldr	r5, [pc, #32]	; (80039dc <delay_sec+0x6c>)
 80039ba:	e008      	b.n	80039ce <delay_sec+0x5e>
 80039bc:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 80039be:	f001 fbbd 	bl	800513c <protocol_execute_realtime>
	while (i-- > 0) {
 80039c2:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 80039c4:	2032      	movs	r0, #50	; 0x32
 80039c6:	f7ff fc69 	bl	800329c <_delay_ms>
	while (i-- > 0) {
 80039ca:	42b4      	cmp	r4, r6
 80039cc:	d0f1      	beq.n	80039b2 <delay_sec+0x42>
		if (sys.abort) { return; }
 80039ce:	786b      	ldrb	r3, [r5, #1]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f3      	beq.n	80039bc <delay_sec+0x4c>
}
 80039d4:	bd70      	pop	{r4, r5, r6, pc}
 80039d6:	bf00      	nop
 80039d8:	41a00000 	.word	0x41a00000
 80039dc:	20001314 	.word	0x20001314

080039e0 <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 80039e0:	b160      	cbz	r0, 80039fc <delay_ms+0x1c>
{
 80039e2:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 80039e4:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80039e8:	1e44      	subs	r4, r0, #1
 80039ea:	b2a4      	uxth	r4, r4
 80039ec:	3c01      	subs	r4, #1
 80039ee:	2001      	movs	r0, #1
 80039f0:	b2a4      	uxth	r4, r4
 80039f2:	f7ff fc53 	bl	800329c <_delay_ms>
 80039f6:	42ac      	cmp	r4, r5
 80039f8:	d1f8      	bne.n	80039ec <delay_ms+0xc>
}
 80039fa:	bd38      	pop	{r3, r4, r5, pc}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop

08003a00 <hypot_f>:


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8003a00:	b510      	push	{r4, lr}
 8003a02:	460c      	mov	r4, r1
 8003a04:	4601      	mov	r1, r0
 8003a06:	f7fc ff45 	bl	8000894 <__aeabi_fmul>
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	4608      	mov	r0, r1
 8003a10:	f7fc ff40 	bl	8000894 <__aeabi_fmul>
 8003a14:	4601      	mov	r1, r0
 8003a16:	4620      	mov	r0, r4
 8003a18:	f7fc fe34 	bl	8000684 <__addsf3>
 8003a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a20:	f005 bf98 	b.w	8009954 <sqrtf>

08003a24 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 8003a26:	6807      	ldr	r7, [r0, #0]
{
 8003a28:	4604      	mov	r4, r0
    if (vector[idx] != 0.0f) {
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	f7fd f8c5 	bl	8000bbc <__aeabi_fcmpeq>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d13e      	bne.n	8003ab4 <convert_delta_vector_to_unit_vector+0x90>
      magnitude += vector[idx]*vector[idx];
 8003a36:	4639      	mov	r1, r7
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7fc ff2b 	bl	8000894 <__aeabi_fmul>
 8003a3e:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003a40:	6866      	ldr	r6, [r4, #4]
 8003a42:	2100      	movs	r1, #0
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7fd f8b9 	bl	8000bbc <__aeabi_fcmpeq>
 8003a4a:	b940      	cbnz	r0, 8003a5e <convert_delta_vector_to_unit_vector+0x3a>
      magnitude += vector[idx]*vector[idx];
 8003a4c:	4631      	mov	r1, r6
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f7fc ff20 	bl	8000894 <__aeabi_fmul>
 8003a54:	4601      	mov	r1, r0
 8003a56:	4628      	mov	r0, r5
 8003a58:	f7fc fe14 	bl	8000684 <__addsf3>
 8003a5c:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8003a5e:	68a6      	ldr	r6, [r4, #8]
 8003a60:	2100      	movs	r1, #0
 8003a62:	4630      	mov	r0, r6
 8003a64:	f7fd f8aa 	bl	8000bbc <__aeabi_fcmpeq>
 8003a68:	b940      	cbnz	r0, 8003a7c <convert_delta_vector_to_unit_vector+0x58>
      magnitude += vector[idx]*vector[idx];
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f7fc ff11 	bl	8000894 <__aeabi_fmul>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7fc fe05 	bl	8000684 <__addsf3>
 8003a7a:	4605      	mov	r5, r0
    }
  }
  magnitude = sqrtf(magnitude);
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f005 ff69 	bl	8009954 <sqrtf>
 8003a82:	4606      	mov	r6, r0
  float inv_magnitude = 1.0f/magnitude;
 8003a84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a88:	4631      	mov	r1, r6
 8003a8a:	f7fc ffb7 	bl	80009fc <__aeabi_fdiv>
 8003a8e:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003a90:	4638      	mov	r0, r7
 8003a92:	4629      	mov	r1, r5
 8003a94:	f7fc fefe 	bl	8000894 <__aeabi_fmul>
 8003a98:	4629      	mov	r1, r5
 8003a9a:	6020      	str	r0, [r4, #0]
 8003a9c:	6860      	ldr	r0, [r4, #4]
 8003a9e:	f7fc fef9 	bl	8000894 <__aeabi_fmul>
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	6060      	str	r0, [r4, #4]
 8003aa6:	68a0      	ldr	r0, [r4, #8]
 8003aa8:	f7fc fef4 	bl	8000894 <__aeabi_fmul>
 8003aac:	4603      	mov	r3, r0
  return(magnitude);
}
 8003aae:	4630      	mov	r0, r6
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8003ab0:	60a3      	str	r3, [r4, #8]
}
 8003ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float magnitude = 0.0f;
 8003ab4:	463d      	mov	r5, r7
 8003ab6:	e7c3      	b.n	8003a40 <convert_delta_vector_to_unit_vector+0x1c>

08003ab8 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003aba:	680d      	ldr	r5, [r1, #0]
{
 8003abc:	460c      	mov	r4, r1
 8003abe:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f7fd f87a 	bl	8000bbc <__aeabi_fcmpeq>
 8003ac8:	bb70      	cbnz	r0, 8003b28 <limit_value_by_axis_maximum+0x70>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003aca:	4629      	mov	r1, r5
 8003acc:	6830      	ldr	r0, [r6, #0]
 8003ace:	f7fc ff95 	bl	80009fc <__aeabi_fdiv>
 8003ad2:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	4917      	ldr	r1, [pc, #92]	; (8003b38 <limit_value_by_axis_maximum+0x80>)
 8003ada:	f7fd f883 	bl	8000be4 <__aeabi_fcmple>
 8003ade:	b318      	cbz	r0, 8003b28 <limit_value_by_axis_maximum+0x70>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003ae0:	6867      	ldr	r7, [r4, #4]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	f7fd f869 	bl	8000bbc <__aeabi_fcmpeq>
 8003aea:	b950      	cbnz	r0, 8003b02 <limit_value_by_axis_maximum+0x4a>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003aec:	4639      	mov	r1, r7
 8003aee:	6870      	ldr	r0, [r6, #4]
 8003af0:	f7fc ff84 	bl	80009fc <__aeabi_fdiv>
 8003af4:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8003af8:	4639      	mov	r1, r7
 8003afa:	4628      	mov	r0, r5
 8003afc:	f7fd f872 	bl	8000be4 <__aeabi_fcmple>
 8003b00:	b1b8      	cbz	r0, 8003b32 <limit_value_by_axis_maximum+0x7a>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8003b02:	68a4      	ldr	r4, [r4, #8]
 8003b04:	2100      	movs	r1, #0
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7fd f858 	bl	8000bbc <__aeabi_fcmpeq>
 8003b0c:	b950      	cbnz	r0, 8003b24 <limit_value_by_axis_maximum+0x6c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003b0e:	4621      	mov	r1, r4
 8003b10:	68b0      	ldr	r0, [r6, #8]
 8003b12:	f7fc ff73 	bl	80009fc <__aeabi_fdiv>
 8003b16:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f7fd f861 	bl	8000be4 <__aeabi_fcmple>
 8003b22:	b118      	cbz	r0, 8003b2c <limit_value_by_axis_maximum+0x74>
    }
  }
  return(limit_value);
}
 8003b24:	4628      	mov	r0, r5
 8003b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 8003b28:	4d03      	ldr	r5, [pc, #12]	; (8003b38 <limit_value_by_axis_maximum+0x80>)
 8003b2a:	e7d9      	b.n	8003ae0 <limit_value_by_axis_maximum+0x28>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003b2c:	4625      	mov	r5, r4
}
 8003b2e:	4628      	mov	r0, r5
 8003b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8003b32:	463d      	mov	r5, r7
 8003b34:	e7e5      	b.n	8003b02 <limit_value_by_axis_maximum+0x4a>
 8003b36:	bf00      	nop
 8003b38:	7f7fffff 	.word	0x7f7fffff

08003b3c <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 8003b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8003b40:	4b7a      	ldr	r3, [pc, #488]	; (8003d2c <planner_recalculate+0x1f0>)
{
 8003b42:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	9300      	str	r3, [sp, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80ae 	beq.w	8003caa <planner_recalculate+0x16e>

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 8003b4e:	4a78      	ldr	r2, [pc, #480]	; (8003d30 <planner_recalculate+0x1f4>)
  block_index--;
 8003b50:	f103 38ff 	add.w	r8, r3, #4294967295
  if (block_index == block_buffer_planned) { return; }
 8003b54:	7814      	ldrb	r4, [r2, #0]
  block_index--;
 8003b56:	fa5f f888 	uxtb.w	r8, r8
  if (block_index == block_buffer_planned) { return; }
 8003b5a:	4544      	cmp	r4, r8
 8003b5c:	9201      	str	r2, [sp, #4]
 8003b5e:	f000 80a1 	beq.w	8003ca4 <planner_recalculate+0x168>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 8003b62:	2634      	movs	r6, #52	; 0x34
 8003b64:	4d73      	ldr	r5, [pc, #460]	; (8003d34 <planner_recalculate+0x1f8>)
 8003b66:	fb06 5608 	mla	r6, r6, r8, r5

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8003b6a:	6a31      	ldr	r1, [r6, #32]
 8003b6c:	69f0      	ldr	r0, [r6, #28]
 8003b6e:	f7fc fe91 	bl	8000894 <__aeabi_fmul>
 8003b72:	4601      	mov	r1, r0
 8003b74:	f7fc fd86 	bl	8000684 <__addsf3>
 8003b78:	f8d6 a018 	ldr.w	sl, [r6, #24]
 8003b7c:	4681      	mov	r9, r0
 8003b7e:	4651      	mov	r1, sl
 8003b80:	f7fd f830 	bl	8000be4 <__aeabi_fcmple>
 8003b84:	f106 0314 	add.w	r3, r6, #20
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	f000 80c0 	beq.w	8003d0e <planner_recalculate+0x1d2>
 8003b8e:	f04f 0b23 	mov.w	fp, #35	; 0x23
 8003b92:	f8c3 9000 	str.w	r9, [r3]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8003b96:	f1b8 0f00 	cmp.w	r8, #0
 8003b9a:	f040 80c1 	bne.w	8003d20 <planner_recalculate+0x1e4>

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8003b9e:	455c      	cmp	r4, fp
 8003ba0:	f000 80a1 	beq.w	8003ce6 <planner_recalculate+0x1aa>
    // Check if the first block is the tail. If so, notify stepper to update its current parameters.
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
  } else { // Three or more plan-able blocks
    while (block_index != block_buffer_planned) {
      next = current;
      current = &block_buffer[block_index];
 8003ba4:	f04f 0834 	mov.w	r8, #52	; 0x34
 8003ba8:	465f      	mov	r7, fp
 8003baa:	e027      	b.n	8003bfc <planner_recalculate+0xc0>
 8003bac:	b2df      	uxtb	r7, r3
      block_index = plan_prev_block_index(block_index);

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003bae:	4b62      	ldr	r3, [pc, #392]	; (8003d38 <planner_recalculate+0x1fc>)

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8003bb0:	fb08 5909 	mla	r9, r8, r9, r5
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	42bb      	cmp	r3, r7
 8003bb8:	d02e      	beq.n	8003c18 <planner_recalculate+0xdc>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8003bba:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8003bbe:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	f7fc fffa 	bl	8000bbc <__aeabi_fcmpeq>
 8003bc8:	b9b0      	cbnz	r0, 8003bf8 <planner_recalculate+0xbc>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8003bca:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8003bce:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003bd2:	f7fc fe5f 	bl	8000894 <__aeabi_fmul>
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	f7fc fd54 	bl	8000684 <__addsf3>
 8003bdc:	f8db 1014 	ldr.w	r1, [fp, #20]
 8003be0:	f7fc fd50 	bl	8000684 <__addsf3>
 8003be4:	4683      	mov	fp, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 8003be6:	4650      	mov	r0, sl
 8003be8:	4659      	mov	r1, fp
 8003bea:	f7fd f80f 	bl	8000c0c <__aeabi_fcmpgt>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	f000 8085 	beq.w	8003cfe <planner_recalculate+0x1c2>
          current->entry_speed_sqr = entry_speed_sqr;
 8003bf4:	f8c9 b014 	str.w	fp, [r9, #20]
    while (block_index != block_buffer_planned) {
 8003bf8:	42a7      	cmp	r7, r4
 8003bfa:	d012      	beq.n	8003c22 <planner_recalculate+0xe6>
      current = &block_buffer[block_index];
 8003bfc:	46b3      	mov	fp, r6
 8003bfe:	46b9      	mov	r9, r7
 8003c00:	fb08 5607 	mla	r6, r8, r7, r5
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8003c04:	1e7b      	subs	r3, r7, #1
 8003c06:	2f00      	cmp	r7, #0
 8003c08:	d1d0      	bne.n	8003bac <planner_recalculate+0x70>
 8003c0a:	2723      	movs	r7, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003c0c:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <planner_recalculate+0x1fc>)
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8003c0e:	fb08 5909 	mla	r9, r8, r9, r5
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	42bb      	cmp	r3, r7
 8003c16:	d1d0      	bne.n	8003bba <planner_recalculate+0x7e>
 8003c18:	f003 fad6 	bl	80071c8 <st_update_plan_block_parameters>
 8003c1c:	9b01      	ldr	r3, [sp, #4]
 8003c1e:	781c      	ldrb	r4, [r3, #0]
 8003c20:	e7cb      	b.n	8003bba <planner_recalculate+0x7e>
 8003c22:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <planner_recalculate+0x1f0>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	9300      	str	r3, [sp, #0]
  block_index++;
 8003c28:	1c66      	adds	r6, r4, #1
 8003c2a:	b2f6      	uxtb	r6, r6
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003c2c:	2e24      	cmp	r6, #36	; 0x24
 8003c2e:	bf08      	it	eq
 8003c30:	2600      	moveq	r6, #0
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8003c32:	f04f 0934 	mov.w	r9, #52	; 0x34
  block_index = plan_next_block_index(block_buffer_planned);
  while (block_index != block_buffer_head) {
 8003c36:	9b00      	ldr	r3, [sp, #0]
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8003c38:	fb09 5a04 	mla	sl, r9, r4, r5
  while (block_index != block_buffer_head) {
 8003c3c:	429e      	cmp	r6, r3
 8003c3e:	d031      	beq.n	8003ca4 <planner_recalculate+0x168>
    current = next;
    next = &block_buffer[block_index];
 8003c40:	fb09 5806 	mla	r8, r9, r6, r5

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8003c44:	f8da b014 	ldr.w	fp, [sl, #20]
 8003c48:	f8d8 7014 	ldr.w	r7, [r8, #20]
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f7fc ffdc 	bl	8000c0c <__aeabi_fcmpgt>
 8003c54:	b1a0      	cbz	r0, 8003c80 <planner_recalculate+0x144>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8003c56:	f8da 101c 	ldr.w	r1, [sl, #28]
 8003c5a:	f8da 0020 	ldr.w	r0, [sl, #32]
 8003c5e:	f7fc fe19 	bl	8000894 <__aeabi_fmul>
 8003c62:	4601      	mov	r1, r0
 8003c64:	f7fc fd0e 	bl	8000684 <__addsf3>
 8003c68:	4659      	mov	r1, fp
 8003c6a:	f7fc fd0b 	bl	8000684 <__addsf3>
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8003c6e:	4639      	mov	r1, r7
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8003c70:	4682      	mov	sl, r0
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8003c72:	f7fc ffad 	bl	8000bd0 <__aeabi_fcmplt>
 8003c76:	b118      	cbz	r0, 8003c80 <planner_recalculate+0x144>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8003c78:	4657      	mov	r7, sl
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8003c7a:	4634      	mov	r4, r6
 8003c7c:	f8c8 a014 	str.w	sl, [r8, #20]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8003c80:	fb09 5306 	mla	r3, r9, r6, r5
 8003c84:	4639      	mov	r1, r7
 8003c86:	6998      	ldr	r0, [r3, #24]
 8003c88:	f7fc ff98 	bl	8000bbc <__aeabi_fcmpeq>
  block_index++;
 8003c8c:	1c73      	adds	r3, r6, #1
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	bf18      	it	ne
 8003c92:	4634      	movne	r4, r6
  block_index++;
 8003c94:	b2de      	uxtb	r6, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003c96:	2e24      	cmp	r6, #36	; 0x24
  while (block_index != block_buffer_head) {
 8003c98:	9b00      	ldr	r3, [sp, #0]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003c9a:	d033      	beq.n	8003d04 <planner_recalculate+0x1c8>
  while (block_index != block_buffer_head) {
 8003c9c:	429e      	cmp	r6, r3
 8003c9e:	d134      	bne.n	8003d0a <planner_recalculate+0x1ce>
 8003ca0:	9b01      	ldr	r3, [sp, #4]
 8003ca2:	701c      	strb	r4, [r3, #0]
    block_index = plan_next_block_index( block_index );
  }
}
 8003ca4:	b003      	add	sp, #12
 8003ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <planner_recalculate+0x1f4>)
 8003cac:	781c      	ldrb	r4, [r3, #0]
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	2c23      	cmp	r4, #35	; 0x23
 8003cb2:	d0f7      	beq.n	8003ca4 <planner_recalculate+0x168>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8003cb4:	4d1f      	ldr	r5, [pc, #124]	; (8003d34 <planner_recalculate+0x1f8>)
 8003cb6:	f8d5 1738 	ldr.w	r1, [r5, #1848]	; 0x738
 8003cba:	f8d5 073c 	ldr.w	r0, [r5, #1852]	; 0x73c
 8003cbe:	f7fc fde9 	bl	8000894 <__aeabi_fmul>
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	f7fc fcde 	bl	8000684 <__addsf3>
 8003cc8:	f8d5 8734 	ldr.w	r8, [r5, #1844]	; 0x734
 8003ccc:	4606      	mov	r6, r0
 8003cce:	4641      	mov	r1, r8
 8003cd0:	f7fc ff88 	bl	8000be4 <__aeabi_fcmple>
 8003cd4:	b1e8      	cbz	r0, 8003d12 <planner_recalculate+0x1d6>
 8003cd6:	f04f 0b22 	mov.w	fp, #34	; 0x22
 8003cda:	f8c5 6730 	str.w	r6, [r5, #1840]	; 0x730
  plan_block_t *current = &block_buffer[block_index];
 8003cde:	4e17      	ldr	r6, [pc, #92]	; (8003d3c <planner_recalculate+0x200>)
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8003ce0:	455c      	cmp	r4, fp
 8003ce2:	f47f af5f 	bne.w	8003ba4 <planner_recalculate+0x68>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <planner_recalculate+0x1fc>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	d19c      	bne.n	8003c28 <planner_recalculate+0xec>
 8003cee:	f003 fa6b 	bl	80071c8 <st_update_plan_block_parameters>
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <planner_recalculate+0x1f0>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	9b01      	ldr	r3, [sp, #4]
 8003cfa:	781c      	ldrb	r4, [r3, #0]
 8003cfc:	e794      	b.n	8003c28 <planner_recalculate+0xec>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 8003cfe:	f8c9 a014 	str.w	sl, [r9, #20]
 8003d02:	e779      	b.n	8003bf8 <planner_recalculate+0xbc>
  while (block_index != block_buffer_head) {
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0cb      	beq.n	8003ca0 <planner_recalculate+0x164>
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003d08:	2600      	movs	r6, #0
    next = &block_buffer[block_index];
 8003d0a:	46c2      	mov	sl, r8
 8003d0c:	e798      	b.n	8003c40 <planner_recalculate+0x104>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8003d0e:	46d1      	mov	r9, sl
 8003d10:	e73d      	b.n	8003b8e <planner_recalculate+0x52>
 8003d12:	4646      	mov	r6, r8
 8003d14:	f04f 0b22 	mov.w	fp, #34	; 0x22
 8003d18:	f8c5 6730 	str.w	r6, [r5, #1840]	; 0x730
  plan_block_t *current = &block_buffer[block_index];
 8003d1c:	4e07      	ldr	r6, [pc, #28]	; (8003d3c <planner_recalculate+0x200>)
 8003d1e:	e7df      	b.n	8003ce0 <planner_recalculate+0x1a4>
 8003d20:	9b00      	ldr	r3, [sp, #0]
 8003d22:	3b02      	subs	r3, #2
 8003d24:	fa5f fb83 	uxtb.w	fp, r3
 8003d28:	e739      	b.n	8003b9e <planner_recalculate+0x62>
 8003d2a:	bf00      	nop
 8003d2c:	20000c8c 	.word	0x20000c8c
 8003d30:	20000c8d 	.word	0x20000c8d
 8003d34:	2000053c 	.word	0x2000053c
 8003d38:	20000c8e 	.word	0x20000c8e
 8003d3c:	20000c58 	.word	0x20000c58

08003d40 <plan_reset>:


void plan_reset()
{
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8003d40:	2300      	movs	r3, #0

void plan_reset_buffer()
{
  block_buffer_tail = 0;
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8003d42:	2001      	movs	r0, #1
{
 8003d44:	b430      	push	{r4, r5}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8003d46:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <plan_reset+0x2c>)
  block_buffer_tail = 0;
 8003d48:	4909      	ldr	r1, [pc, #36]	; (8003d70 <plan_reset+0x30>)
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8003d4a:	e9c2 3300 	strd	r3, r3, [r2]
  block_buffer_tail = 0;
 8003d4e:	700b      	strb	r3, [r1, #0]
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8003d50:	e9c2 3302 	strd	r3, r3, [r2, #8]
 8003d54:	e9c2 3304 	strd	r3, r3, [r2, #16]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8003d58:	4906      	ldr	r1, [pc, #24]	; (8003d74 <plan_reset+0x34>)
  block_buffer_head = 0; // Empty = tail
 8003d5a:	4d07      	ldr	r5, [pc, #28]	; (8003d78 <plan_reset+0x38>)
  block_buffer_planned = 0; // = block_buffer_tail;
 8003d5c:	4c07      	ldr	r4, [pc, #28]	; (8003d7c <plan_reset+0x3c>)
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8003d5e:	6193      	str	r3, [r2, #24]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8003d60:	7008      	strb	r0, [r1, #0]
  block_buffer_head = 0; // Empty = tail
 8003d62:	702b      	strb	r3, [r5, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 8003d64:	7023      	strb	r3, [r4, #0]
}
 8003d66:	bc30      	pop	{r4, r5}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000c90 	.word	0x20000c90
 8003d70:	20000c8e 	.word	0x20000c8e
 8003d74:	20000c8f 	.word	0x20000c8f
 8003d78:	20000c8c 	.word	0x20000c8c
 8003d7c:	20000c8d 	.word	0x20000c8d

08003d80 <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 8003d80:	490a      	ldr	r1, [pc, #40]	; (8003dac <plan_discard_current_block+0x2c>)
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <plan_discard_current_block+0x30>)
 8003d84:	780a      	ldrb	r2, [r1, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00d      	beq.n	8003da8 <plan_discard_current_block+0x28>
  block_index++;
 8003d8c:	1c53      	adds	r3, r2, #1
 8003d8e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003d90:	2b24      	cmp	r3, #36	; 0x24
 8003d92:	bf08      	it	eq
 8003d94:	2300      	moveq	r3, #0
{
 8003d96:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8003d98:	4806      	ldr	r0, [pc, #24]	; (8003db4 <plan_discard_current_block+0x34>)
    block_buffer_tail = block_index;
 8003d9a:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8003d9c:	7804      	ldrb	r4, [r0, #0]
 8003d9e:	4294      	cmp	r4, r2
 8003da0:	bf08      	it	eq
 8003da2:	7003      	strbeq	r3, [r0, #0]
  }
}
 8003da4:	bc10      	pop	{r4}
 8003da6:	4770      	bx	lr
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000c8e 	.word	0x20000c8e
 8003db0:	20000c8c 	.word	0x20000c8c
 8003db4:	20000c8d 	.word	0x20000c8d

08003db8 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8003db8:	2034      	movs	r0, #52	; 0x34
 8003dba:	4a03      	ldr	r2, [pc, #12]	; (8003dc8 <plan_get_system_motion_block+0x10>)
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <plan_get_system_motion_block+0x14>)
 8003dbe:	7812      	ldrb	r2, [r2, #0]
}
 8003dc0:	fb00 3002 	mla	r0, r0, r2, r3
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000c8c 	.word	0x20000c8c
 8003dcc:	2000053c 	.word	0x2000053c

08003dd0 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <plan_get_current_block+0x18>)
 8003dd2:	4a06      	ldr	r2, [pc, #24]	; (8003dec <plan_get_current_block+0x1c>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 8003dda:	bf1d      	ittte	ne
 8003ddc:	2234      	movne	r2, #52	; 0x34
 8003dde:	4804      	ldrne	r0, [pc, #16]	; (8003df0 <plan_get_current_block+0x20>)
 8003de0:	fb02 0003 	mlane	r0, r2, r3, r0
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8003de4:	2000      	moveq	r0, #0
}
 8003de6:	4770      	bx	lr
 8003de8:	20000c8e 	.word	0x20000c8e
 8003dec:	20000c8c 	.word	0x20000c8c
 8003df0:	2000053c 	.word	0x2000053c

08003df4 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 8003df8:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8003dfa:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003e00:	2b24      	cmp	r3, #36	; 0x24
 8003e02:	bf08      	it	eq
 8003e04:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d005      	beq.n	8003e16 <plan_get_exec_block_exit_speed_sqr+0x22>
  return( block_buffer[block_index].entry_speed_sqr );
 8003e0a:	2134      	movs	r1, #52	; 0x34
 8003e0c:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <plan_get_exec_block_exit_speed_sqr+0x30>)
 8003e0e:	fb01 2303 	mla	r3, r1, r3, r2
 8003e12:	6958      	ldr	r0, [r3, #20]
 8003e14:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8003e16:	2000      	movs	r0, #0
}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000c8e 	.word	0x20000c8e
 8003e20:	20000c8c 	.word	0x20000c8c
 8003e24:	2000053c 	.word	0x2000053c

08003e28 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <plan_check_full_buffer+0x14>)
 8003e2a:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <plan_check_full_buffer+0x18>)
 8003e2c:	7810      	ldrb	r0, [r2, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 8003e30:	1ac0      	subs	r0, r0, r3
 8003e32:	fab0 f080 	clz	r0, r0
 8003e36:	0940      	lsrs	r0, r0, #5
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000c8e 	.word	0x20000c8e
 8003e40:	20000c8f 	.word	0x20000c8f

08003e44 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 8003e44:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8003e46:	7c83      	ldrb	r3, [r0, #18]
  float nominal_speed = block->programmed_rate;
 8003e48:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8003e4a:	07da      	lsls	r2, r3, #31
 8003e4c:	d514      	bpl.n	8003e78 <plan_compute_profile_nominal_speed+0x34>
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <plan_compute_profile_nominal_speed+0x64>)
 8003e50:	7a58      	ldrb	r0, [r3, #9]
 8003e52:	f7fc fccb 	bl	80007ec <__aeabi_i2f>
 8003e56:	4915      	ldr	r1, [pc, #84]	; (8003eac <plan_compute_profile_nominal_speed+0x68>)
 8003e58:	f7fc fd1c 	bl	8000894 <__aeabi_fmul>
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f7fc fd19 	bl	8000894 <__aeabi_fmul>
 8003e62:	4604      	mov	r4, r0
  else {
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 8003e64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7fc fec5 	bl	8000bf8 <__aeabi_fcmpge>
 8003e6e:	b908      	cbnz	r0, 8003e74 <plan_compute_profile_nominal_speed+0x30>
 8003e70:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
  return(MINIMUM_FEED_RATE);
}
 8003e74:	4620      	mov	r0, r4
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8003e78:	075b      	lsls	r3, r3, #29
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	d40b      	bmi.n	8003e96 <plan_compute_profile_nominal_speed+0x52>
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <plan_compute_profile_nominal_speed+0x64>)
 8003e80:	7a18      	ldrb	r0, [r3, #8]
 8003e82:	f7fc fcb3 	bl	80007ec <__aeabi_i2f>
 8003e86:	4909      	ldr	r1, [pc, #36]	; (8003eac <plan_compute_profile_nominal_speed+0x68>)
 8003e88:	f7fc fd04 	bl	8000894 <__aeabi_fmul>
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f7fc fd00 	bl	8000894 <__aeabi_fmul>
 8003e94:	4605      	mov	r5, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8003e96:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f7fc fea2 	bl	8000be4 <__aeabi_fcmple>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d1df      	bne.n	8003e64 <plan_compute_profile_nominal_speed+0x20>
 8003ea4:	462c      	mov	r4, r5
 8003ea6:	e7dd      	b.n	8003e64 <plan_compute_profile_nominal_speed+0x20>
 8003ea8:	20001314 	.word	0x20001314
 8003eac:	3c23d70a 	.word	0x3c23d70a

08003eb0 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t block_index = block_buffer_tail;
 8003eb4:	4a39      	ldr	r2, [pc, #228]	; (8003f9c <plan_update_velocity_profile_parameters+0xec>)
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
  while (block_index != block_buffer_head) {
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <plan_update_velocity_profile_parameters+0xf0>)
  uint8_t block_index = block_buffer_tail;
 8003eb8:	7815      	ldrb	r5, [r2, #0]
  while (block_index != block_buffer_head) {
 8003eba:	781b      	ldrb	r3, [r3, #0]
{
 8003ebc:	b085      	sub	sp, #20
  while (block_index != block_buffer_head) {
 8003ebe:	429d      	cmp	r5, r3
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	d065      	beq.n	8003f90 <plan_update_velocity_profile_parameters+0xe0>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8003ec4:	4c37      	ldr	r4, [pc, #220]	; (8003fa4 <plan_update_velocity_profile_parameters+0xf4>)
    block = &block_buffer[block_index];
 8003ec6:	f04f 0a34 	mov.w	sl, #52	; 0x34
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8003eca:	7a20      	ldrb	r0, [r4, #8]
 8003ecc:	f7fc fc8e 	bl	80007ec <__aeabi_i2f>
 8003ed0:	4935      	ldr	r1, [pc, #212]	; (8003fa8 <plan_update_velocity_profile_parameters+0xf8>)
 8003ed2:	f7fc fcdf 	bl	8000894 <__aeabi_fmul>
 8003ed6:	4603      	mov	r3, r0
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8003ed8:	7a60      	ldrb	r0, [r4, #9]
 8003eda:	9303      	str	r3, [sp, #12]
 8003edc:	f7fc fc86 	bl	80007ec <__aeabi_i2f>
 8003ee0:	4931      	ldr	r1, [pc, #196]	; (8003fa8 <plan_update_velocity_profile_parameters+0xf8>)
 8003ee2:	f7fc fcd7 	bl	8000894 <__aeabi_fmul>
 8003ee6:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8003eea:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003fac <plan_update_velocity_profile_parameters+0xfc>
 8003eee:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8003fb4 <plan_update_velocity_profile_parameters+0x104>
 8003ef2:	9002      	str	r0, [sp, #8]
 8003ef4:	e024      	b.n	8003f40 <plan_update_velocity_profile_parameters+0x90>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8003ef6:	4639      	mov	r1, r7
 8003ef8:	9802      	ldr	r0, [sp, #8]
 8003efa:	f7fc fccb 	bl	8000894 <__aeabi_fmul>
 8003efe:	4604      	mov	r4, r0
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 8003f00:	4649      	mov	r1, r9
 8003f02:	4620      	mov	r0, r4
 8003f04:	f7fc fe78 	bl	8000bf8 <__aeabi_fcmpge>
 8003f08:	b900      	cbnz	r0, 8003f0c <plan_update_velocity_profile_parameters+0x5c>
 8003f0a:	464c      	mov	r4, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	4640      	mov	r0, r8
 8003f10:	f7fc fe5e 	bl	8000bd0 <__aeabi_fcmplt>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
 8003f14:	6a77      	ldr	r7, [r6, #36]	; 0x24
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d034      	beq.n	8003f84 <plan_update_velocity_profile_parameters+0xd4>
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	f7fc fcb9 	bl	8000894 <__aeabi_fmul>
 8003f22:	4680      	mov	r8, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8003f24:	4641      	mov	r1, r8
 8003f26:	4638      	mov	r0, r7
 8003f28:	f7fc fe52 	bl	8000bd0 <__aeabi_fcmplt>
 8003f2c:	b300      	cbz	r0, 8003f70 <plan_update_velocity_profile_parameters+0xc0>
  block_index++;
 8003f2e:	3501      	adds	r5, #1
 8003f30:	b2ed      	uxtb	r5, r5
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003f32:	2d24      	cmp	r5, #36	; 0x24
  while (block_index != block_buffer_head) {
 8003f34:	9b01      	ldr	r3, [sp, #4]
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8003f36:	61b7      	str	r7, [r6, #24]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003f38:	d021      	beq.n	8003f7e <plan_update_velocity_profile_parameters+0xce>
  while (block_index != block_buffer_head) {
 8003f3a:	42ab      	cmp	r3, r5
 8003f3c:	d029      	beq.n	8003f92 <plan_update_velocity_profile_parameters+0xe2>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8003f3e:	46a0      	mov	r8, r4
    block = &block_buffer[block_index];
 8003f40:	fb0a b605 	mla	r6, sl, r5, fp
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8003f44:	7cb3      	ldrb	r3, [r6, #18]
  float nominal_speed = block->programmed_rate;
 8003f46:	6af7      	ldr	r7, [r6, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8003f48:	07da      	lsls	r2, r3, #31
 8003f4a:	d4d4      	bmi.n	8003ef6 <plan_update_velocity_profile_parameters+0x46>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8003f4c:	075b      	lsls	r3, r3, #29
 8003f4e:	d404      	bmi.n	8003f5a <plan_update_velocity_profile_parameters+0xaa>
 8003f50:	4638      	mov	r0, r7
 8003f52:	9903      	ldr	r1, [sp, #12]
 8003f54:	f7fc fc9e 	bl	8000894 <__aeabi_fmul>
 8003f58:	4607      	mov	r7, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8003f5a:	fb0a b305 	mla	r3, sl, r5, fp
 8003f5e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003f60:	4639      	mov	r1, r7
 8003f62:	4620      	mov	r0, r4
 8003f64:	f7fc fe3e 	bl	8000be4 <__aeabi_fcmple>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d1c9      	bne.n	8003f00 <plan_update_velocity_profile_parameters+0x50>
 8003f6c:	463c      	mov	r4, r7
 8003f6e:	e7c7      	b.n	8003f00 <plan_update_velocity_profile_parameters+0x50>
  block_index++;
 8003f70:	3501      	adds	r5, #1
 8003f72:	b2ed      	uxtb	r5, r5
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003f74:	2d24      	cmp	r5, #36	; 0x24
  while (block_index != block_buffer_head) {
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	f8c6 8018 	str.w	r8, [r6, #24]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003f7c:	d1dd      	bne.n	8003f3a <plan_update_velocity_profile_parameters+0x8a>
  while (block_index != block_buffer_head) {
 8003f7e:	b143      	cbz	r3, 8003f92 <plan_update_velocity_profile_parameters+0xe2>
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8003f80:	2500      	movs	r5, #0
 8003f82:	e7dc      	b.n	8003f3e <plan_update_velocity_profile_parameters+0x8e>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8003f84:	4621      	mov	r1, r4
 8003f86:	4620      	mov	r0, r4
 8003f88:	f7fc fc84 	bl	8000894 <__aeabi_fmul>
 8003f8c:	4680      	mov	r8, r0
 8003f8e:	e7c9      	b.n	8003f24 <plan_update_velocity_profile_parameters+0x74>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8003f90:	4c06      	ldr	r4, [pc, #24]	; (8003fac <plan_update_velocity_profile_parameters+0xfc>)
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <plan_update_velocity_profile_parameters+0x100>)
 8003f94:	619c      	str	r4, [r3, #24]
}
 8003f96:	b005      	add	sp, #20
 8003f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f9c:	20000c8e 	.word	0x20000c8e
 8003fa0:	20000c8c 	.word	0x20000c8c
 8003fa4:	20001314 	.word	0x20001314
 8003fa8:	3c23d70a 	.word	0x3c23d70a
 8003fac:	7f7fffff 	.word	0x7f7fffff
 8003fb0:	20000c90 	.word	0x20000c90
 8003fb4:	2000053c 	.word	0x2000053c

08003fb8 <plan_buffer_line>:
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 8003fb8:	2234      	movs	r2, #52	; 0x34
{
 8003fba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbe:	468a      	mov	sl, r1
 8003fc0:	4683      	mov	fp, r0
  plan_block_t *block = &block_buffer[block_buffer_head];
 8003fc2:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8004288 <plan_buffer_line+0x2d0>
 8003fc6:	4da4      	ldr	r5, [pc, #656]	; (8004258 <plan_buffer_line+0x2a0>)
 8003fc8:	f898 6000 	ldrb.w	r6, [r8]
{
 8003fcc:	b091      	sub	sp, #68	; 0x44
  plan_block_t *block = &block_buffer[block_buffer_head];
 8003fce:	fb02 5406 	mla	r4, r2, r6, r5
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f005 fb35 	bl	8009644 <memset>
  block->condition = pl_data->condition;
 8003fda:	f89a 3008 	ldrb.w	r3, [sl, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8003fde:	f8da 2004 	ldr.w	r2, [sl, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 8003fe2:	0798      	lsls	r0, r3, #30
    block->spindle_speed = pl_data->spindle_speed;
 8003fe4:	6322      	str	r2, [r4, #48]	; 0x30
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8003fe6:	4f9d      	ldr	r7, [pc, #628]	; (800425c <plan_buffer_line+0x2a4>)
    memcpy(position_steps, sys_position, sizeof(sys_position));
 8003fe8:	bf4c      	ite	mi
 8003fea:	4a9d      	ldrmi	r2, [pc, #628]	; (8004260 <plan_buffer_line+0x2a8>)
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8003fec:	4a9d      	ldrpl	r2, [pc, #628]	; (8004264 <plan_buffer_line+0x2ac>)
  block->condition = pl_data->condition;
 8003fee:	74a3      	strb	r3, [r4, #18]
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8003ff0:	ab07      	add	r3, sp, #28
 8003ff2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ff4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	f8db 1000 	ldr.w	r1, [fp]
 8003ffe:	4610      	mov	r0, r2
 8004000:	9200      	str	r2, [sp, #0]
 8004002:	f7fc fc47 	bl	8000894 <__aeabi_fmul>
 8004006:	f005 fc41 	bl	800988c <lroundf>
 800400a:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800400c:	9807      	ldr	r0, [sp, #28]
 800400e:	2334      	movs	r3, #52	; 0x34
 8004010:	1a08      	subs	r0, r1, r0
 8004012:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8004016:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 800401a:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800401e:	45e1      	cmp	r9, ip
 8004020:	bf38      	it	cc
 8004022:	46e1      	movcc	r9, ip
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004024:	fb03 f306 	mul.w	r3, r3, r6
 8004028:	f845 c003 	str.w	ip, [r5, r3]
 800402c:	442b      	add	r3, r5
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800402e:	f8c3 900c 	str.w	r9, [r3, #12]
 8004032:	9301      	str	r3, [sp, #4]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004034:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004036:	f7fc fbd9 	bl	80007ec <__aeabi_i2f>
 800403a:	9a00      	ldr	r2, [sp, #0]
 800403c:	4611      	mov	r1, r2
 800403e:	f7fc fcdd 	bl	80009fc <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004042:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004044:	900a      	str	r0, [sp, #40]	; 0x28
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004046:	f7fc fdc3 	bl	8000bd0 <__aeabi_fcmplt>
 800404a:	b128      	cbz	r0, 8004058 <plan_buffer_line+0xa0>
 800404c:	9b01      	ldr	r3, [sp, #4]
 800404e:	4a86      	ldr	r2, [pc, #536]	; (8004268 <plan_buffer_line+0x2b0>)
 8004050:	8a19      	ldrh	r1, [r3, #16]
 8004052:	8812      	ldrh	r2, [r2, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	821a      	strh	r2, [r3, #16]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	f8db 1004 	ldr.w	r1, [fp, #4]
 800405e:	4610      	mov	r0, r2
 8004060:	9200      	str	r2, [sp, #0]
 8004062:	f7fc fc17 	bl	8000894 <__aeabi_fmul>
 8004066:	f005 fc11 	bl	800988c <lroundf>
 800406a:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800406c:	9808      	ldr	r0, [sp, #32]
 800406e:	2334      	movs	r3, #52	; 0x34
 8004070:	1a08      	subs	r0, r1, r0
 8004072:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 8004076:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800407a:	45e1      	cmp	r9, ip
 800407c:	bf38      	it	cc
 800407e:	46e1      	movcc	r9, ip
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004080:	fb03 5306 	mla	r3, r3, r6, r5
 8004084:	f8c3 c004 	str.w	ip, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004088:	f8c3 900c 	str.w	r9, [r3, #12]
 800408c:	9301      	str	r3, [sp, #4]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800408e:	9105      	str	r1, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004090:	f7fc fbac 	bl	80007ec <__aeabi_i2f>
 8004094:	9a00      	ldr	r2, [sp, #0]
 8004096:	4611      	mov	r1, r2
 8004098:	f7fc fcb0 	bl	80009fc <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800409c:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800409e:	900b      	str	r0, [sp, #44]	; 0x2c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80040a0:	f7fc fd96 	bl	8000bd0 <__aeabi_fcmplt>
 80040a4:	b128      	cbz	r0, 80040b2 <plan_buffer_line+0xfa>
 80040a6:	9b01      	ldr	r3, [sp, #4]
 80040a8:	4a6f      	ldr	r2, [pc, #444]	; (8004268 <plan_buffer_line+0x2b0>)
 80040aa:	8a19      	ldrh	r1, [r3, #16]
 80040ac:	8852      	ldrh	r2, [r2, #2]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	821a      	strh	r2, [r3, #16]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f8db 1008 	ldr.w	r1, [fp, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f7fc fbea 	bl	8000894 <__aeabi_fmul>
 80040c0:	f005 fbe4 	bl	800988c <lroundf>
 80040c4:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80040c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040c8:	f04f 0b34 	mov.w	fp, #52	; 0x34
 80040cc:	1a10      	subs	r0, r2, r0
 80040ce:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80040d2:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80040d6:	4589      	cmp	r9, r1
 80040d8:	bf38      	it	cc
 80040da:	4689      	movcc	r9, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80040dc:	fb0b 5b06 	mla	fp, fp, r6, r5
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80040e0:	e9cb 1902 	strd	r1, r9, [fp, #8]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80040e4:	9206      	str	r2, [sp, #24]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80040e6:	f7fc fb81 	bl	80007ec <__aeabi_i2f>
 80040ea:	9b00      	ldr	r3, [sp, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f7fc fc85 	bl	80009fc <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80040f2:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80040f4:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80040f6:	f7fc fd6b 	bl	8000bd0 <__aeabi_fcmplt>
 80040fa:	b930      	cbnz	r0, 800410a <plan_buffer_line+0x152>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 80040fc:	f1b9 0f00 	cmp.w	r9, #0
 8004100:	d10d      	bne.n	800411e <plan_buffer_line+0x166>
 8004102:	4648      	mov	r0, r9

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 8004104:	b011      	add	sp, #68	; 0x44
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800410a:	4b57      	ldr	r3, [pc, #348]	; (8004268 <plan_buffer_line+0x2b0>)
 800410c:	f8bb 2010 	ldrh.w	r2, [fp, #16]
 8004110:	889b      	ldrh	r3, [r3, #4]
 8004112:	4313      	orrs	r3, r2
 8004114:	f8ab 3010 	strh.w	r3, [fp, #16]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004118:	f1b9 0f00 	cmp.w	r9, #0
 800411c:	d0f1      	beq.n	8004102 <plan_buffer_line+0x14a>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 800411e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004122:	4648      	mov	r0, r9
 8004124:	f7ff fc7e 	bl	8003a24 <convert_delta_vector_to_unit_vector>
 8004128:	f04f 0b34 	mov.w	fp, #52	; 0x34
 800412c:	4603      	mov	r3, r0
 800412e:	fb0b 5b06 	mla	fp, fp, r6, r5
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004132:	4649      	mov	r1, r9
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8004134:	f8cb 3020 	str.w	r3, [fp, #32]
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004138:	484c      	ldr	r0, [pc, #304]	; (800426c <plan_buffer_line+0x2b4>)
 800413a:	f7ff fcbd 	bl	8003ab8 <limit_value_by_axis_maximum>
 800413e:	4603      	mov	r3, r0
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004140:	4649      	mov	r1, r9
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004142:	f8cb 301c 	str.w	r3, [fp, #28]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004146:	484a      	ldr	r0, [pc, #296]	; (8004270 <plan_buffer_line+0x2b8>)
 8004148:	f7ff fcb6 	bl	8003ab8 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 800414c:	f89b 3012 	ldrb.w	r3, [fp, #18]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004150:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004154:	07d9      	lsls	r1, r3, #31
 8004156:	d56c      	bpl.n	8004232 <plan_buffer_line+0x27a>
 8004158:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 800415c:	4a45      	ldr	r2, [pc, #276]	; (8004274 <plan_buffer_line+0x2bc>)
 800415e:	f898 1000 	ldrb.w	r1, [r8]
 8004162:	7812      	ldrb	r2, [r2, #0]
 8004164:	4291      	cmp	r1, r2
 8004166:	d002      	beq.n	800416e <plan_buffer_line+0x1b6>
 8004168:	079b      	lsls	r3, r3, #30
 800416a:	f140 808f 	bpl.w	800428c <plan_buffer_line+0x2d4>
    block->entry_speed_sqr = 0.0f;
 800416e:	2334      	movs	r3, #52	; 0x34
 8004170:	2200      	movs	r2, #0
 8004172:	fb03 5306 	mla	r3, r3, r6, r5
 8004176:	615a      	str	r2, [r3, #20]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8004178:	625a      	str	r2, [r3, #36]	; 0x24
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 800417a:	2334      	movs	r3, #52	; 0x34
 800417c:	fb03 5306 	mla	r3, r3, r6, r5
 8004180:	7c9a      	ldrb	r2, [r3, #18]
 8004182:	0790      	lsls	r0, r2, #30
 8004184:	d464      	bmi.n	8004250 <plan_buffer_line+0x298>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004186:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 8004188:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800418a:	f100 80cf 	bmi.w	800432c <plan_buffer_line+0x374>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800418e:	0753      	lsls	r3, r2, #29
 8004190:	d40a      	bmi.n	80041a8 <plan_buffer_line+0x1f0>
 8004192:	4b39      	ldr	r3, [pc, #228]	; (8004278 <plan_buffer_line+0x2c0>)
 8004194:	7a18      	ldrb	r0, [r3, #8]
 8004196:	f7fc fb29 	bl	80007ec <__aeabi_i2f>
 800419a:	4639      	mov	r1, r7
 800419c:	f7fc fb7a 	bl	8000894 <__aeabi_fmul>
 80041a0:	4936      	ldr	r1, [pc, #216]	; (800427c <plan_buffer_line+0x2c4>)
 80041a2:	f7fc fb77 	bl	8000894 <__aeabi_fmul>
 80041a6:	4607      	mov	r7, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80041a8:	2334      	movs	r3, #52	; 0x34
 80041aa:	fb03 5506 	mla	r5, r3, r6, r5
 80041ae:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80041b0:	4639      	mov	r1, r7
 80041b2:	4628      	mov	r0, r5
 80041b4:	f7fc fd16 	bl	8000be4 <__aeabi_fcmple>
 80041b8:	b900      	cbnz	r0, 80041bc <plan_buffer_line+0x204>
 80041ba:	463d      	mov	r5, r7
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 80041bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80041c0:	4628      	mov	r0, r5
 80041c2:	f7fc fd19 	bl	8000bf8 <__aeabi_fcmpge>
 80041c6:	b908      	cbnz	r0, 80041cc <plan_buffer_line+0x214>
 80041c8:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 80041cc:	4e25      	ldr	r6, [pc, #148]	; (8004264 <plan_buffer_line+0x2ac>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80041ce:	4629      	mov	r1, r5
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 80041d0:	69b7      	ldr	r7, [r6, #24]
 80041d2:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80041d6:	4638      	mov	r0, r7
 80041d8:	f7fc fcfa 	bl	8000bd0 <__aeabi_fcmplt>
 80041dc:	2800      	cmp	r0, #0
 80041de:	f000 80b4 	beq.w	800434a <plan_buffer_line+0x392>
 80041e2:	4639      	mov	r1, r7
 80041e4:	4638      	mov	r0, r7
 80041e6:	f7fc fb55 	bl	8000894 <__aeabi_fmul>
 80041ea:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80041ec:	4639      	mov	r1, r7
 80041ee:	4650      	mov	r0, sl
 80041f0:	f7fc fcee 	bl	8000bd0 <__aeabi_fcmplt>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	f040 80a5 	bne.w	8004344 <plan_buffer_line+0x38c>
 80041fa:	61a7      	str	r7, [r4, #24]
    block_buffer_head = next_buffer_head;
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <plan_buffer_line+0x2c8>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 80041fe:	4f21      	ldr	r7, [pc, #132]	; (8004284 <plan_buffer_line+0x2cc>)
    block_buffer_head = next_buffer_head;
 8004200:	7811      	ldrb	r1, [r2, #0]
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004202:	ac04      	add	r4, sp, #16
  block_index++;
 8004204:	1c4b      	adds	r3, r1, #1
 8004206:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004208:	2b24      	cmp	r3, #36	; 0x24
 800420a:	bf08      	it	eq
 800420c:	2300      	moveq	r3, #0
    pl.previous_nominal_speed = nominal_speed;
 800420e:	61b5      	str	r5, [r6, #24]
    block_buffer_head = next_buffer_head;
 8004210:	f888 1000 	strb.w	r1, [r8]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8004214:	7013      	strb	r3, [r2, #0]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004216:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800421a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 800421e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004222:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    planner_recalculate();
 8004226:	f7ff fc89 	bl	8003b3c <planner_recalculate>
  return(PLAN_OK);
 800422a:	2001      	movs	r0, #1
}
 800422c:	b011      	add	sp, #68	; 0x44
 800422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    block->programmed_rate = pl_data->feed_rate;
 8004232:	f8da 1000 	ldr.w	r1, [sl]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004236:	071a      	lsls	r2, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 8004238:	f8cb 102c 	str.w	r1, [fp, #44]	; 0x2c
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 800423c:	d58e      	bpl.n	800415c <plan_buffer_line+0x1a4>
 800423e:	f8db 0020 	ldr.w	r0, [fp, #32]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	f7fc fb26 	bl	8000894 <__aeabi_fmul>
 8004248:	9b00      	ldr	r3, [sp, #0]
 800424a:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
 800424e:	e785      	b.n	800415c <plan_buffer_line+0x1a4>
  return(PLAN_OK);
 8004250:	2001      	movs	r0, #1
}
 8004252:	b011      	add	sp, #68	; 0x44
 8004254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004258:	2000053c 	.word	0x2000053c
 800425c:	200014c8 	.word	0x200014c8
 8004260:	20001338 	.word	0x20001338
 8004264:	20000c90 	.word	0x20000c90
 8004268:	0800aa50 	.word	0x0800aa50
 800426c:	200014e0 	.word	0x200014e0
 8004270:	200014d4 	.word	0x200014d4
 8004274:	20000c8e 	.word	0x20000c8e
 8004278:	20001314 	.word	0x20001314
 800427c:	3c23d70a 	.word	0x3c23d70a
 8004280:	20000c8f 	.word	0x20000c8f
 8004284:	20000c9c 	.word	0x20000c9c
 8004288:	20000c8c 	.word	0x20000c8c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800428c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004400 <plan_buffer_line+0x448>
 8004290:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004294:	f8db 300c 	ldr.w	r3, [fp, #12]
 8004298:	4651      	mov	r1, sl
 800429a:	4618      	mov	r0, r3
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f7fc faf9 	bl	8000894 <__aeabi_fmul>
 80042a2:	4602      	mov	r2, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80042a4:	9b00      	ldr	r3, [sp, #0]
 80042a6:	4650      	mov	r0, sl
 80042a8:	4619      	mov	r1, r3
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80042aa:	9200      	str	r2, [sp, #0]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80042ac:	f7fc f9e8 	bl	8000680 <__aeabi_fsub>
 80042b0:	4602      	mov	r2, r0
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80042b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80042b6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80042ba:	4619      	mov	r1, r3
 80042bc:	4650      	mov	r0, sl
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80042be:	920d      	str	r2, [sp, #52]	; 0x34
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	f7fc fae7 	bl	8000894 <__aeabi_fmul>
 80042c6:	9b00      	ldr	r3, [sp, #0]
 80042c8:	4601      	mov	r1, r0
 80042ca:	9003      	str	r0, [sp, #12]
 80042cc:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 80042d0:	f7fc f9d6 	bl	8000680 <__aeabi_fsub>
 80042d4:	4602      	mov	r2, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80042d6:	9b01      	ldr	r3, [sp, #4]
 80042d8:	4650      	mov	r0, sl
 80042da:	4619      	mov	r1, r3
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80042dc:	4692      	mov	sl, r2
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80042de:	f7fc f9cf 	bl	8000680 <__aeabi_fsub>
 80042e2:	4684      	mov	ip, r0
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80042e4:	f8db 2014 	ldr.w	r2, [fp, #20]
 80042e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	9202      	str	r2, [sp, #8]
 80042f0:	9301      	str	r3, [sp, #4]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 80042f2:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80042f6:	f7fc facd 	bl	8000894 <__aeabi_fmul>
 80042fa:	4683      	mov	fp, r0
 80042fc:	4650      	mov	r0, sl
 80042fe:	4659      	mov	r1, fp
 8004300:	f7fc f9be 	bl	8000680 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004304:	9b01      	ldr	r3, [sp, #4]
 8004306:	9a02      	ldr	r2, [sp, #8]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004308:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc f9b7 	bl	8000680 <__aeabi_fsub>
 8004312:	4603      	mov	r3, r0
    if (junction_cos_theta > 0.999999f) {
 8004314:	4934      	ldr	r1, [pc, #208]	; (80043e8 <plan_buffer_line+0x430>)
 8004316:	4650      	mov	r0, sl
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004318:	930f      	str	r3, [sp, #60]	; 0x3c
    if (junction_cos_theta > 0.999999f) {
 800431a:	f7fc fc77 	bl	8000c0c <__aeabi_fcmpgt>
 800431e:	b1d0      	cbz	r0, 8004356 <plan_buffer_line+0x39e>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8004320:	2334      	movs	r3, #52	; 0x34
 8004322:	2200      	movs	r2, #0
 8004324:	fb03 5306 	mla	r3, r3, r6, r5
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
 800432a:	e726      	b.n	800417a <plan_buffer_line+0x1c2>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800432c:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <plan_buffer_line+0x434>)
 800432e:	7a58      	ldrb	r0, [r3, #9]
 8004330:	f7fc fa5c 	bl	80007ec <__aeabi_i2f>
 8004334:	4639      	mov	r1, r7
 8004336:	f7fc faad 	bl	8000894 <__aeabi_fmul>
 800433a:	492d      	ldr	r1, [pc, #180]	; (80043f0 <plan_buffer_line+0x438>)
 800433c:	f7fc faaa 	bl	8000894 <__aeabi_fmul>
 8004340:	4605      	mov	r5, r0
 8004342:	e73b      	b.n	80041bc <plan_buffer_line+0x204>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004344:	f8c4 a018 	str.w	sl, [r4, #24]
 8004348:	e758      	b.n	80041fc <plan_buffer_line+0x244>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 800434a:	4629      	mov	r1, r5
 800434c:	4628      	mov	r0, r5
 800434e:	f7fc faa1 	bl	8000894 <__aeabi_fmul>
 8004352:	4607      	mov	r7, r0
 8004354:	e74a      	b.n	80041ec <plan_buffer_line+0x234>
      if (junction_cos_theta < -0.999999f) {
 8004356:	4650      	mov	r0, sl
 8004358:	4926      	ldr	r1, [pc, #152]	; (80043f4 <plan_buffer_line+0x43c>)
 800435a:	f7fc fc39 	bl	8000bd0 <__aeabi_fcmplt>
 800435e:	b128      	cbz	r0, 800436c <plan_buffer_line+0x3b4>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004360:	2334      	movs	r3, #52	; 0x34
 8004362:	fb03 5306 	mla	r3, r3, r6, r5
 8004366:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <plan_buffer_line+0x440>)
 8004368:	625a      	str	r2, [r3, #36]	; 0x24
 800436a:	e706      	b.n	800417a <plan_buffer_line+0x1c2>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 800436c:	a80d      	add	r0, sp, #52	; 0x34
 800436e:	f7ff fb59 	bl	8003a24 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004372:	a90d      	add	r1, sp, #52	; 0x34
 8004374:	4821      	ldr	r0, [pc, #132]	; (80043fc <plan_buffer_line+0x444>)
 8004376:	f7ff fb9f 	bl	8003ab8 <limit_value_by_axis_maximum>
 800437a:	4603      	mov	r3, r0
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 800437c:	9900      	ldr	r1, [sp, #0]
 800437e:	9803      	ldr	r0, [sp, #12]
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004380:	9300      	str	r3, [sp, #0]
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004382:	f7fc f97f 	bl	8000684 <__addsf3>
 8004386:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800438a:	4682      	mov	sl, r0
 800438c:	4658      	mov	r0, fp
 800438e:	f7fc f979 	bl	8000684 <__addsf3>
 8004392:	4601      	mov	r1, r0
 8004394:	4650      	mov	r0, sl
 8004396:	f7fc f975 	bl	8000684 <__addsf3>
 800439a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800439e:	f7fc fa79 	bl	8000894 <__aeabi_fmul>
 80043a2:	f005 fad7 	bl	8009954 <sqrtf>
 80043a6:	4682      	mov	sl, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 80043a8:	9b00      	ldr	r3, [sp, #0]
 80043aa:	4651      	mov	r1, sl
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc fa71 	bl	8000894 <__aeabi_fmul>
 80043b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043b4:	f7fc fa6e 	bl	8000894 <__aeabi_fmul>
 80043b8:	4651      	mov	r1, sl
 80043ba:	4607      	mov	r7, r0
 80043bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80043c0:	f7fc f95e 	bl	8000680 <__aeabi_fsub>
 80043c4:	4601      	mov	r1, r0
 80043c6:	4638      	mov	r0, r7
 80043c8:	f7fc fb18 	bl	80009fc <__aeabi_fdiv>
 80043cc:	f04f 0b34 	mov.w	fp, #52	; 0x34
 80043d0:	2100      	movs	r1, #0
 80043d2:	4607      	mov	r7, r0
 80043d4:	fb0b 5b06 	mla	fp, fp, r6, r5
 80043d8:	f7fc fc0e 	bl	8000bf8 <__aeabi_fcmpge>
 80043dc:	b900      	cbnz	r0, 80043e0 <plan_buffer_line+0x428>
 80043de:	2700      	movs	r7, #0
 80043e0:	f8cb 7024 	str.w	r7, [fp, #36]	; 0x24
 80043e4:	e6c9      	b.n	800417a <plan_buffer_line+0x1c2>
 80043e6:	bf00      	nop
 80043e8:	3f7fffef 	.word	0x3f7fffef
 80043ec:	20001314 	.word	0x20001314
 80043f0:	3c23d70a 	.word	0x3c23d70a
 80043f4:	bf7fffef 	.word	0xbf7fffef
 80043f8:	7f7fffff 	.word	0x7f7fffff
 80043fc:	200014e0 	.word	0x200014e0
 8004400:	20000c90 	.word	0x20000c90

08004404 <plan_sync_position>:
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8004404:	4a04      	ldr	r2, [pc, #16]	; (8004418 <plan_sync_position+0x14>)
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <plan_sync_position+0x18>)
 8004408:	e9d2 1000 	ldrd	r1, r0, [r2]
 800440c:	6892      	ldr	r2, [r2, #8]
 800440e:	e9c3 1000 	strd	r1, r0, [r3]
 8004412:	609a      	str	r2, [r3, #8]
    #endif
  }
}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20001338 	.word	0x20001338
 800441c:	20000c90 	.word	0x20000c90

08004420 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004420:	4a06      	ldr	r2, [pc, #24]	; (800443c <plan_get_block_buffer_available+0x1c>)
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <plan_get_block_buffer_available+0x20>)
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
  return((block_buffer_tail-block_buffer_head-1));
 800442a:	bf33      	iteet	cc
 800442c:	f103 30ff 	addcc.w	r0, r3, #4294967295
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004430:	3323      	addcs	r3, #35	; 0x23
 8004432:	1a98      	subcs	r0, r3, r2
  return((block_buffer_tail-block_buffer_head-1));
 8004434:	1a80      	subcc	r0, r0, r2
 8004436:	b2c0      	uxtb	r0, r0
}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000c8c 	.word	0x20000c8c
 8004440:	20000c8e 	.word	0x20000c8e

08004444 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004444:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004446:	f002 febf 	bl	80071c8 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 800444a:	4a04      	ldr	r2, [pc, #16]	; (800445c <plan_cycle_reinitialize+0x18>)
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <plan_cycle_reinitialize+0x1c>)
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004456:	f7ff bb71 	b.w	8003b3c <planner_recalculate>
 800445a:	bf00      	nop
 800445c:	20000c8e 	.word	0x20000c8e
 8004460:	20000c8d 	.word	0x20000c8d

08004464 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004464:	b510      	push	{r4, lr}
 8004466:	4604      	mov	r4, r0
  while (*s)
 8004468:	7800      	ldrb	r0, [r0, #0]
 800446a:	b128      	cbz	r0, 8004478 <printString+0x14>
    serial_write(*s++);
 800446c:	f001 fdf0 	bl	8006050 <serial_write>
  while (*s)
 8004470:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004474:	2800      	cmp	r0, #0
 8004476:	d1f9      	bne.n	800446c <printString+0x8>
}
 8004478:	bd10      	pop	{r4, pc}
 800447a:	bf00      	nop

0800447c <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 800447c:	2863      	cmp	r0, #99	; 0x63
{
 800447e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004480:	4604      	mov	r4, r0
  if (n >= 100) { // 100-255
 8004482:	d91d      	bls.n	80044c0 <print_uint8_base10+0x44>
    digit_a = '0' + n % 10;
    n /= 10;
 8004484:	4e1b      	ldr	r6, [pc, #108]	; (80044f4 <print_uint8_base10+0x78>)
 8004486:	fba6 3500 	umull	r3, r5, r6, r0
 800448a:	08ef      	lsrs	r7, r5, #3
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 800448c:	fba6 3607 	umull	r3, r6, r6, r7
 8004490:	08f6      	lsrs	r6, r6, #3
  }
  serial_write('0' + n);
 8004492:	f106 0030 	add.w	r0, r6, #48	; 0x30
    digit_b = '0' + n % 10;
 8004496:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800449a:	eba7 0646 	sub.w	r6, r7, r6, lsl #1
  serial_write('0' + n);
 800449e:	f001 fdd7 	bl	8006050 <serial_write>
    digit_b = '0' + n % 10;
 80044a2:	f106 0030 	add.w	r0, r6, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 80044a6:	b2c0      	uxtb	r0, r0
 80044a8:	f001 fdd2 	bl	8006050 <serial_write>
    digit_a = '0' + n % 10;
 80044ac:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80044b0:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
 80044b4:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 80044b6:	b2c0      	uxtb	r0, r0
}
 80044b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (digit_a) { serial_write(digit_a); }
 80044bc:	f001 bdc8 	b.w	8006050 <serial_write>
  if (n >= 10) { // 10-99
 80044c0:	2809      	cmp	r0, #9
 80044c2:	d806      	bhi.n	80044d2 <print_uint8_base10+0x56>
  serial_write('0' + n);
 80044c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80044c8:	b2c0      	uxtb	r0, r0
}
 80044ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  serial_write('0' + n);
 80044ce:	f001 bdbf 	b.w	8006050 <serial_write>
    n /= 10;
 80044d2:	260a      	movs	r6, #10
 80044d4:	fbb4 f5f6 	udiv	r5, r4, r6
  serial_write('0' + n);
 80044d8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80044dc:	b2c0      	uxtb	r0, r0
 80044de:	f001 fdb7 	bl	8006050 <serial_write>
    digit_b = '0' + n % 10;
 80044e2:	fb06 4015 	mls	r0, r6, r5, r4
}
 80044e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digit_b = '0' + n % 10;
 80044ea:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 80044ec:	b2c0      	uxtb	r0, r0
 80044ee:	f001 bdaf 	b.w	8006050 <serial_write>
 80044f2:	bf00      	nop
 80044f4:	cccccccd 	.word	0xcccccccd

080044f8 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	460d      	mov	r5, r1
 80044fc:	b085      	sub	sp, #20
  if (n < 0) {
 80044fe:	2100      	movs	r1, #0
{
 8004500:	4606      	mov	r6, r0
  if (n < 0) {
 8004502:	f7fc fb65 	bl	8000bd0 <__aeabi_fcmplt>
 8004506:	2800      	cmp	r0, #0
 8004508:	f040 80d2 	bne.w	80046b0 <printFloat+0x1b8>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 800450c:	2d01      	cmp	r5, #1
 800450e:	f240 80d7 	bls.w	80046c0 <printFloat+0x1c8>
 8004512:	462c      	mov	r4, r5
    n *= 100;
 8004514:	4f70      	ldr	r7, [pc, #448]	; (80046d8 <printFloat+0x1e0>)
 8004516:	4630      	mov	r0, r6
 8004518:	4639      	mov	r1, r7
 800451a:	f7fc f9bb 	bl	8000894 <__aeabi_fmul>
    decimals -= 2;
 800451e:	3c02      	subs	r4, #2
 8004520:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004522:	2c01      	cmp	r4, #1
    n *= 100;
 8004524:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004526:	d8f6      	bhi.n	8004516 <printFloat+0x1e>
 8004528:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 800452c:	b123      	cbz	r3, 8004538 <printFloat+0x40>
 800452e:	4630      	mov	r0, r6
 8004530:	496a      	ldr	r1, [pc, #424]	; (80046dc <printFloat+0x1e4>)
 8004532:	f7fc f9af 	bl	8000894 <__aeabi_fmul>
 8004536:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004538:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800453c:	4630      	mov	r0, r6
 800453e:	f7fc f8a1 	bl	8000684 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004542:	f7fc fb83 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 8004546:	2800      	cmp	r0, #0
 8004548:	f000 80bc 	beq.w	80046c4 <printFloat+0x1cc>
  uint8_t i = 0;
 800454c:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 800454e:	4f64      	ldr	r7, [pc, #400]	; (80046e0 <printFloat+0x1e8>)
 8004550:	4602      	mov	r2, r0
 8004552:	fba7 1300 	umull	r1, r3, r7, r0
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800455c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004560:	a904      	add	r1, sp, #16
 8004562:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8004566:	4421      	add	r1, r4
  while(a > 0) {
 8004568:	2a09      	cmp	r2, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 800456a:	f104 0401 	add.w	r4, r4, #1
    a /= 10;
 800456e:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004570:	f801 6c10 	strb.w	r6, [r1, #-16]
 8004574:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004576:	d8eb      	bhi.n	8004550 <printFloat+0x58>
  }
  while (i < decimal_places) {
 8004578:	42a5      	cmp	r5, r4
 800457a:	d972      	bls.n	8004662 <printFloat+0x16a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800457c:	2230      	movs	r2, #48	; 0x30
 800457e:	1c63      	adds	r3, r4, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	a904      	add	r1, sp, #16
 8004584:	4421      	add	r1, r4
  while (i < decimal_places) {
 8004586:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004588:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 800458c:	d961      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800458e:	1ca0      	adds	r0, r4, #2
 8004590:	b2c0      	uxtb	r0, r0
 8004592:	a904      	add	r1, sp, #16
 8004594:	4419      	add	r1, r3
  while (i < decimal_places) {
 8004596:	4285      	cmp	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004598:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 800459c:	d959      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800459e:	1ce1      	adds	r1, r4, #3
 80045a0:	ae04      	add	r6, sp, #16
 80045a2:	b2c9      	uxtb	r1, r1
 80045a4:	4430      	add	r0, r6
  while (i < decimal_places) {
 80045a6:	42a9      	cmp	r1, r5
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045a8:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 80045ac:	d251      	bcs.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045ae:	1d20      	adds	r0, r4, #4
 80045b0:	b2c0      	uxtb	r0, r0
 80045b2:	4431      	add	r1, r6
  while (i < decimal_places) {
 80045b4:	42a8      	cmp	r0, r5
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045b6:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 80045ba:	d24a      	bcs.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045bc:	1d61      	adds	r1, r4, #5
 80045be:	b2c9      	uxtb	r1, r1
 80045c0:	4430      	add	r0, r6
  while (i < decimal_places) {
 80045c2:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045c4:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 80045c8:	d943      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045ca:	1da0      	adds	r0, r4, #6
 80045cc:	b2c0      	uxtb	r0, r0
 80045ce:	4431      	add	r1, r6
  while (i < decimal_places) {
 80045d0:	4285      	cmp	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045d2:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 80045d6:	d93c      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045d8:	1de1      	adds	r1, r4, #7
 80045da:	b2c9      	uxtb	r1, r1
 80045dc:	4430      	add	r0, r6
  while (i < decimal_places) {
 80045de:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045e0:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 80045e4:	d935      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045e6:	f104 0008 	add.w	r0, r4, #8
 80045ea:	b2c0      	uxtb	r0, r0
 80045ec:	4431      	add	r1, r6
  while (i < decimal_places) {
 80045ee:	4285      	cmp	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045f0:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 80045f4:	d92d      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80045f6:	f104 0109 	add.w	r1, r4, #9
 80045fa:	b2c9      	uxtb	r1, r1
 80045fc:	4430      	add	r0, r6
  while (i < decimal_places) {
 80045fe:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004600:	f800 2c10 	strb.w	r2, [r0, #-16]
  while (i < decimal_places) {
 8004604:	d925      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004606:	f104 000a 	add.w	r0, r4, #10
 800460a:	b2c0      	uxtb	r0, r0
 800460c:	4431      	add	r1, r6
  while (i < decimal_places) {
 800460e:	4285      	cmp	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004610:	f801 2c10 	strb.w	r2, [r1, #-16]
  while (i < decimal_places) {
 8004614:	d91d      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004616:	4616      	mov	r6, r2
 8004618:	f104 020b 	add.w	r2, r4, #11
 800461c:	a904      	add	r1, sp, #16
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	4408      	add	r0, r1
  while (i < decimal_places) {
 8004622:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004624:	f800 6c10 	strb.w	r6, [r0, #-16]
  while (i < decimal_places) {
 8004628:	d913      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800462a:	f104 010c 	add.w	r1, r4, #12
 800462e:	a804      	add	r0, sp, #16
 8004630:	b2c9      	uxtb	r1, r1
 8004632:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004634:	428d      	cmp	r5, r1
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004636:	f802 6c10 	strb.w	r6, [r2, #-16]
  while (i < decimal_places) {
 800463a:	d90a      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800463c:	f104 020d 	add.w	r2, r4, #13
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	4401      	add	r1, r0
  while (i < decimal_places) {
 8004644:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004646:	f801 6c10 	strb.w	r6, [r1, #-16]
  while (i < decimal_places) {
 800464a:	d902      	bls.n	8004652 <printFloat+0x15a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800464c:	4402      	add	r2, r0
 800464e:	f802 6c10 	strb.w	r6, [r2, #-16]
  while (i < decimal_places) {
 8004652:	1e6a      	subs	r2, r5, #1
 8004654:	1b14      	subs	r4, r2, r4
 8004656:	429d      	cmp	r5, r3
 8004658:	bf38      	it	cc
 800465a:	2400      	movcc	r4, #0
 800465c:	441c      	add	r4, r3
 800465e:	f004 04ff 	and.w	r4, r4, #255	; 0xff
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004662:	42a5      	cmp	r5, r4
 8004664:	d01c      	beq.n	80046a0 <printFloat+0x1a8>
    buf[i++] = '0';
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004666:	b16c      	cbz	r4, 8004684 <printFloat+0x18c>
 8004668:	1e6f      	subs	r7, r5, #1
 800466a:	eb0d 0604 	add.w	r6, sp, r4
 800466e:	b2ff      	uxtb	r7, r7
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004670:	42a5      	cmp	r5, r4
 8004672:	d009      	beq.n	8004688 <printFloat+0x190>
    serial_write(buf[i-1]);
 8004674:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004678:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 800467a:	f001 fce9 	bl	8006050 <serial_write>
  for (; i > 0; i--) {
 800467e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004682:	d1f5      	bne.n	8004670 <printFloat+0x178>
  }
}
 8004684:	b005      	add	sp, #20
 8004686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004688:	202e      	movs	r0, #46	; 0x2e
 800468a:	f001 fce1 	bl	8006050 <serial_write>
    serial_write(buf[i-1]);
 800468e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8004692:	f001 fcdd 	bl	8006050 <serial_write>
  for (; i > 0; i--) {
 8004696:	463c      	mov	r4, r7
 8004698:	2f00      	cmp	r7, #0
 800469a:	d1e9      	bne.n	8004670 <printFloat+0x178>
}
 800469c:	b005      	add	sp, #20
 800469e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buf[i++] = '0';
 80046a0:	2230      	movs	r2, #48	; 0x30
 80046a2:	ab04      	add	r3, sp, #16
 80046a4:	1c6c      	adds	r4, r5, #1
 80046a6:	442b      	add	r3, r5
 80046a8:	f803 2c10 	strb.w	r2, [r3, #-16]
 80046ac:	b2e4      	uxtb	r4, r4
 80046ae:	e7da      	b.n	8004666 <printFloat+0x16e>
    serial_write('-');
 80046b0:	202d      	movs	r0, #45	; 0x2d
 80046b2:	f001 fccd 	bl	8006050 <serial_write>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 80046b6:	2d01      	cmp	r5, #1
    n = -n;
 80046b8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 80046bc:	f63f af29 	bhi.w	8004512 <printFloat+0x1a>
 80046c0:	462b      	mov	r3, r5
 80046c2:	e733      	b.n	800452c <printFloat+0x34>
  uint8_t i = 0;
 80046c4:	4604      	mov	r4, r0
  while (i < decimal_places) {
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	f47f af58 	bne.w	800457c <printFloat+0x84>
    buf[i++] = '0';
 80046cc:	2330      	movs	r3, #48	; 0x30
 80046ce:	2401      	movs	r4, #1
 80046d0:	f88d 3000 	strb.w	r3, [sp]
  for (; i > 0; i--) {
 80046d4:	e7c8      	b.n	8004668 <printFloat+0x170>
 80046d6:	bf00      	nop
 80046d8:	42c80000 	.word	0x42c80000
 80046dc:	41200000 	.word	0x41200000
 80046e0:	cccccccd 	.word	0xcccccccd

080046e4 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 80046e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 80046e6:	4b7f      	ldr	r3, [pc, #508]	; (80048e4 <printFloat_CoordValue+0x200>)
void printFloat_CoordValue(float n) {
 80046e8:	b085      	sub	sp, #20
 80046ea:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 80046ee:	f014 0401 	ands.w	r4, r4, #1
 80046f2:	d073      	beq.n	80047dc <printFloat_CoordValue+0xf8>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 80046f4:	497c      	ldr	r1, [pc, #496]	; (80048e8 <printFloat_CoordValue+0x204>)
 80046f6:	f7fc f8cd 	bl	8000894 <__aeabi_fmul>
  if (n < 0) {
 80046fa:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 80046fc:	4605      	mov	r5, r0
  if (n < 0) {
 80046fe:	f7fc fa67 	bl	8000bd0 <__aeabi_fcmplt>
 8004702:	2800      	cmp	r0, #0
 8004704:	f040 80cd 	bne.w	80048a2 <printFloat_CoordValue+0x1be>
    n *= 100;
 8004708:	4978      	ldr	r1, [pc, #480]	; (80048ec <printFloat_CoordValue+0x208>)
 800470a:	4628      	mov	r0, r5
 800470c:	f7fc f8c2 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004710:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004714:	f7fb ffb6 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 8004718:	f7fc fa98 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 800471c:	2800      	cmp	r0, #0
 800471e:	f000 80c6 	beq.w	80048ae <printFloat_CoordValue+0x1ca>
  uint8_t i = 0;
 8004722:	2500      	movs	r5, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004724:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 80048f4 <printFloat_CoordValue+0x210>
 8004728:	462a      	mov	r2, r5
 800472a:	4601      	mov	r1, r0
 800472c:	fbac 4300 	umull	r4, r3, ip, r0
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8004736:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 800473a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800473e:	a804      	add	r0, sp, #16
 8004740:	1886      	adds	r6, r0, r2
 8004742:	3501      	adds	r5, #1
  while(a > 0) {
 8004744:	2909      	cmp	r1, #9
    a /= 10;
 8004746:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004748:	b2ed      	uxtb	r5, r5
 800474a:	f806 7c10 	strb.w	r7, [r6, #-16]
  while(a > 0) {
 800474e:	d8eb      	bhi.n	8004728 <printFloat_CoordValue+0x44>
  while (i < decimal_places) {
 8004750:	2d03      	cmp	r5, #3
 8004752:	d823      	bhi.n	800479c <printFloat_CoordValue+0xb8>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004754:	2130      	movs	r1, #48	; 0x30
 8004756:	1c94      	adds	r4, r2, #2
 8004758:	b2e4      	uxtb	r4, r4
 800475a:	ab04      	add	r3, sp, #16
 800475c:	442b      	add	r3, r5
  while (i < decimal_places) {
 800475e:	2c04      	cmp	r4, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004760:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004764:	f000 80b6 	beq.w	80048d4 <printFloat_CoordValue+0x1f0>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004768:	3203      	adds	r2, #3
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	ab04      	add	r3, sp, #16
 800476e:	4423      	add	r3, r4
  while (i < decimal_places) {
 8004770:	2a04      	cmp	r2, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004772:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004776:	f000 80b3 	beq.w	80048e0 <printFloat_CoordValue+0x1fc>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800477a:	2330      	movs	r3, #48	; 0x30
 800477c:	a904      	add	r1, sp, #16
 800477e:	4411      	add	r1, r2
  while (i < decimal_places) {
 8004780:	2a02      	cmp	r2, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004782:	f801 3c10 	strb.w	r3, [r1, #-16]
  while (i < decimal_places) {
 8004786:	d101      	bne.n	800478c <printFloat_CoordValue+0xa8>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004788:	f88d 3003 	strb.w	r3, [sp, #3]
  while (i < decimal_places) {
 800478c:	2c04      	cmp	r4, #4
 800478e:	f1c5 0503 	rsb	r5, r5, #3
 8004792:	bf88      	it	hi
 8004794:	2500      	movhi	r5, #0
 8004796:	442c      	add	r4, r5
 8004798:	f004 05ff 	and.w	r5, r4, #255	; 0xff
  if (i == decimal_places) { // Fill in leading zero, if needed.
 800479c:	2d04      	cmp	r5, #4
 800479e:	d103      	bne.n	80047a8 <printFloat_CoordValue+0xc4>
    buf[i++] = '0';
 80047a0:	2330      	movs	r3, #48	; 0x30
 80047a2:	2505      	movs	r5, #5
 80047a4:	f88d 3004 	strb.w	r3, [sp, #4]
 80047a8:	1e6e      	subs	r6, r5, #1
 80047aa:	b2f6      	uxtb	r6, r6
 80047ac:	e008      	b.n	80047c0 <printFloat_CoordValue+0xdc>
    serial_write(buf[i-1]);
 80047ae:	f813 0c11 	ldrb.w	r0, [r3, #-17]
 80047b2:	f001 fc4d 	bl	8006050 <serial_write>
  for (; i > 0; i--) {
 80047b6:	b17e      	cbz	r6, 80047d8 <printFloat_CoordValue+0xf4>
 80047b8:	3d01      	subs	r5, #1
 80047ba:	3e01      	subs	r6, #1
 80047bc:	b2ed      	uxtb	r5, r5
 80047be:	b2f6      	uxtb	r6, r6
    serial_write(buf[i-1]);
 80047c0:	ab04      	add	r3, sp, #16
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80047c2:	2d04      	cmp	r5, #4
    serial_write(buf[i-1]);
 80047c4:	442b      	add	r3, r5
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80047c6:	d1f2      	bne.n	80047ae <printFloat_CoordValue+0xca>
 80047c8:	202e      	movs	r0, #46	; 0x2e
 80047ca:	f001 fc41 	bl	8006050 <serial_write>
    serial_write(buf[i-1]);
 80047ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80047d2:	f001 fc3d 	bl	8006050 <serial_write>
  for (; i > 0; i--) {
 80047d6:	e7ef      	b.n	80047b8 <printFloat_CoordValue+0xd4>
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 80047d8:	b005      	add	sp, #20
 80047da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (n < 0) {
 80047dc:	2100      	movs	r1, #0
 80047de:	4605      	mov	r5, r0
 80047e0:	f7fc f9f6 	bl	8000bd0 <__aeabi_fcmplt>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d169      	bne.n	80048bc <printFloat_CoordValue+0x1d8>
  if (decimals) { n *= 10; }
 80047e8:	4941      	ldr	r1, [pc, #260]	; (80048f0 <printFloat_CoordValue+0x20c>)
 80047ea:	4628      	mov	r0, r5
 80047ec:	f7fc f852 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 80047f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80047f4:	f7fb ff46 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 80047f8:	f7fc fa28 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d064      	beq.n	80048ca <printFloat_CoordValue+0x1e6>
    buf[i++] = (a % 10) + '0'; // Get digit
 8004800:	4f3c      	ldr	r7, [pc, #240]	; (80048f4 <printFloat_CoordValue+0x210>)
 8004802:	4622      	mov	r2, r4
 8004804:	4601      	mov	r1, r0
 8004806:	fba7 4300 	umull	r4, r3, r7, r0
 800480a:	08db      	lsrs	r3, r3, #3
 800480c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8004810:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 8004814:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8004818:	a804      	add	r0, sp, #16
 800481a:	1885      	adds	r5, r0, r2
 800481c:	1c54      	adds	r4, r2, #1
  while(a > 0) {
 800481e:	2909      	cmp	r1, #9
    a /= 10;
 8004820:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004822:	b2e4      	uxtb	r4, r4
 8004824:	f805 6c10 	strb.w	r6, [r5, #-16]
  while(a > 0) {
 8004828:	d8eb      	bhi.n	8004802 <printFloat_CoordValue+0x11e>
  while (i < decimal_places) {
 800482a:	2c02      	cmp	r4, #2
 800482c:	d81a      	bhi.n	8004864 <printFloat_CoordValue+0x180>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800482e:	2030      	movs	r0, #48	; 0x30
 8004830:	1c93      	adds	r3, r2, #2
 8004832:	b2db      	uxtb	r3, r3
 8004834:	a904      	add	r1, sp, #16
 8004836:	4421      	add	r1, r4
  while (i < decimal_places) {
 8004838:	2b03      	cmp	r3, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800483a:	f801 0c10 	strb.w	r0, [r1, #-16]
  while (i < decimal_places) {
 800483e:	d04b      	beq.n	80048d8 <printFloat_CoordValue+0x1f4>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004840:	a904      	add	r1, sp, #16
 8004842:	440b      	add	r3, r1
  while (i < decimal_places) {
 8004844:	2aff      	cmp	r2, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004846:	f803 0c10 	strb.w	r0, [r3, #-16]
  while (i < decimal_places) {
 800484a:	d147      	bne.n	80048dc <printFloat_CoordValue+0x1f8>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800484c:	2230      	movs	r2, #48	; 0x30
 800484e:	2301      	movs	r3, #1
 8004850:	f88d 2002 	strb.w	r2, [sp, #2]
  while (i < decimal_places) {
 8004854:	2b03      	cmp	r3, #3
 8004856:	f1c4 0402 	rsb	r4, r4, #2
 800485a:	bf88      	it	hi
 800485c:	2400      	movhi	r4, #0
 800485e:	441c      	add	r4, r3
 8004860:	f004 04ff 	and.w	r4, r4, #255	; 0xff
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004864:	2c03      	cmp	r4, #3
 8004866:	d103      	bne.n	8004870 <printFloat_CoordValue+0x18c>
    buf[i++] = '0';
 8004868:	2330      	movs	r3, #48	; 0x30
 800486a:	2404      	movs	r4, #4
 800486c:	f88d 3003 	strb.w	r3, [sp, #3]
 8004870:	1e65      	subs	r5, r4, #1
 8004872:	b2ed      	uxtb	r5, r5
 8004874:	e009      	b.n	800488a <printFloat_CoordValue+0x1a6>
    serial_write(buf[i-1]);
 8004876:	f813 0c11 	ldrb.w	r0, [r3, #-17]
 800487a:	f001 fbe9 	bl	8006050 <serial_write>
  for (; i > 0; i--) {
 800487e:	2d00      	cmp	r5, #0
 8004880:	d0aa      	beq.n	80047d8 <printFloat_CoordValue+0xf4>
 8004882:	3c01      	subs	r4, #1
 8004884:	3d01      	subs	r5, #1
 8004886:	b2e4      	uxtb	r4, r4
 8004888:	b2ed      	uxtb	r5, r5
    serial_write(buf[i-1]);
 800488a:	ab04      	add	r3, sp, #16
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 800488c:	2c03      	cmp	r4, #3
    serial_write(buf[i-1]);
 800488e:	4423      	add	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004890:	d1f1      	bne.n	8004876 <printFloat_CoordValue+0x192>
 8004892:	202e      	movs	r0, #46	; 0x2e
 8004894:	f001 fbdc 	bl	8006050 <serial_write>
    serial_write(buf[i-1]);
 8004898:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800489c:	f001 fbd8 	bl	8006050 <serial_write>
  for (; i > 0; i--) {
 80048a0:	e7ef      	b.n	8004882 <printFloat_CoordValue+0x19e>
    serial_write('-');
 80048a2:	202d      	movs	r0, #45	; 0x2d
 80048a4:	f001 fbd4 	bl	8006050 <serial_write>
    n = -n;
 80048a8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80048ac:	e72c      	b.n	8004708 <printFloat_CoordValue+0x24>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80048ae:	f243 0330 	movw	r3, #12336	; 0x3030
  uint8_t i = 0;
 80048b2:	4605      	mov	r5, r0
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80048b4:	2202      	movs	r2, #2
 80048b6:	f8ad 3000 	strh.w	r3, [sp]
  while (i < decimal_places) {
 80048ba:	e75e      	b.n	800477a <printFloat_CoordValue+0x96>
    serial_write('-');
 80048bc:	202d      	movs	r0, #45	; 0x2d
 80048be:	f001 fbc7 	bl	8006050 <serial_write>
    n = -n;
 80048c2:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 80048c6:	4605      	mov	r5, r0
 80048c8:	e78e      	b.n	80047e8 <printFloat_CoordValue+0x104>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80048ca:	f243 0330 	movw	r3, #12336	; 0x3030
 80048ce:	f8ad 3000 	strh.w	r3, [sp]
  while (i < decimal_places) {
 80048d2:	e7bb      	b.n	800484c <printFloat_CoordValue+0x168>
 80048d4:	2503      	movs	r5, #3
 80048d6:	e759      	b.n	800478c <printFloat_CoordValue+0xa8>
 80048d8:	2402      	movs	r4, #2
 80048da:	e7bb      	b.n	8004854 <printFloat_CoordValue+0x170>
 80048dc:	2302      	movs	r3, #2
 80048de:	e7b9      	b.n	8004854 <printFloat_CoordValue+0x170>
 80048e0:	2403      	movs	r4, #3
 80048e2:	e753      	b.n	800478c <printFloat_CoordValue+0xa8>
 80048e4:	200014c8 	.word	0x200014c8
 80048e8:	3d21428b 	.word	0x3d21428b
 80048ec:	461c4000 	.word	0x461c4000
 80048f0:	447a0000 	.word	0x447a0000
 80048f4:	cccccccd 	.word	0xcccccccd

080048f8 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 80048f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 80048fa:	4b4a      	ldr	r3, [pc, #296]	; (8004a24 <printFloat_RateValue+0x12c>)
void printFloat_RateValue(float n) {
 80048fc:	b085      	sub	sp, #20
 80048fe:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004902:	f014 0401 	ands.w	r4, r4, #1
 8004906:	d046      	beq.n	8004996 <printFloat_RateValue+0x9e>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004908:	4947      	ldr	r1, [pc, #284]	; (8004a28 <printFloat_RateValue+0x130>)
 800490a:	f7fb ffc3 	bl	8000894 <__aeabi_fmul>
  if (n < 0) {
 800490e:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8004910:	4604      	mov	r4, r0
  if (n < 0) {
 8004912:	f7fc f95d 	bl	8000bd0 <__aeabi_fcmplt>
 8004916:	2800      	cmp	r0, #0
 8004918:	d16d      	bne.n	80049f6 <printFloat_RateValue+0xfe>
  if (decimals) { n *= 10; }
 800491a:	4944      	ldr	r1, [pc, #272]	; (8004a2c <printFloat_RateValue+0x134>)
 800491c:	4620      	mov	r0, r4
 800491e:	f7fb ffb9 	bl	8000894 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004922:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004926:	f7fb fead 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 800492a:	f7fc f98f 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 800492e:	b1b8      	cbz	r0, 8004960 <printFloat_RateValue+0x68>
  uint8_t i = 0;
 8004930:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004932:	4e3f      	ldr	r6, [pc, #252]	; (8004a30 <printFloat_RateValue+0x138>)
 8004934:	4602      	mov	r2, r0
 8004936:	fba6 1300 	umull	r1, r3, r6, r0
 800493a:	08db      	lsrs	r3, r3, #3
 800493c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004940:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004944:	a904      	add	r1, sp, #16
 8004946:	f100 0530 	add.w	r5, r0, #48	; 0x30
 800494a:	4421      	add	r1, r4
  while(a > 0) {
 800494c:	2a09      	cmp	r2, #9
    buf[i++] = (a % 10) + '0'; // Get digit
 800494e:	f104 0401 	add.w	r4, r4, #1
    a /= 10;
 8004952:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 8004954:	f801 5c10 	strb.w	r5, [r1, #-16]
 8004958:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 800495a:	d8eb      	bhi.n	8004934 <printFloat_RateValue+0x3c>
  while (i < decimal_places) {
 800495c:	2c00      	cmp	r4, #0
 800495e:	d15d      	bne.n	8004a1c <printFloat_RateValue+0x124>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004960:	2330      	movs	r3, #48	; 0x30
 8004962:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 8004966:	2330      	movs	r3, #48	; 0x30
 8004968:	2402      	movs	r4, #2
 800496a:	f88d 3001 	strb.w	r3, [sp, #1]
    serial_write(buf[i-1]);
 800496e:	ab04      	add	r3, sp, #16
 8004970:	4423      	add	r3, r4
  for (; i > 0; i--) {
 8004972:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004974:	f813 0c11 	ldrb.w	r0, [r3, #-17]
  for (; i > 0; i--) {
 8004978:	b2e4      	uxtb	r4, r4
    serial_write(buf[i-1]);
 800497a:	f001 fb69 	bl	8006050 <serial_write>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 800497e:	2c01      	cmp	r4, #1
 8004980:	d1f5      	bne.n	800496e <printFloat_RateValue+0x76>
 8004982:	202e      	movs	r0, #46	; 0x2e
 8004984:	f001 fb64 	bl	8006050 <serial_write>
    serial_write(buf[i-1]);
 8004988:	f89d 0000 	ldrb.w	r0, [sp]
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 800498c:	b005      	add	sp, #20
 800498e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    serial_write(buf[i-1]);
 8004992:	f001 bb5d 	b.w	8006050 <serial_write>
  if (n < 0) {
 8004996:	2100      	movs	r1, #0
 8004998:	4605      	mov	r5, r0
 800499a:	f7fc f919 	bl	8000bd0 <__aeabi_fcmplt>
 800499e:	bbb0      	cbnz	r0, 8004a0e <printFloat_RateValue+0x116>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 80049a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80049a4:	4628      	mov	r0, r5
 80049a6:	f7fb fe6d 	bl	8000684 <__addsf3>
  uint32_t a = (long)n;
 80049aa:	f7fc f94f 	bl	8000c4c <__aeabi_f2iz>
  while(a > 0) {
 80049ae:	b340      	cbz	r0, 8004a02 <printFloat_RateValue+0x10a>
    buf[i++] = (a % 10) + '0'; // Get digit
 80049b0:	4f1f      	ldr	r7, [pc, #124]	; (8004a30 <printFloat_RateValue+0x138>)
 80049b2:	4622      	mov	r2, r4
 80049b4:	4601      	mov	r1, r0
 80049b6:	fba7 4300 	umull	r4, r3, r7, r0
 80049ba:	08db      	lsrs	r3, r3, #3
 80049bc:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80049c0:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 80049c4:	f100 0630 	add.w	r6, r0, #48	; 0x30
 80049c8:	a804      	add	r0, sp, #16
 80049ca:	1885      	adds	r5, r0, r2
 80049cc:	1c54      	adds	r4, r2, #1
  while(a > 0) {
 80049ce:	2909      	cmp	r1, #9
    a /= 10;
 80049d0:	4618      	mov	r0, r3
    buf[i++] = (a % 10) + '0'; // Get digit
 80049d2:	b2e4      	uxtb	r4, r4
 80049d4:	f805 6c10 	strb.w	r6, [r5, #-16]
  while(a > 0) {
 80049d8:	d8eb      	bhi.n	80049b2 <printFloat_RateValue+0xba>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 80049da:	b194      	cbz	r4, 8004a02 <printFloat_RateValue+0x10a>
 80049dc:	f10d 33ff 	add.w	r3, sp, #4294967295
 80049e0:	191d      	adds	r5, r3, r4
 80049e2:	1aad      	subs	r5, r5, r2
 80049e4:	446c      	add	r4, sp
    serial_write(buf[i-1]);
 80049e6:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 80049ea:	f001 fb31 	bl	8006050 <serial_write>
  for (; i > 0; i--) {
 80049ee:	42a5      	cmp	r5, r4
 80049f0:	d1f9      	bne.n	80049e6 <printFloat_RateValue+0xee>
}
 80049f2:	b005      	add	sp, #20
 80049f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serial_write('-');
 80049f6:	202d      	movs	r0, #45	; 0x2d
 80049f8:	f001 fb2a 	bl	8006050 <serial_write>
    n = -n;
 80049fc:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004a00:	e78b      	b.n	800491a <printFloat_RateValue+0x22>
    serial_write(buf[i-1]);
 8004a02:	2030      	movs	r0, #48	; 0x30
}
 8004a04:	b005      	add	sp, #20
 8004a06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    serial_write(buf[i-1]);
 8004a0a:	f001 bb21 	b.w	8006050 <serial_write>
    serial_write('-');
 8004a0e:	202d      	movs	r0, #45	; 0x2d
 8004a10:	f001 fb1e 	bl	8006050 <serial_write>
    n = -n;
 8004a14:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8004a18:	4605      	mov	r5, r0
 8004a1a:	e7c1      	b.n	80049a0 <printFloat_RateValue+0xa8>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004a1c:	2c01      	cmp	r4, #1
 8004a1e:	d1a6      	bne.n	800496e <printFloat_RateValue+0x76>
 8004a20:	e7a1      	b.n	8004966 <printFloat_RateValue+0x6e>
 8004a22:	bf00      	nop
 8004a24:	200014c8 	.word	0x200014c8
 8004a28:	3d21428b 	.word	0x3d21428b
 8004a2c:	41200000 	.word	0x41200000
 8004a30:	cccccccd 	.word	0xcccccccd

08004a34 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8004a34:	b500      	push	{lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004a36:	2101      	movs	r1, #1
{
 8004a38:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8004a3a:	2008      	movs	r0, #8
 8004a3c:	f7fc fca0 	bl	8001380 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <probe_init+0x34>)
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004a42:	a901      	add	r1, sp, #4
 8004a44:	4809      	ldr	r0, [pc, #36]	; (8004a6c <probe_init+0x38>)
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8004a46:	9301      	str	r3, [sp, #4]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8004a48:	f7fc faae 	bl	8000fa8 <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8004a4c:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004a4e:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <probe_init+0x3c>)
  probe_invert_mask = 0; // Initialize as zero.
 8004a50:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <probe_init+0x40>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004a52:	f992 2048 	ldrsb.w	r2, [r2, #72]	; 0x48
  probe_invert_mask = 0; // Initialize as zero.
 8004a56:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004a58:	428a      	cmp	r2, r1
 8004a5a:	bfa4      	itt	ge
 8004a5c:	f44f 7200 	movge.w	r2, #512	; 0x200
 8004a60:	801a      	strhge	r2, [r3, #0]
}
 8004a62:	b003      	add	sp, #12
 8004a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a68:	48030200 	.word	0x48030200
 8004a6c:	40010c00 	.word	0x40010c00
 8004a70:	200014c8 	.word	0x200014c8
 8004a74:	20001346 	.word	0x20001346

08004a78 <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 8004a78:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004a7a:	4907      	ldr	r1, [pc, #28]	; (8004a98 <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 8004a7c:	4a07      	ldr	r2, [pc, #28]	; (8004a9c <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004a7e:	f991 1048 	ldrsb.w	r1, [r1, #72]	; 0x48
  probe_invert_mask = 0; // Initialize as zero.
 8004a82:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8004a84:	4299      	cmp	r1, r3
 8004a86:	bfaa      	itet	ge
 8004a88:	f44f 7100 	movge.w	r1, #512	; 0x200
 8004a8c:	f44f 7300 	movlt.w	r3, #512	; 0x200
 8004a90:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8004a92:	b100      	cbz	r0, 8004a96 <probe_configure_invert_mask+0x1e>
 8004a94:	8013      	strh	r3, [r2, #0]
}
 8004a96:	4770      	bx	lr
 8004a98:	200014c8 	.word	0x200014c8
 8004a9c:	20001346 	.word	0x20001346

08004aa0 <probe_get_state>:


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8004aa0:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8004aa2:	4805      	ldr	r0, [pc, #20]	; (8004ab8 <probe_get_state+0x18>)
 8004aa4:	f7fc fc06 	bl	80012b4 <GPIO_ReadInputData>
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <probe_get_state+0x1c>)
 8004aaa:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004aae:	881b      	ldrh	r3, [r3, #0]
#endif
}
 8004ab0:	1a18      	subs	r0, r3, r0
 8004ab2:	bf18      	it	ne
 8004ab4:	2001      	movne	r0, #1
 8004ab6:	bd08      	pop	{r3, pc}
 8004ab8:	40010c00 	.word	0x40010c00
 8004abc:	20001346 	.word	0x20001346

08004ac0 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8004ac0:	b538      	push	{r3, r4, r5, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8004ac2:	480b      	ldr	r0, [pc, #44]	; (8004af0 <probe_state_monitor+0x30>)
 8004ac4:	f7fc fbf6 	bl	80012b4 <GPIO_ReadInputData>
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <probe_state_monitor+0x34>)
  if (probe_get_state()) {
 8004aca:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	4283      	cmp	r3, r0
 8004ad2:	d00c      	beq.n	8004aee <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004ad8:	4d08      	ldr	r5, [pc, #32]	; (8004afc <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <probe_state_monitor+0x40>)
 8004adc:	4c09      	ldr	r4, [pc, #36]	; (8004b04 <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 8004ade:	7019      	strb	r1, [r3, #0]
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004ae0:	782b      	ldrb	r3, [r5, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8004ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8004ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aec:	702b      	strb	r3, [r5, #0]
  }
}
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	40010c00 	.word	0x40010c00
 8004af4:	20001346 	.word	0x20001346
 8004af8:	2000132a 	.word	0x2000132a
 8004afc:	20001329 	.word	0x20001329
 8004b00:	20001338 	.word	0x20001338
 8004b04:	2000132c 	.word	0x2000132c

08004b08 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8004b08:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8004b0a:	f7ff f961 	bl	8003dd0 <plan_get_current_block>
 8004b0e:	b120      	cbz	r0, 8004b1a <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 8004b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8004b14:	2002      	movs	r0, #2
 8004b16:	f003 bafb 	b.w	8008110 <system_set_exec_state_flag>
}
 8004b1a:	bd08      	pop	{r3, pc}

08004b1c <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8004b1e:	4baf      	ldr	r3, [pc, #700]	; (8004ddc <protocol_exec_rt_system+0x2c0>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 8083 	bne.w	8004c2e <protocol_exec_rt_system+0x112>
 8004b28:	4cad      	ldr	r4, [pc, #692]	; (8004de0 <protocol_exec_rt_system+0x2c4>)
 8004b2a:	4dae      	ldr	r5, [pc, #696]	; (8004de4 <protocol_exec_rt_system+0x2c8>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8004b2c:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8004b2e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004b32:	b393      	cbz	r3, 8004b9a <protocol_exec_rt_system+0x7e>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8004b34:	06ea      	lsls	r2, r5, #27
 8004b36:	f100 80e2 	bmi.w	8004cfe <protocol_exec_rt_system+0x1e2>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8004b3a:	07eb      	lsls	r3, r5, #31
 8004b3c:	f100 80fc 	bmi.w	8004d38 <protocol_exec_rt_system+0x21c>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8004b40:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8004b44:	d00a      	beq.n	8004b5c <protocol_exec_rt_system+0x40>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8004b46:	7823      	ldrb	r3, [r4, #0]
 8004b48:	079f      	lsls	r7, r3, #30
 8004b4a:	f000 8106 	beq.w	8004d5a <protocol_exec_rt_system+0x23e>
 8004b4e:	b26e      	sxtb	r6, r5
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8004b50:	2e00      	cmp	r6, #0
 8004b52:	f2c0 813d 	blt.w	8004dd0 <protocol_exec_rt_system+0x2b4>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8004b56:	20e8      	movs	r0, #232	; 0xe8
 8004b58:	f003 fae4 	bl	8008124 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8004b5c:	07ae      	lsls	r6, r5, #30
 8004b5e:	d519      	bpl.n	8004b94 <protocol_exec_rt_system+0x78>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8004b60:	f015 0f68 	tst.w	r5, #104	; 0x68
 8004b64:	d113      	bne.n	8004b8e <protocol_exec_rt_system+0x72>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8004b66:	7823      	ldrb	r3, [r4, #0]
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	f000 816f 	beq.w	8004e4c <protocol_exec_rt_system+0x330>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 8155 	bne.w	8004e1e <protocol_exec_rt_system+0x302>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8004b74:	2300      	movs	r3, #0
 8004b76:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8004b78:	f7ff f92a 	bl	8003dd0 <plan_get_current_block>
 8004b7c:	b120      	cbz	r0, 8004b88 <protocol_exec_rt_system+0x6c>
 8004b7e:	78a3      	ldrb	r3, [r4, #2]
 8004b80:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004b84:	f000 8197 	beq.w	8004eb6 <protocol_exec_rt_system+0x39a>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8004b88:	2300      	movs	r3, #0
 8004b8a:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8004b8c:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8004b8e:	2002      	movs	r0, #2
 8004b90:	f003 fac8 	bl	8008124 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8004b94:	076b      	lsls	r3, r5, #29
 8004b96:	f100 80b5 	bmi.w	8004d04 <protocol_exec_rt_system+0x1e8>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8004b9a:	4b93      	ldr	r3, [pc, #588]	; (8004de8 <protocol_exec_rt_system+0x2cc>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8004b9e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d170      	bne.n	8004c88 <protocol_exec_rt_system+0x16c>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8004ba6:	4b91      	ldr	r3, [pc, #580]	; (8004dec <protocol_exec_rt_system+0x2d0>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8004baa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004bae:	b923      	cbnz	r3, 8004bba <protocol_exec_rt_system+0x9e>
 8004bb0:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8004bb2:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8004bb6:	d136      	bne.n	8004c26 <protocol_exec_rt_system+0x10a>
    st_prep_buffer();
  }

}
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8004bba:	f003 fae9 	bl	8008190 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8004bbe:	7aa2      	ldrb	r2, [r4, #10]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 8004bc0:	f015 0f01 	tst.w	r5, #1
 8004bc4:	bf0c      	ite	eq
 8004bc6:	4613      	moveq	r3, r2
 8004bc8:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8004bca:	07a8      	lsls	r0, r5, #30
 8004bcc:	bf44      	itt	mi
 8004bce:	330a      	addmi	r3, #10
 8004bd0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8004bd2:	0769      	lsls	r1, r5, #29
 8004bd4:	bf44      	itt	mi
 8004bd6:	3b0a      	submi	r3, #10
 8004bd8:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8004bda:	072f      	lsls	r7, r5, #28
 8004bdc:	bf44      	itt	mi
 8004bde:	3301      	addmi	r3, #1
 8004be0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8004be2:	06ee      	lsls	r6, r5, #27
 8004be4:	bf44      	itt	mi
 8004be6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8004bea:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8004bec:	2bc8      	cmp	r3, #200	; 0xc8
 8004bee:	bf28      	it	cs
 8004bf0:	23c8      	movcs	r3, #200	; 0xc8
 8004bf2:	2b0a      	cmp	r3, #10
 8004bf4:	bf38      	it	cc
 8004bf6:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d006      	beq.n	8004c0a <protocol_exec_rt_system+0xee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8004bfc:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8004bfe:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8004c00:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8004c02:	f042 0308 	orr.w	r3, r2, #8
 8004c06:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8004c08:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8004c0a:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 8004c0c:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8004c0e:	d51d      	bpl.n	8004c4c <protocol_exec_rt_system+0x130>
      if (sys.state == STATE_HOLD) {
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d11b      	bne.n	8004c4c <protocol_exec_rt_system+0x130>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8004c14:	7ae3      	ldrb	r3, [r4, #11]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 8121 	bne.w	8004e5e <protocol_exec_rt_system+0x342>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8004c20:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8004c24:	d118      	bne.n	8004c58 <protocol_exec_rt_system+0x13c>
}
 8004c26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 8004c2a:	f002 bae3 	b.w	80071f4 <st_prep_buffer>
    sys.state = STATE_ALARM; // Set system alarm state
 8004c2e:	2601      	movs	r6, #1
 8004c30:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004c34:	4c6a      	ldr	r4, [pc, #424]	; (8004de0 <protocol_exec_rt_system+0x2c4>)
    report_alarm_message(rt_exec);
 8004c36:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8004c38:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8004c3a:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8004c3c:	f000 fb7a 	bl	8005334 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8004c40:	42b5      	cmp	r5, r6
 8004c42:	d97f      	bls.n	8004d44 <protocol_exec_rt_system+0x228>
 8004c44:	4d67      	ldr	r5, [pc, #412]	; (8004de4 <protocol_exec_rt_system+0x2c8>)
    system_clear_exec_alarm(); // Clear alarm
 8004c46:	f003 fa7f 	bl	8008148 <system_clear_exec_alarm>
 8004c4a:	e76f      	b.n	8004b2c <protocol_exec_rt_system+0x10>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8004c4c:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8004c50:	d0af      	beq.n	8004bb2 <protocol_exec_rt_system+0x96>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 80f5 	bne.w	8004e42 <protocol_exec_rt_system+0x326>
        uint8_t coolant_state = gc_state.modal.coolant;
 8004c58:	4f65      	ldr	r7, [pc, #404]	; (8004df0 <protocol_exec_rt_system+0x2d4>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8004c5a:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8004c5c:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8004c5e:	d505      	bpl.n	8004c6c <protocol_exec_rt_system+0x150>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8004c60:	0633      	lsls	r3, r6, #24
 8004c62:	bf4c      	ite	mi
 8004c64:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8004c68:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8004c6c:	0668      	lsls	r0, r5, #25
 8004c6e:	d505      	bpl.n	8004c7c <protocol_exec_rt_system+0x160>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8004c70:	0671      	lsls	r1, r6, #25
 8004c72:	bf4c      	ite	mi
 8004c74:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8004c78:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f7fc fcb7 	bl	80015f0 <coolant_set_state>
        gc_state.modal.coolant = coolant_state;
 8004c82:	7823      	ldrb	r3, [r4, #0]
 8004c84:	723e      	strb	r6, [r7, #8]
 8004c86:	e794      	b.n	8004bb2 <protocol_exec_rt_system+0x96>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8004c88:	f003 fa7a 	bl	8008180 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8004c8c:	7a21      	ldrb	r1, [r4, #8]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 8004c8e:	f015 0f01 	tst.w	r5, #1
 8004c92:	bf0c      	ite	eq
 8004c94:	460b      	moveq	r3, r1
 8004c96:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8004c98:	07ae      	lsls	r6, r5, #30
 8004c9a:	bf44      	itt	mi
 8004c9c:	330a      	addmi	r3, #10
 8004c9e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8004ca0:	0768      	lsls	r0, r5, #29
 8004ca2:	bf44      	itt	mi
 8004ca4:	3b0a      	submi	r3, #10
 8004ca6:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8004ca8:	072f      	lsls	r7, r5, #28
 8004caa:	bf44      	itt	mi
 8004cac:	3301      	addmi	r3, #1
 8004cae:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8004cb0:	06ee      	lsls	r6, r5, #27
 8004cb2:	bf44      	itt	mi
 8004cb4:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8004cb8:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8004cba:	2bc8      	cmp	r3, #200	; 0xc8
 8004cbc:	bf28      	it	cs
 8004cbe:	23c8      	movcs	r3, #200	; 0xc8
 8004cc0:	2b0a      	cmp	r3, #10
 8004cc2:	bf38      	it	cc
 8004cc4:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8004cc6:	7a60      	ldrb	r0, [r4, #9]
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 8004cc8:	f015 0f20 	tst.w	r5, #32
 8004ccc:	bf14      	ite	ne
 8004cce:	2264      	movne	r2, #100	; 0x64
 8004cd0:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8004cd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cd6:	bf18      	it	ne
 8004cd8:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8004cda:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004cde:	bf18      	it	ne
 8004ce0:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8004ce2:	4299      	cmp	r1, r3
 8004ce4:	d102      	bne.n	8004cec <protocol_exec_rt_system+0x1d0>
 8004ce6:	4282      	cmp	r2, r0
 8004ce8:	f43f af5d 	beq.w	8004ba6 <protocol_exec_rt_system+0x8a>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8004cec:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8004cee:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8004cf0:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8004cf2:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8004cf4:	f7ff f8dc 	bl	8003eb0 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8004cf8:	f7ff fba4 	bl	8004444 <plan_cycle_reinitialize>
 8004cfc:	e753      	b.n	8004ba6 <protocol_exec_rt_system+0x8a>
      sys.abort = true;  // Only place this is set true.
 8004cfe:	2301      	movs	r3, #1
 8004d00:	7063      	strb	r3, [r4, #1]
}
 8004d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8004d04:	7823      	ldrb	r3, [r4, #0]
 8004d06:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8004d0a:	d002      	beq.n	8004d12 <protocol_exec_rt_system+0x1f6>
 8004d0c:	78e3      	ldrb	r3, [r4, #3]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d070      	beq.n	8004df4 <protocol_exec_rt_system+0x2d8>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8004d12:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8004d16:	78a3      	ldrb	r3, [r4, #2]
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	db6f      	blt.n	8004dfc <protocol_exec_rt_system+0x2e0>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8004d1c:	f013 0220 	ands.w	r2, r3, #32
 8004d20:	d053      	beq.n	8004dca <protocol_exec_rt_system+0x2ae>
          sys.state = STATE_SAFETY_DOOR;
 8004d22:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8004d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8004d2e:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8004d30:	2004      	movs	r0, #4
 8004d32:	f003 f9f7 	bl	8008124 <system_clear_exec_state_flag>
 8004d36:	e730      	b.n	8004b9a <protocol_exec_rt_system+0x7e>
      report_realtime_status();
 8004d38:	f000 ff98 	bl	8005c6c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f003 f9f1 	bl	8008124 <system_clear_exec_state_flag>
 8004d42:	e6fd      	b.n	8004b40 <protocol_exec_rt_system+0x24>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 fb0b 	bl	8005360 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8004d4a:	2010      	movs	r0, #16
 8004d4c:	f003 f9ea 	bl	8008124 <system_clear_exec_state_flag>
 8004d50:	4d24      	ldr	r5, [pc, #144]	; (8004de4 <protocol_exec_rt_system+0x2c8>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8004d52:	782b      	ldrb	r3, [r5, #0]
 8004d54:	06d9      	lsls	r1, r3, #27
 8004d56:	d5fc      	bpl.n	8004d52 <protocol_exec_rt_system+0x236>
 8004d58:	e775      	b.n	8004c46 <protocol_exec_rt_system+0x12a>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8004d5a:	f013 0f28 	tst.w	r3, #40	; 0x28
 8004d5e:	d00e      	beq.n	8004d7e <protocol_exec_rt_system+0x262>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8004d60:	78a2      	ldrb	r2, [r4, #2]
 8004d62:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8004d66:	f000 8094 	beq.w	8004e92 <protocol_exec_rt_system+0x376>
 8004d6a:	b26a      	sxtb	r2, r5
 8004d6c:	4616      	mov	r6, r2
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8004d6e:	0668      	lsls	r0, r5, #25
 8004d70:	d50f      	bpl.n	8004d92 <protocol_exec_rt_system+0x276>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8004d72:	0699      	lsls	r1, r3, #26
 8004d74:	d40d      	bmi.n	8004d92 <protocol_exec_rt_system+0x276>
 8004d76:	78a1      	ldrb	r1, [r4, #2]
 8004d78:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004d7c:	e007      	b.n	8004d8e <protocol_exec_rt_system+0x272>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f3      	bne.n	8004d6a <protocol_exec_rt_system+0x24e>
 8004d82:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8004d84:	066e      	lsls	r6, r5, #25
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8004d86:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8004d88:	d570      	bpl.n	8004e6c <protocol_exec_rt_system+0x350>
 8004d8a:	2141      	movs	r1, #65	; 0x41
 8004d8c:	b26a      	sxtb	r2, r5
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8004d8e:	4616      	mov	r6, r2
 8004d90:	70a1      	strb	r1, [r4, #2]
        if (rt_exec & EXEC_FEED_HOLD) {
 8004d92:	072a      	lsls	r2, r5, #28
 8004d94:	d502      	bpl.n	8004d9c <protocol_exec_rt_system+0x280>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8004d96:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8004d9a:	d06a      	beq.n	8004e72 <protocol_exec_rt_system+0x356>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8004d9c:	06ab      	lsls	r3, r5, #26
 8004d9e:	f57f aed7 	bpl.w	8004b50 <protocol_exec_rt_system+0x34>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8004da2:	2006      	movs	r0, #6
 8004da4:	f000 fadc 	bl	8005360 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8004da8:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8004dac:	78a3      	ldrb	r3, [r4, #2]
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	db07      	blt.n	8004dc2 <protocol_exec_rt_system+0x2a6>
            if (sys.state == STATE_SAFETY_DOOR) {
 8004db2:	7822      	ldrb	r2, [r4, #0]
 8004db4:	2a40      	cmp	r2, #64	; 0x40
 8004db6:	f000 808d 	beq.w	8004ed4 <protocol_exec_rt_system+0x3b8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8004dba:	2a80      	cmp	r2, #128	; 0x80
 8004dbc:	d001      	beq.n	8004dc2 <protocol_exec_rt_system+0x2a6>
 8004dbe:	2240      	movs	r2, #64	; 0x40
 8004dc0:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8004dc2:	f043 0320 	orr.w	r3, r3, #32
 8004dc6:	70a3      	strb	r3, [r4, #2]
 8004dc8:	e6c2      	b.n	8004b50 <protocol_exec_rt_system+0x34>
          sys.suspend = SUSPEND_DISABLE;
 8004dca:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8004dcc:	7022      	strb	r2, [r4, #0]
 8004dce:	e7af      	b.n	8004d30 <protocol_exec_rt_system+0x214>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8004dd0:	7823      	ldrb	r3, [r4, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d01e      	beq.n	8004e14 <protocol_exec_rt_system+0x2f8>
        sys.state = STATE_SLEEP; 
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	7023      	strb	r3, [r4, #0]
 8004dda:	e6bc      	b.n	8004b56 <protocol_exec_rt_system+0x3a>
 8004ddc:	20001344 	.word	0x20001344
 8004de0:	20001314 	.word	0x20001314
 8004de4:	20001329 	.word	0x20001329
 8004de8:	20001310 	.word	0x20001310
 8004dec:	20001328 	.word	0x20001328
 8004df0:	2000128c 	.word	0x2000128c
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8004df4:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	da3d      	bge.n	8004e78 <protocol_exec_rt_system+0x35c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8004e00:	f7fe ff9e 	bl	8003d40 <plan_reset>
          st_reset();
 8004e04:	f002 f8d0 	bl	8006fa8 <st_reset>
          gc_sync_position();
 8004e08:	f7fc fcf6 	bl	80017f8 <gc_sync_position>
          plan_sync_position();
 8004e0c:	f7ff fafa 	bl	8004404 <plan_sync_position>
 8004e10:	78a3      	ldrb	r3, [r4, #2]
 8004e12:	e783      	b.n	8004d1c <protocol_exec_rt_system+0x200>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8004e14:	78a3      	ldrb	r3, [r4, #2]
 8004e16:	f043 0305 	orr.w	r3, r3, #5
 8004e1a:	70a3      	strb	r3, [r4, #2]
 8004e1c:	e7db      	b.n	8004dd6 <protocol_exec_rt_system+0x2ba>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8004e1e:	06da      	lsls	r2, r3, #27
 8004e20:	f57f aeb5 	bpl.w	8004b8e <protocol_exec_rt_system+0x72>
 8004e24:	78a2      	ldrb	r2, [r4, #2]
 8004e26:	07d2      	lsls	r2, r2, #31
 8004e28:	f57f aeb1 	bpl.w	8004b8e <protocol_exec_rt_system+0x72>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	f47f aea1 	bne.w	8004b74 <protocol_exec_rt_system+0x58>
 8004e32:	7ae3      	ldrb	r3, [r4, #11]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f43f ae9d 	beq.w	8004b74 <protocol_exec_rt_system+0x58>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8004e3a:	f043 0308 	orr.w	r3, r3, #8
 8004e3e:	72e3      	strb	r3, [r4, #11]
 8004e40:	e6a5      	b.n	8004b8e <protocol_exec_rt_system+0x72>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8004e42:	f013 0f18 	tst.w	r3, #24
 8004e46:	f43f aeb4 	beq.w	8004bb2 <protocol_exec_rt_system+0x96>
 8004e4a:	e705      	b.n	8004c58 <protocol_exec_rt_system+0x13c>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8004e4c:	78a3      	ldrb	r3, [r4, #2]
 8004e4e:	f013 0220 	ands.w	r2, r3, #32
 8004e52:	f47f ae9c 	bne.w	8004b8e <protocol_exec_rt_system+0x72>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8004e56:	06d8      	lsls	r0, r3, #27
 8004e58:	d535      	bpl.n	8004ec6 <protocol_exec_rt_system+0x3aa>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8004e5a:	7022      	strb	r2, [r4, #0]
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8004e5c:	e68a      	b.n	8004b74 <protocol_exec_rt_system+0x58>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8004e5e:	07d9      	lsls	r1, r3, #31
 8004e60:	f57f aede 	bpl.w	8004c20 <protocol_exec_rt_system+0x104>
 8004e64:	f043 0304 	orr.w	r3, r3, #4
 8004e68:	72e3      	strb	r3, [r4, #11]
 8004e6a:	e6d9      	b.n	8004c20 <protocol_exec_rt_system+0x104>
        if (rt_exec & EXEC_FEED_HOLD) {
 8004e6c:	072b      	lsls	r3, r5, #28
 8004e6e:	b26e      	sxtb	r6, r5
 8004e70:	d594      	bpl.n	8004d9c <protocol_exec_rt_system+0x280>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8004e72:	2310      	movs	r3, #16
 8004e74:	7023      	strb	r3, [r4, #0]
 8004e76:	e791      	b.n	8004d9c <protocol_exec_rt_system+0x280>
        plan_cycle_reinitialize();
 8004e78:	f7ff fae4 	bl	8004444 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8004e7c:	7923      	ldrb	r3, [r4, #4]
 8004e7e:	079f      	lsls	r7, r3, #30
 8004e80:	d503      	bpl.n	8004e8a <protocol_exec_rt_system+0x36e>
 8004e82:	78a2      	ldrb	r2, [r4, #2]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8004e8a:	f023 0306 	bic.w	r3, r3, #6
 8004e8e:	7123      	strb	r3, [r4, #4]
 8004e90:	e74e      	b.n	8004d30 <protocol_exec_rt_system+0x214>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8004e92:	f002 f999 	bl	80071c8 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8004e96:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8004e98:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8004e9a:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	f47f af6e 	bne.w	8004d7e <protocol_exec_rt_system+0x262>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8004ea2:	b26a      	sxtb	r2, r5
 8004ea4:	2a00      	cmp	r2, #0
 8004ea6:	4616      	mov	r6, r2
 8004ea8:	f6ff af61 	blt.w	8004d6e <protocol_exec_rt_system+0x252>
 8004eac:	78a1      	ldrb	r1, [r4, #2]
 8004eae:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8004eb2:	70a1      	strb	r1, [r4, #2]
 8004eb4:	e75b      	b.n	8004d6e <protocol_exec_rt_system+0x252>
              sys.state = STATE_CYCLE;
 8004eb6:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8004eb8:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8004eba:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8004ebc:	f002 f99a 	bl	80071f4 <st_prep_buffer>
              st_wake_up();
 8004ec0:	f001 fe98 	bl	8006bf4 <st_wake_up>
 8004ec4:	e663      	b.n	8004b8e <protocol_exec_rt_system+0x72>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8004ec6:	0759      	lsls	r1, r3, #29
 8004ec8:	f57f ae61 	bpl.w	8004b8e <protocol_exec_rt_system+0x72>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8004ecc:	f043 0308 	orr.w	r3, r3, #8
 8004ed0:	70a3      	strb	r3, [r4, #2]
 8004ed2:	e65c      	b.n	8004b8e <protocol_exec_rt_system+0x72>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8004ed4:	071f      	lsls	r7, r3, #28
 8004ed6:	f57f af72 	bpl.w	8004dbe <protocol_exec_rt_system+0x2a2>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8004eda:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	e76c      	b.n	8004dbe <protocol_exec_rt_system+0x2a2>

08004ee4 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 8004ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee8:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 8004eea:	f7fe ff71 	bl	8003dd0 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	f000 80e3 	beq.w	80050ba <protocol_exec_rt_suspend+0x1d6>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 8004ef4:	7c86      	ldrb	r6, [r0, #18]
      restore_spindle_speed = block->spindle_speed;
 8004ef6:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8004efa:	4f8d      	ldr	r7, [pc, #564]	; (8005130 <protocol_exec_rt_suspend+0x24c>)
 8004efc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004f00:	079a      	lsls	r2, r3, #30
 8004f02:	f100 80c8 	bmi.w	8005096 <protocol_exec_rt_suspend+0x1b2>
  #else
    if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
    else { restore_condition = block->condition; }
  #endif

  while (sys.suspend) {
 8004f06:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005138 <protocol_exec_rt_suspend+0x254>
 8004f0a:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8004f0e:	2c00      	cmp	r4, #0
 8004f10:	d049      	beq.n	8004fa6 <protocol_exec_rt_suspend+0xc2>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8004f12:	2500      	movs	r5, #0
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8004f14:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8004f18:	f04f 4a81 	mov.w	sl, #1082130432	; 0x40800000
    if (sys.abort) { return; }
 8004f1c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	d140      	bne.n	8004fa6 <protocol_exec_rt_suspend+0xc2>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 8004f24:	07e3      	lsls	r3, r4, #31
 8004f26:	d538      	bpl.n	8004f9a <protocol_exec_rt_suspend+0xb6>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8004f28:	f89b 1000 	ldrb.w	r1, [fp]
 8004f2c:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 8004f30:	d03c      	beq.n	8004fac <protocol_exec_rt_suspend+0xc8>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 8004f32:	f014 0404 	ands.w	r4, r4, #4
 8004f36:	d062      	beq.n	8004ffe <protocol_exec_rt_suspend+0x11a>
          if (sys.state == STATE_SLEEP) {
 8004f38:	2980      	cmp	r1, #128	; 0x80
 8004f3a:	f000 80d5 	beq.w	80050e8 <protocol_exec_rt_suspend+0x204>
          if (sys.state == STATE_SAFETY_DOOR) {
 8004f3e:	2940      	cmp	r1, #64	; 0x40
 8004f40:	f000 809d 	beq.w	800507e <protocol_exec_rt_suspend+0x19a>
 8004f44:	f89b 3002 	ldrb.w	r3, [fp, #2]
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8004f48:	0718      	lsls	r0, r3, #28
 8004f4a:	d526      	bpl.n	8004f9a <protocol_exec_rt_suspend+0xb6>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8004f4c:	4c79      	ldr	r4, [pc, #484]	; (8005134 <protocol_exec_rt_suspend+0x250>)
 8004f4e:	7a62      	ldrb	r2, [r4, #9]
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	f000 8085 	beq.w	8005060 <protocol_exec_rt_suspend+0x17c>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8004f56:	0799      	lsls	r1, r3, #30
 8004f58:	d41f      	bmi.n	8004f9a <protocol_exec_rt_suspend+0xb6>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8004f5a:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8004f5e:	0792      	lsls	r2, r2, #30
 8004f60:	d573      	bpl.n	800504a <protocol_exec_rt_suspend+0x166>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8004f62:	f89b 2004 	ldrb.w	r2, [fp, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8004f66:	7a21      	ldrb	r1, [r4, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8004f68:	f042 0208 	orr.w	r2, r2, #8
 8004f6c:	f88b 2004 	strb.w	r2, [fp, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8004f70:	b161      	cbz	r1, 8004f8c <protocol_exec_rt_suspend+0xa8>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8004f72:	f006 0040 	and.w	r0, r6, #64	; 0x40
 8004f76:	f7fc fb3b 	bl	80015f0 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	4648      	mov	r0, r9
 8004f7e:	f7fe fcf7 	bl	8003970 <delay_sec>
 8004f82:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8004f86:	f003 0202 	and.w	r2, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8004f8a:	b932      	cbnz	r2, 8004f9a <protocol_exec_rt_suspend+0xb6>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8004f8c:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8004f90:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8004f92:	f88b 3002 	strb.w	r3, [fp, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8004f96:	f003 f8bb 	bl	8008110 <system_set_exec_state_flag>
        }

      }
    }

    protocol_exec_rt_system();
 8004f9a:	f7ff fdbf 	bl	8004b1c <protocol_exec_rt_system>
  while (sys.suspend) {
 8004f9e:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8004fa2:	2c00      	cmp	r4, #0
 8004fa4:	d1ba      	bne.n	8004f1c <protocol_exec_rt_suspend+0x38>

  }
}
 8004fa6:	b003      	add	sp, #12
 8004fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.spindle_stop_ovr) {
 8004fac:	f89b 300b 	ldrb.w	r3, [fp, #11]
 8004fb0:	b17b      	cbz	r3, 8004fd2 <protocol_exec_rt_suspend+0xee>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 8004fb2:	079c      	lsls	r4, r3, #30
 8004fb4:	d53c      	bpl.n	8005030 <protocol_exec_rt_suspend+0x14c>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8004fb6:	4b5f      	ldr	r3, [pc, #380]	; (8005134 <protocol_exec_rt_suspend+0x250>)
 8004fb8:	7a5b      	ldrb	r3, [r3, #9]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d16f      	bne.n	800509e <protocol_exec_rt_suspend+0x1ba>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f88b 300b 	strb.w	r3, [fp, #11]
    protocol_exec_rt_system();
 8004fc4:	f7ff fdaa 	bl	8004b1c <protocol_exec_rt_system>
  while (sys.suspend) {
 8004fc8:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8004fcc:	2c00      	cmp	r4, #0
 8004fce:	d1a5      	bne.n	8004f1c <protocol_exec_rt_suspend+0x38>
 8004fd0:	e7e9      	b.n	8004fa6 <protocol_exec_rt_suspend+0xc2>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8004fd2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8004fd6:	071b      	lsls	r3, r3, #28
 8004fd8:	d5df      	bpl.n	8004f9a <protocol_exec_rt_suspend+0xb6>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8004fda:	4641      	mov	r1, r8
 8004fdc:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8004fe0:	f001 fcc4 	bl	800696c <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8004fe4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8004fe8:	f023 0308 	bic.w	r3, r3, #8
 8004fec:	f88b 3004 	strb.w	r3, [fp, #4]
    protocol_exec_rt_system();
 8004ff0:	f7ff fd94 	bl	8004b1c <protocol_exec_rt_system>
  while (sys.suspend) {
 8004ff4:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8004ff8:	2c00      	cmp	r4, #0
 8004ffa:	d18f      	bne.n	8004f1c <protocol_exec_rt_suspend+0x38>
 8004ffc:	e7d3      	b.n	8004fa6 <protocol_exec_rt_suspend+0xc2>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8004ffe:	4629      	mov	r1, r5
 8005000:	4620      	mov	r0, r4
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 8005002:	f88b 400b 	strb.w	r4, [fp, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005006:	f001 fcb1 	bl	800696c <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 800500a:	4620      	mov	r0, r4
 800500c:	f7fc faf0 	bl	80015f0 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8005010:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8005014:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 8005018:	f043 0304 	orr.w	r3, r3, #4
 800501c:	f88b 3002 	strb.w	r3, [fp, #2]
    protocol_exec_rt_system();
 8005020:	f7ff fd7c 	bl	8004b1c <protocol_exec_rt_system>
  while (sys.suspend) {
 8005024:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8005028:	2c00      	cmp	r4, #0
 800502a:	f47f af77 	bne.w	8004f1c <protocol_exec_rt_suspend+0x38>
 800502e:	e7ba      	b.n	8004fa6 <protocol_exec_rt_suspend+0xc2>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 8005030:	f013 0f0c 	tst.w	r3, #12
 8005034:	d0b1      	beq.n	8004f9a <protocol_exec_rt_suspend+0xb6>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005036:	4a3f      	ldr	r2, [pc, #252]	; (8005134 <protocol_exec_rt_suspend+0x250>)
 8005038:	7a52      	ldrb	r2, [r2, #9]
 800503a:	2a00      	cmp	r2, #0
 800503c:	d144      	bne.n	80050c8 <protocol_exec_rt_suspend+0x1e4>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 800503e:	071a      	lsls	r2, r3, #28
 8005040:	d5bd      	bpl.n	8004fbe <protocol_exec_rt_suspend+0xda>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 8005042:	2002      	movs	r0, #2
 8005044:	f003 f864 	bl	8008110 <system_set_exec_state_flag>
 8005048:	e7b9      	b.n	8004fbe <protocol_exec_rt_suspend+0xda>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800504a:	4641      	mov	r1, r8
 800504c:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005050:	f001 fc8c 	bl	800696c <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005054:	2101      	movs	r1, #1
 8005056:	4650      	mov	r0, sl
 8005058:	f7fe fc8a 	bl	8003970 <delay_sec>
 800505c:	f89b 3002 	ldrb.w	r3, [fp, #2]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005060:	7a21      	ldrb	r1, [r4, #8]
 8005062:	f003 0202 	and.w	r2, r3, #2
 8005066:	2900      	cmp	r1, #0
 8005068:	d08f      	beq.n	8004f8a <protocol_exec_rt_suspend+0xa6>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800506a:	2a00      	cmp	r2, #0
 800506c:	d081      	beq.n	8004f72 <protocol_exec_rt_suspend+0x8e>
    protocol_exec_rt_system();
 800506e:	f7ff fd55 	bl	8004b1c <protocol_exec_rt_system>
  while (sys.suspend) {
 8005072:	f89b 4002 	ldrb.w	r4, [fp, #2]
 8005076:	2c00      	cmp	r4, #0
 8005078:	f47f af50 	bne.w	8004f1c <protocol_exec_rt_suspend+0x38>
 800507c:	e793      	b.n	8004fa6 <protocol_exec_rt_suspend+0xc2>
            if (!(system_check_safety_door_ajar())) {
 800507e:	f002 fe25 	bl	8007ccc <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005082:	f89b 3002 	ldrb.w	r3, [fp, #2]
            if (!(system_check_safety_door_ajar())) {
 8005086:	2800      	cmp	r0, #0
 8005088:	f47f af5e 	bne.w	8004f48 <protocol_exec_rt_suspend+0x64>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 800508c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005090:	f88b 3002 	strb.w	r3, [fp, #2]
 8005094:	e758      	b.n	8004f48 <protocol_exec_rt_suspend+0x64>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8005096:	2020      	movs	r0, #32
 8005098:	f003 f868 	bl	800816c <system_set_exec_accessory_override_flag>
 800509c:	e733      	b.n	8004f06 <protocol_exec_rt_suspend+0x22>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800509e:	4629      	mov	r1, r5
 80050a0:	f001 fc64 	bl	800696c <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 80050a4:	2301      	movs	r3, #1
 80050a6:	f88b 300b 	strb.w	r3, [fp, #11]
    protocol_exec_rt_system();
 80050aa:	f7ff fd37 	bl	8004b1c <protocol_exec_rt_system>
  while (sys.suspend) {
 80050ae:	f89b 4002 	ldrb.w	r4, [fp, #2]
 80050b2:	2c00      	cmp	r4, #0
 80050b4:	f47f af32 	bne.w	8004f1c <protocol_exec_rt_suspend+0x38>
 80050b8:	e775      	b.n	8004fa6 <protocol_exec_rt_suspend+0xc2>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80050ba:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <protocol_exec_rt_suspend+0x250>)
 80050bc:	7a5e      	ldrb	r6, [r3, #9]
 80050be:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 80050c0:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80050c4:	4316      	orrs	r6, r2
      restore_spindle_speed = gc_state.spindle_speed;
 80050c6:	e718      	b.n	8004efa <protocol_exec_rt_suspend+0x16>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 80050c8:	200a      	movs	r0, #10
 80050ca:	f000 f949 	bl	8005360 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80050ce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80050d2:	0799      	lsls	r1, r3, #30
 80050d4:	d523      	bpl.n	800511e <protocol_exec_rt_suspend+0x23a>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80050d6:	f89b 2004 	ldrb.w	r2, [fp, #4]
 80050da:	f89b 300b 	ldrb.w	r3, [fp, #11]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	f88b 2004 	strb.w	r2, [fp, #4]
 80050e6:	e7aa      	b.n	800503e <protocol_exec_rt_suspend+0x15a>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 80050e8:	200b      	movs	r0, #11
 80050ea:	9201      	str	r2, [sp, #4]
 80050ec:	f000 f938 	bl	8005360 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80050f0:	9a01      	ldr	r2, [sp, #4]
 80050f2:	2100      	movs	r1, #0
 80050f4:	4610      	mov	r0, r2
 80050f6:	f001 fc39 	bl	800696c <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 80050fa:	9a01      	ldr	r2, [sp, #4]
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fc fa77 	bl	80015f0 <coolant_set_state>
            st_go_idle(); // Disable steppers
 8005102:	f001 fdb7 	bl	8006c74 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005106:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f47f af4b 	bne.w	8004fa6 <protocol_exec_rt_suspend+0xc2>
 8005110:	f7ff fd04 	bl	8004b1c <protocol_exec_rt_system>
 8005114:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f9      	beq.n	8005110 <protocol_exec_rt_suspend+0x22c>
 800511c:	e743      	b.n	8004fa6 <protocol_exec_rt_suspend+0xc2>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800511e:	4641      	mov	r1, r8
 8005120:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005124:	f001 fc22 	bl	800696c <spindle_set_state>
 8005128:	f89b 300b 	ldrb.w	r3, [fp, #11]
 800512c:	e787      	b.n	800503e <protocol_exec_rt_suspend+0x15a>
 800512e:	bf00      	nop
 8005130:	200014c8 	.word	0x200014c8
 8005134:	2000128c 	.word	0x2000128c
 8005138:	20001314 	.word	0x20001314

0800513c <protocol_execute_realtime>:
{
 800513c:	b508      	push	{r3, lr}
  protocol_exec_rt_system();
 800513e:	f7ff fced 	bl	8004b1c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <protocol_execute_realtime+0x18>)
 8005144:	789b      	ldrb	r3, [r3, #2]
 8005146:	b903      	cbnz	r3, 800514a <protocol_execute_realtime+0xe>
}
 8005148:	bd08      	pop	{r3, pc}
 800514a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800514e:	f7ff bec9 	b.w	8004ee4 <protocol_exec_rt_suspend>
 8005152:	bf00      	nop
 8005154:	20001314 	.word	0x20001314

08005158 <protocol_main_loop>:
{
 8005158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 800515c:	4b57      	ldr	r3, [pc, #348]	; (80052bc <protocol_main_loop+0x164>)
 800515e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005162:	071a      	lsls	r2, r3, #28
 8005164:	f100 8090 	bmi.w	8005288 <protocol_main_loop+0x130>
 8005168:	4e55      	ldr	r6, [pc, #340]	; (80052c0 <protocol_main_loop+0x168>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 800516a:	7833      	ldrb	r3, [r6, #0]
 800516c:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 8005170:	d075      	beq.n	800525e <protocol_main_loop+0x106>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 8005172:	2002      	movs	r0, #2
 8005174:	f000 f8f4 	bl	8005360 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 8005178:	2301      	movs	r3, #1
 800517a:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 800517c:	2400      	movs	r4, #0
 800517e:	4625      	mov	r5, r4
        line[char_counter] = 0; // Set string termination character.
 8005180:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80052c4 <protocol_main_loop+0x16c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8005184:	f000 ff8e 	bl	80060a4 <serial_read>
 8005188:	28ff      	cmp	r0, #255	; 0xff
 800518a:	d00f      	beq.n	80051ac <protocol_main_loop+0x54>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 800518c:	280a      	cmp	r0, #10
 800518e:	d01d      	beq.n	80051cc <protocol_main_loop+0x74>
 8005190:	280d      	cmp	r0, #13
 8005192:	d01b      	beq.n	80051cc <protocol_main_loop+0x74>
        if (line_flags) {
 8005194:	2d00      	cmp	r5, #0
 8005196:	d035      	beq.n	8005204 <protocol_main_loop+0xac>
          if (c == ')') {
 8005198:	2829      	cmp	r0, #41	; 0x29
 800519a:	d1f3      	bne.n	8005184 <protocol_main_loop+0x2c>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 800519c:	07ab      	lsls	r3, r5, #30
 800519e:	d5f1      	bpl.n	8005184 <protocol_main_loop+0x2c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80051a0:	f000 ff80 	bl	80060a4 <serial_read>
 80051a4:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 80051a6:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80051aa:	d1ef      	bne.n	800518c <protocol_main_loop+0x34>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 80051ac:	f7fe fe10 	bl	8003dd0 <plan_get_current_block>
 80051b0:	b110      	cbz	r0, 80051b8 <protocol_main_loop+0x60>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80051b2:	2002      	movs	r0, #2
 80051b4:	f002 ffac 	bl	8008110 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 80051b8:	f7ff fcb0 	bl	8004b1c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80051bc:	78b3      	ldrb	r3, [r6, #2]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d13a      	bne.n	8005238 <protocol_main_loop+0xe0>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 80051c2:	7873      	ldrb	r3, [r6, #1]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0dd      	beq.n	8005184 <protocol_main_loop+0x2c>
}
 80051c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 80051cc:	f7ff fca6 	bl	8004b1c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80051d0:	78b3      	ldrb	r3, [r6, #2]
 80051d2:	bb1b      	cbnz	r3, 800521c <protocol_main_loop+0xc4>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 80051d4:	7877      	ldrb	r7, [r6, #1]
 80051d6:	2f00      	cmp	r7, #0
 80051d8:	d1f6      	bne.n	80051c8 <protocol_main_loop+0x70>
        line[char_counter] = 0; // Set string termination character.
 80051da:	f808 7004 	strb.w	r7, [r8, r4]
				LedBlink();
 80051de:	f7fe f875 	bl	80032cc <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 80051e2:	f015 0501 	ands.w	r5, r5, #1
 80051e6:	d11c      	bne.n	8005222 <protocol_main_loop+0xca>
        } else if (line[0] == 0) {
 80051e8:	f898 4000 	ldrb.w	r4, [r8]
 80051ec:	b1fc      	cbz	r4, 800522e <protocol_main_loop+0xd6>
        } else if (line[0] == '$') {
 80051ee:	2c24      	cmp	r4, #36	; 0x24
 80051f0:	d02c      	beq.n	800524c <protocol_main_loop+0xf4>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 80051f2:	7834      	ldrb	r4, [r6, #0]
 80051f4:	f014 0421 	ands.w	r4, r4, #33	; 0x21
 80051f8:	d021      	beq.n	800523e <protocol_main_loop+0xe6>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 80051fa:	2009      	movs	r0, #9
 80051fc:	f000 f882 	bl	8005304 <report_status_message>
        char_counter = 0;
 8005200:	462c      	mov	r4, r5
 8005202:	e7bf      	b.n	8005184 <protocol_main_loop+0x2c>
          if (c <= ' ') {
 8005204:	2820      	cmp	r0, #32
 8005206:	d9bd      	bls.n	8005184 <protocol_main_loop+0x2c>
          } else if (c == '/') {
 8005208:	282f      	cmp	r0, #47	; 0x2f
 800520a:	d0bb      	beq.n	8005184 <protocol_main_loop+0x2c>
          } else if (c == '(') {
 800520c:	2828      	cmp	r0, #40	; 0x28
 800520e:	d024      	beq.n	800525a <protocol_main_loop+0x102>
          } else if (c == ';') {
 8005210:	283b      	cmp	r0, #59	; 0x3b
 8005212:	d037      	beq.n	8005284 <protocol_main_loop+0x12c>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 8005214:	2c4e      	cmp	r4, #78	; 0x4e
 8005216:	d92a      	bls.n	800526e <protocol_main_loop+0x116>
            line_flags |= LINE_FLAG_OVERFLOW;
 8005218:	2501      	movs	r5, #1
 800521a:	e7b3      	b.n	8005184 <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800521c:	f7ff fe62 	bl	8004ee4 <protocol_exec_rt_suspend>
 8005220:	e7d8      	b.n	80051d4 <protocol_main_loop+0x7c>
          report_status_message(STATUS_OVERFLOW);
 8005222:	200b      	movs	r0, #11
        char_counter = 0;
 8005224:	463c      	mov	r4, r7
        line_flags = 0;
 8005226:	463d      	mov	r5, r7
          report_status_message(STATUS_OVERFLOW);
 8005228:	f000 f86c 	bl	8005304 <report_status_message>
 800522c:	e7aa      	b.n	8005184 <protocol_main_loop+0x2c>
          report_status_message(STATUS_OK);
 800522e:	4620      	mov	r0, r4
 8005230:	f000 f868 	bl	8005304 <report_status_message>
        line_flags = 0;
 8005234:	4625      	mov	r5, r4
 8005236:	e7a5      	b.n	8005184 <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005238:	f7ff fe54 	bl	8004ee4 <protocol_exec_rt_suspend>
 800523c:	e7c1      	b.n	80051c2 <protocol_main_loop+0x6a>
          report_status_message(gc_execute_line(line));
 800523e:	4640      	mov	r0, r8
 8005240:	f7fc fae2 	bl	8001808 <gc_execute_line>
 8005244:	f000 f85e 	bl	8005304 <report_status_message>
        line_flags = 0;
 8005248:	4625      	mov	r5, r4
 800524a:	e79b      	b.n	8005184 <protocol_main_loop+0x2c>
          report_status_message(system_execute_line(line));
 800524c:	4640      	mov	r0, r8
 800524e:	f002 fd61 	bl	8007d14 <system_execute_line>
 8005252:	f000 f857 	bl	8005304 <report_status_message>
        char_counter = 0;
 8005256:	462c      	mov	r4, r5
 8005258:	e794      	b.n	8005184 <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 800525a:	2502      	movs	r5, #2
 800525c:	e792      	b.n	8005184 <protocol_main_loop+0x2c>
    sys.state = STATE_IDLE;
 800525e:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 8005260:	f002 fd34 	bl	8007ccc <system_check_safety_door_ajar>
 8005264:	b9e0      	cbnz	r0, 80052a0 <protocol_main_loop+0x148>
    system_execute_startup(line); // Execute startup script.
 8005266:	4817      	ldr	r0, [pc, #92]	; (80052c4 <protocol_main_loop+0x16c>)
 8005268:	f002 fd32 	bl	8007cd0 <system_execute_startup>
 800526c:	e786      	b.n	800517c <protocol_main_loop+0x24>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 800526e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 8005276:	bf98      	it	ls
 8005278:	3820      	subls	r0, #32
            line[char_counter++] = c;
 800527a:	1c63      	adds	r3, r4, #1
 800527c:	f808 0004 	strb.w	r0, [r8, r4]
 8005280:	b2dc      	uxtb	r4, r3
 8005282:	e77f      	b.n	8005184 <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8005284:	2504      	movs	r5, #4
 8005286:	e77d      	b.n	8005184 <protocol_main_loop+0x2c>
      if (limits_get_state()) {
 8005288:	f7fd fd12 	bl	8002cb0 <limits_get_state>
 800528c:	2800      	cmp	r0, #0
 800528e:	f43f af6b 	beq.w	8005168 <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005292:	2301      	movs	r3, #1
 8005294:	4e0a      	ldr	r6, [pc, #40]	; (80052c0 <protocol_main_loop+0x168>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8005296:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005298:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 800529a:	f000 f861 	bl	8005360 <report_feedback_message>
 800529e:	e764      	b.n	800516a <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 80052a0:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <protocol_main_loop+0x170>)
 80052a2:	7813      	ldrb	r3, [r2, #0]
 80052a4:	f043 0320 	orr.w	r3, r3, #32
 80052a8:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 80052aa:	f7ff fc37 	bl	8004b1c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80052ae:	78b3      	ldrb	r3, [r6, #2]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0d8      	beq.n	8005266 <protocol_main_loop+0x10e>
 80052b4:	f7ff fe16 	bl	8004ee4 <protocol_exec_rt_suspend>
 80052b8:	e7d5      	b.n	8005266 <protocol_main_loop+0x10e>
 80052ba:	bf00      	nop
 80052bc:	200014c8 	.word	0x200014c8
 80052c0:	20001314 	.word	0x20001314
 80052c4:	20000cac 	.word	0x20000cac
 80052c8:	20001329 	.word	0x20001329

080052cc <protocol_buffer_synchronize>:
{
 80052cc:	b510      	push	{r4, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 80052ce:	f7fe fd7f 	bl	8003dd0 <plan_get_current_block>
 80052d2:	b110      	cbz	r0, 80052da <protocol_buffer_synchronize+0xe>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80052d4:	2002      	movs	r0, #2
 80052d6:	f002 ff1b 	bl	8008110 <system_set_exec_state_flag>
 80052da:	4c09      	ldr	r4, [pc, #36]	; (8005300 <protocol_buffer_synchronize+0x34>)
  protocol_exec_rt_system();
 80052dc:	f7ff fc1e 	bl	8004b1c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80052e0:	78a3      	ldrb	r3, [r4, #2]
 80052e2:	b94b      	cbnz	r3, 80052f8 <protocol_buffer_synchronize+0x2c>
    if (sys.abort) { return; } // Check for system abort
 80052e4:	7863      	ldrb	r3, [r4, #1]
 80052e6:	b933      	cbnz	r3, 80052f6 <protocol_buffer_synchronize+0x2a>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 80052e8:	f7fe fd72 	bl	8003dd0 <plan_get_current_block>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d1f5      	bne.n	80052dc <protocol_buffer_synchronize+0x10>
 80052f0:	7823      	ldrb	r3, [r4, #0]
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d0f2      	beq.n	80052dc <protocol_buffer_synchronize+0x10>
}
 80052f6:	bd10      	pop	{r4, pc}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80052f8:	f7ff fdf4 	bl	8004ee4 <protocol_exec_rt_suspend>
 80052fc:	e7f2      	b.n	80052e4 <protocol_buffer_synchronize+0x18>
 80052fe:	bf00      	nop
 8005300:	20001314 	.word	0x20001314

08005304 <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 8005304:	b910      	cbnz	r0, 800530c <report_status_message+0x8>
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
 8005306:	4808      	ldr	r0, [pc, #32]	; (8005328 <report_status_message+0x24>)
 8005308:	f7ff b8ac 	b.w	8004464 <printString>
{
 800530c:	b510      	push	{r4, lr}
 800530e:	4604      	mov	r4, r0
    default:
      printPgmString(PSTR("error:"));
 8005310:	4806      	ldr	r0, [pc, #24]	; (800532c <report_status_message+0x28>)
 8005312:	f7ff f8a7 	bl	8004464 <printString>
      print_uint8_base10(status_code);
 8005316:	4620      	mov	r0, r4
 8005318:	f7ff f8b0 	bl	800447c <print_uint8_base10>
      report_util_line_feed();
  }
}
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005320:	4803      	ldr	r0, [pc, #12]	; (8005330 <report_status_message+0x2c>)
 8005322:	f7ff b89f 	b.w	8004464 <printString>
 8005326:	bf00      	nop
 8005328:	0800a838 	.word	0x0800a838
 800532c:	0800a840 	.word	0x0800a840
 8005330:	0800a848 	.word	0x0800a848

08005334 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8005334:	b510      	push	{r4, lr}
 8005336:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 8005338:	4807      	ldr	r0, [pc, #28]	; (8005358 <report_alarm_message+0x24>)
 800533a:	f7ff f893 	bl	8004464 <printString>
  print_uint8_base10(alarm_code);
 800533e:	4620      	mov	r0, r4
 8005340:	f7ff f89c 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005344:	4805      	ldr	r0, [pc, #20]	; (800535c <report_alarm_message+0x28>)
 8005346:	f7ff f88d 	bl	8004464 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 800534a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 800534e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005352:	f7fe bb45 	b.w	80039e0 <delay_ms>
 8005356:	bf00      	nop
 8005358:	0800a84c 	.word	0x0800a84c
 800535c:	0800a848 	.word	0x0800a848

08005360 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8005360:	b510      	push	{r4, lr}
 8005362:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 8005364:	4820      	ldr	r0, [pc, #128]	; (80053e8 <report_feedback_message+0x88>)
 8005366:	f7ff f87d 	bl	8004464 <printString>
  switch(message_code) {
 800536a:	1e60      	subs	r0, r4, #1
 800536c:	280a      	cmp	r0, #10
 800536e:	d80a      	bhi.n	8005386 <report_feedback_message+0x26>
 8005370:	e8df f000 	tbb	[pc, r0]
 8005374:	1d191511 	.word	0x1d191511
 8005378:	2d292521 	.word	0x2d292521
 800537c:	3531      	.short	0x3531
 800537e:	06          	.byte	0x06
 800537f:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 8005380:	481a      	ldr	r0, [pc, #104]	; (80053ec <report_feedback_message+0x8c>)
 8005382:	f7ff f86f 	bl	8004464 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005386:	205d      	movs	r0, #93	; 0x5d
 8005388:	f000 fe62 	bl	8006050 <serial_write>
  }
  report_util_feedback_line_feed();
}
 800538c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005390:	4817      	ldr	r0, [pc, #92]	; (80053f0 <report_feedback_message+0x90>)
 8005392:	f7ff b867 	b.w	8004464 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 8005396:	4817      	ldr	r0, [pc, #92]	; (80053f4 <report_feedback_message+0x94>)
 8005398:	f7ff f864 	bl	8004464 <printString>
 800539c:	e7f3      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 800539e:	4816      	ldr	r0, [pc, #88]	; (80053f8 <report_feedback_message+0x98>)
 80053a0:	f7ff f860 	bl	8004464 <printString>
 80053a4:	e7ef      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 80053a6:	4815      	ldr	r0, [pc, #84]	; (80053fc <report_feedback_message+0x9c>)
 80053a8:	f7ff f85c 	bl	8004464 <printString>
 80053ac:	e7eb      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 80053ae:	4814      	ldr	r0, [pc, #80]	; (8005400 <report_feedback_message+0xa0>)
 80053b0:	f7ff f858 	bl	8004464 <printString>
 80053b4:	e7e7      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 80053b6:	4813      	ldr	r0, [pc, #76]	; (8005404 <report_feedback_message+0xa4>)
 80053b8:	f7ff f854 	bl	8004464 <printString>
 80053bc:	e7e3      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 80053be:	4812      	ldr	r0, [pc, #72]	; (8005408 <report_feedback_message+0xa8>)
 80053c0:	f7ff f850 	bl	8004464 <printString>
 80053c4:	e7df      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 80053c6:	4811      	ldr	r0, [pc, #68]	; (800540c <report_feedback_message+0xac>)
 80053c8:	f7ff f84c 	bl	8004464 <printString>
 80053cc:	e7db      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 80053ce:	4810      	ldr	r0, [pc, #64]	; (8005410 <report_feedback_message+0xb0>)
 80053d0:	f7ff f848 	bl	8004464 <printString>
 80053d4:	e7d7      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 80053d6:	480f      	ldr	r0, [pc, #60]	; (8005414 <report_feedback_message+0xb4>)
 80053d8:	f7ff f844 	bl	8004464 <printString>
 80053dc:	e7d3      	b.n	8005386 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 80053de:	480e      	ldr	r0, [pc, #56]	; (8005418 <report_feedback_message+0xb8>)
 80053e0:	f7ff f840 	bl	8004464 <printString>
 80053e4:	e7cf      	b.n	8005386 <report_feedback_message+0x26>
 80053e6:	bf00      	nop
 80053e8:	0800a854 	.word	0x0800a854
 80053ec:	0800a8f8 	.word	0x0800a8f8
 80053f0:	0800a848 	.word	0x0800a848
 80053f4:	0800a85c 	.word	0x0800a85c
 80053f8:	0800a870 	.word	0x0800a870
 80053fc:	0800a884 	.word	0x0800a884
 8005400:	0800a898 	.word	0x0800a898
 8005404:	0800a8a0 	.word	0x0800a8a0
 8005408:	0800a8ac 	.word	0x0800a8ac
 800540c:	0800a8b8 	.word	0x0800a8b8
 8005410:	0800a8c8 	.word	0x0800a8c8
 8005414:	0800a8d0 	.word	0x0800a8d0
 8005418:	0800a8e4 	.word	0x0800a8e4

0800541c <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <report_init_message+0x8>)
 800541e:	f7ff b821 	b.w	8004464 <printString>
 8005422:	bf00      	nop
 8005424:	0800a904 	.word	0x0800a904

08005428 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8005428:	4801      	ldr	r0, [pc, #4]	; (8005430 <report_grbl_help+0x8>)
 800542a:	f7ff b81b 	b.w	8004464 <printString>
 800542e:	bf00      	nop
 8005430:	0800a924 	.word	0x0800a924

08005434 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8005438:	4ce0      	ldr	r4, [pc, #896]	; (80057bc <report_grbl_settings+0x388>)
void report_grbl_settings() {
 800543a:	b083      	sub	sp, #12
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800543c:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 800543e:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005442:	f000 fe05 	bl	8006050 <serial_write>
 8005446:	2000      	movs	r0, #0
 8005448:	f7ff f818 	bl	800447c <print_uint8_base10>
 800544c:	203d      	movs	r0, #61	; 0x3d
 800544e:	f000 fdff 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005452:	4628      	mov	r0, r5
 8005454:	f7ff f812 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005458:	48d9      	ldr	r0, [pc, #868]	; (80057c0 <report_grbl_settings+0x38c>)
 800545a:	f7ff f803 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800545e:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 8005460:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005464:	f000 fdf4 	bl	8006050 <serial_write>
 8005468:	2001      	movs	r0, #1
 800546a:	f7ff f807 	bl	800447c <print_uint8_base10>
 800546e:	203d      	movs	r0, #61	; 0x3d
 8005470:	f000 fdee 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005474:	4628      	mov	r0, r5
 8005476:	f7ff f801 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800547a:	48d1      	ldr	r0, [pc, #836]	; (80057c0 <report_grbl_settings+0x38c>)
 800547c:	f7fe fff2 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005480:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 8005482:	8e65      	ldrh	r5, [r4, #50]	; 0x32
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005484:	f000 fde4 	bl	8006050 <serial_write>
 8005488:	2002      	movs	r0, #2
 800548a:	f7fe fff7 	bl	800447c <print_uint8_base10>
 800548e:	203d      	movs	r0, #61	; 0x3d
 8005490:	f000 fdde 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005494:	b2e8      	uxtb	r0, r5
 8005496:	f7fe fff1 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800549a:	48c9      	ldr	r0, [pc, #804]	; (80057c0 <report_grbl_settings+0x38c>)
 800549c:	f7fe ffe2 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80054a0:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 80054a2:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80054a4:	f000 fdd4 	bl	8006050 <serial_write>
 80054a8:	2003      	movs	r0, #3
 80054aa:	f7fe ffe7 	bl	800447c <print_uint8_base10>
 80054ae:	203d      	movs	r0, #61	; 0x3d
 80054b0:	f000 fdce 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 80054b4:	b2e8      	uxtb	r0, r5
 80054b6:	f7fe ffe1 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80054ba:	48c1      	ldr	r0, [pc, #772]	; (80057c0 <report_grbl_settings+0x38c>)
 80054bc:	f7fe ffd2 	bl	8004464 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 80054c0:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80054c4:	2024      	movs	r0, #36	; 0x24
 80054c6:	f000 fdc3 	bl	8006050 <serial_write>
 80054ca:	2004      	movs	r0, #4
 80054cc:	f7fe ffd6 	bl	800447c <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 80054d0:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80054d4:	203d      	movs	r0, #61	; 0x3d
 80054d6:	f000 fdbb 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 80054da:	4628      	mov	r0, r5
 80054dc:	f7fe ffce 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80054e0:	48b7      	ldr	r0, [pc, #732]	; (80057c0 <report_grbl_settings+0x38c>)
 80054e2:	f7fe ffbf 	bl	8004464 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 80054e6:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80054ea:	2024      	movs	r0, #36	; 0x24
 80054ec:	f000 fdb0 	bl	8006050 <serial_write>
 80054f0:	2005      	movs	r0, #5
 80054f2:	f7fe ffc3 	bl	800447c <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 80054f6:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80054fa:	203d      	movs	r0, #61	; 0x3d
 80054fc:	f000 fda8 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005500:	4628      	mov	r0, r5
 8005502:	f7fe ffbb 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005506:	48ae      	ldr	r0, [pc, #696]	; (80057c0 <report_grbl_settings+0x38c>)
 8005508:	f7fe ffac 	bl	8004464 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 800550c:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005510:	2024      	movs	r0, #36	; 0x24
 8005512:	f000 fd9d 	bl	8006050 <serial_write>
 8005516:	2006      	movs	r0, #6
 8005518:	f7fe ffb0 	bl	800447c <print_uint8_base10>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 800551c:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800551e:	203d      	movs	r0, #61	; 0x3d
 8005520:	f000 fd96 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005524:	4628      	mov	r0, r5
 8005526:	f7fe ffa9 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800552a:	48a5      	ldr	r0, [pc, #660]	; (80057c0 <report_grbl_settings+0x38c>)
 800552c:	f7fe ff9a 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005530:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 8005532:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005536:	f000 fd8b 	bl	8006050 <serial_write>
 800553a:	200a      	movs	r0, #10
 800553c:	f7fe ff9e 	bl	800447c <print_uint8_base10>
 8005540:	203d      	movs	r0, #61	; 0x3d
 8005542:	f000 fd85 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005546:	4628      	mov	r0, r5
 8005548:	f7fe ff98 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800554c:	489c      	ldr	r0, [pc, #624]	; (80057c0 <report_grbl_settings+0x38c>)
 800554e:	f7fe ff89 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005552:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8005554:	6ba5      	ldr	r5, [r4, #56]	; 0x38
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005556:	f000 fd7b 	bl	8006050 <serial_write>
 800555a:	200b      	movs	r0, #11
 800555c:	f7fe ff8e 	bl	800447c <print_uint8_base10>
 8005560:	203d      	movs	r0, #61	; 0x3d
 8005562:	f000 fd75 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 8005566:	2103      	movs	r1, #3
 8005568:	4628      	mov	r0, r5
 800556a:	f7fe ffc5 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800556e:	4894      	ldr	r0, [pc, #592]	; (80057c0 <report_grbl_settings+0x38c>)
 8005570:	f7fe ff78 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005574:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 8005576:	6be5      	ldr	r5, [r4, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005578:	f000 fd6a 	bl	8006050 <serial_write>
 800557c:	200c      	movs	r0, #12
 800557e:	f7fe ff7d 	bl	800447c <print_uint8_base10>
 8005582:	203d      	movs	r0, #61	; 0x3d
 8005584:	f000 fd64 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 8005588:	2103      	movs	r1, #3
 800558a:	4628      	mov	r0, r5
 800558c:	f7fe ffb4 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005590:	488b      	ldr	r0, [pc, #556]	; (80057c0 <report_grbl_settings+0x38c>)
 8005592:	f7fe ff67 	bl	8004464 <printString>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8005596:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800559a:	2024      	movs	r0, #36	; 0x24
 800559c:	f000 fd58 	bl	8006050 <serial_write>
 80055a0:	200d      	movs	r0, #13
 80055a2:	f7fe ff6b 	bl	800447c <print_uint8_base10>
 80055a6:	f005 0501 	and.w	r5, r5, #1
 80055aa:	203d      	movs	r0, #61	; 0x3d
 80055ac:	f000 fd50 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 80055b0:	4628      	mov	r0, r5
 80055b2:	f7fe ff63 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80055b6:	4882      	ldr	r0, [pc, #520]	; (80057c0 <report_grbl_settings+0x38c>)
 80055b8:	f7fe ff54 	bl	8004464 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 80055bc:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80055c0:	2024      	movs	r0, #36	; 0x24
 80055c2:	f000 fd45 	bl	8006050 <serial_write>
 80055c6:	2014      	movs	r0, #20
 80055c8:	f7fe ff58 	bl	800447c <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 80055cc:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80055d0:	203d      	movs	r0, #61	; 0x3d
 80055d2:	f000 fd3d 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7fe ff50 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80055dc:	4878      	ldr	r0, [pc, #480]	; (80057c0 <report_grbl_settings+0x38c>)
 80055de:	f7fe ff41 	bl	8004464 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 80055e2:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80055e6:	2024      	movs	r0, #36	; 0x24
 80055e8:	f000 fd32 	bl	8006050 <serial_write>
 80055ec:	2015      	movs	r0, #21
 80055ee:	f7fe ff45 	bl	800447c <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 80055f2:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80055f6:	203d      	movs	r0, #61	; 0x3d
 80055f8:	f000 fd2a 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 80055fc:	4628      	mov	r0, r5
 80055fe:	f7fe ff3d 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005602:	486f      	ldr	r0, [pc, #444]	; (80057c0 <report_grbl_settings+0x38c>)
 8005604:	f7fe ff2e 	bl	8004464 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8005608:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800560c:	2024      	movs	r0, #36	; 0x24
 800560e:	f000 fd1f 	bl	8006050 <serial_write>
 8005612:	2016      	movs	r0, #22
 8005614:	f7fe ff32 	bl	800447c <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8005618:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800561c:	203d      	movs	r0, #61	; 0x3d
 800561e:	f000 fd17 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005622:	4628      	mov	r0, r5
 8005624:	f7fe ff2a 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005628:	4865      	ldr	r0, [pc, #404]	; (80057c0 <report_grbl_settings+0x38c>)
 800562a:	f7fe ff1b 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800562e:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8005630:	f8b4 504a 	ldrh.w	r5, [r4, #74]	; 0x4a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005634:	f000 fd0c 	bl	8006050 <serial_write>
 8005638:	2017      	movs	r0, #23
 800563a:	f7fe ff1f 	bl	800447c <print_uint8_base10>
 800563e:	203d      	movs	r0, #61	; 0x3d
 8005640:	f000 fd06 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005644:	b2e8      	uxtb	r0, r5
 8005646:	f7fe ff19 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800564a:	485d      	ldr	r0, [pc, #372]	; (80057c0 <report_grbl_settings+0x38c>)
 800564c:	f7fe ff0a 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005650:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8005652:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005654:	f000 fcfc 	bl	8006050 <serial_write>
 8005658:	2018      	movs	r0, #24
 800565a:	f7fe ff0f 	bl	800447c <print_uint8_base10>
 800565e:	203d      	movs	r0, #61	; 0x3d
 8005660:	f000 fcf6 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 8005664:	2103      	movs	r1, #3
 8005666:	4628      	mov	r0, r5
 8005668:	f7fe ff46 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800566c:	4854      	ldr	r0, [pc, #336]	; (80057c0 <report_grbl_settings+0x38c>)
 800566e:	f7fe fef9 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005672:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8005674:	6d25      	ldr	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005676:	f000 fceb 	bl	8006050 <serial_write>
 800567a:	2019      	movs	r0, #25
 800567c:	f7fe fefe 	bl	800447c <print_uint8_base10>
 8005680:	203d      	movs	r0, #61	; 0x3d
 8005682:	f000 fce5 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 8005686:	2103      	movs	r1, #3
 8005688:	4628      	mov	r0, r5
 800568a:	f7fe ff35 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800568e:	484c      	ldr	r0, [pc, #304]	; (80057c0 <report_grbl_settings+0x38c>)
 8005690:	f7fe fee8 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005694:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8005696:	f8b4 5054 	ldrh.w	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800569a:	f000 fcd9 	bl	8006050 <serial_write>
 800569e:	201a      	movs	r0, #26
 80056a0:	f7fe feec 	bl	800447c <print_uint8_base10>
 80056a4:	203d      	movs	r0, #61	; 0x3d
 80056a6:	f000 fcd3 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 80056aa:	b2e8      	uxtb	r0, r5
 80056ac:	f7fe fee6 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80056b0:	4843      	ldr	r0, [pc, #268]	; (80057c0 <report_grbl_settings+0x38c>)
 80056b2:	f7fe fed7 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80056b6:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 80056b8:	6da5      	ldr	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80056ba:	f000 fcc9 	bl	8006050 <serial_write>
 80056be:	201b      	movs	r0, #27
 80056c0:	f7fe fedc 	bl	800447c <print_uint8_base10>
 80056c4:	203d      	movs	r0, #61	; 0x3d
 80056c6:	f000 fcc3 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 80056ca:	2103      	movs	r1, #3
 80056cc:	4628      	mov	r0, r5
 80056ce:	f7fe ff13 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80056d2:	483b      	ldr	r0, [pc, #236]	; (80057c0 <report_grbl_settings+0x38c>)
 80056d4:	f7fe fec6 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80056d8:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 80056da:	6c25      	ldr	r5, [r4, #64]	; 0x40
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80056dc:	f000 fcb8 	bl	8006050 <serial_write>
 80056e0:	201e      	movs	r0, #30
 80056e2:	f7fe fecb 	bl	800447c <print_uint8_base10>
 80056e6:	203d      	movs	r0, #61	; 0x3d
 80056e8:	f000 fcb2 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 80056ec:	2100      	movs	r1, #0
 80056ee:	4628      	mov	r0, r5
 80056f0:	f7fe ff02 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80056f4:	4832      	ldr	r0, [pc, #200]	; (80057c0 <report_grbl_settings+0x38c>)
 80056f6:	f7fe feb5 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80056fa:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 80056fc:	6c65      	ldr	r5, [r4, #68]	; 0x44
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80056fe:	f000 fca7 	bl	8006050 <serial_write>
 8005702:	201f      	movs	r0, #31
 8005704:	f7fe feba 	bl	800447c <print_uint8_base10>
 8005708:	203d      	movs	r0, #61	; 0x3d
 800570a:	f000 fca1 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 800570e:	2100      	movs	r1, #0
 8005710:	4628      	mov	r0, r5
 8005712:	f7fe fef1 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005716:	482a      	ldr	r0, [pc, #168]	; (80057c0 <report_grbl_settings+0x38c>)
 8005718:	f7fe fea4 	bl	8004464 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800571c:	2024      	movs	r0, #36	; 0x24
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 800571e:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005722:	f000 fc95 	bl	8006050 <serial_write>
 8005726:	2020      	movs	r0, #32
 8005728:	f7fe fea8 	bl	800447c <print_uint8_base10>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 800572c:	f3c4 0440 	ubfx	r4, r4, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005730:	203d      	movs	r0, #61	; 0x3d
 8005732:	f000 fc8d 	bl	8006050 <serial_write>
  print_uint8_base10(val);
 8005736:	4620      	mov	r0, r4
 8005738:	f7fe fea0 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800573c:	4820      	ldr	r0, [pc, #128]	; (80057c0 <report_grbl_settings+0x38c>)
 800573e:	f7fe fe91 	bl	8004464 <printString>
 8005742:	2700      	movs	r7, #0
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8005744:	f04f 0864 	mov.w	r8, #100	; 0x64
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005748:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80057c0 <report_grbl_settings+0x38c>
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 800574c:	2f02      	cmp	r7, #2
void report_grbl_settings() {
 800574e:	f04f 0401 	mov.w	r4, #1
 8005752:	4e1a      	ldr	r6, [pc, #104]	; (80057bc <report_grbl_settings+0x388>)
 8005754:	fa5f fb87 	uxtb.w	fp, r7
    for (idx=0; idx<N_AXIS; idx++) {
 8005758:	f108 3aff 	add.w	sl, r8, #4294967295
      switch (set_idx) {
 800575c:	d023      	beq.n	80057a6 <report_grbl_settings+0x372>
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 800575e:	eb04 000a 	add.w	r0, r4, sl
      switch (set_idx) {
 8005762:	f1bb 0f03 	cmp.w	fp, #3
 8005766:	b2c5      	uxtb	r5, r0
 8005768:	d042      	beq.n	80057f0 <report_grbl_settings+0x3bc>
 800576a:	f1bb 0f01 	cmp.w	fp, #1
 800576e:	d038      	beq.n	80057e2 <report_grbl_settings+0x3ae>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005770:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8005772:	6832      	ldr	r2, [r6, #0]
 8005774:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005776:	f000 fc6b 	bl	8006050 <serial_write>
 800577a:	4628      	mov	r0, r5
 800577c:	f7fe fe7e 	bl	800447c <print_uint8_base10>
 8005780:	203d      	movs	r0, #61	; 0x3d
 8005782:	f000 fc65 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 8005786:	9a01      	ldr	r2, [sp, #4]
 8005788:	2103      	movs	r1, #3
 800578a:	4610      	mov	r0, r2
 800578c:	f7fe feb4 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005790:	4648      	mov	r0, r9
 8005792:	f7fe fe67 	bl	8004464 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8005796:	2c03      	cmp	r4, #3
 8005798:	d017      	beq.n	80057ca <report_grbl_settings+0x396>
 800579a:	3401      	adds	r4, #1
      switch (set_idx) {
 800579c:	2f02      	cmp	r7, #2
 800579e:	b2e4      	uxtb	r4, r4
 80057a0:	f106 0604 	add.w	r6, r6, #4
 80057a4:	d1db      	bne.n	800575e <report_grbl_settings+0x32a>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 80057a6:	4907      	ldr	r1, [pc, #28]	; (80057c4 <report_grbl_settings+0x390>)
 80057a8:	69b0      	ldr	r0, [r6, #24]
 80057aa:	f7fb f873 	bl	8000894 <__aeabi_fmul>
 80057ae:	eb04 050a 	add.w	r5, r4, sl
 80057b2:	9001      	str	r0, [sp, #4]
 80057b4:	b2ed      	uxtb	r5, r5
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80057b6:	2024      	movs	r0, #36	; 0x24
 80057b8:	e006      	b.n	80057c8 <report_grbl_settings+0x394>
 80057ba:	bf00      	nop
 80057bc:	200014c8 	.word	0x200014c8
 80057c0:	0800a848 	.word	0x0800a848
 80057c4:	3991a2b4 	.word	0x3991a2b4
 80057c8:	e7d5      	b.n	8005776 <report_grbl_settings+0x342>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 80057ca:	f108 080a 	add.w	r8, r8, #10
 80057ce:	fa5f f888 	uxtb.w	r8, r8
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 80057d2:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 80057d6:	f107 0701 	add.w	r7, r7, #1
 80057da:	d1b7      	bne.n	800574c <report_grbl_settings+0x318>
  }
}
 80057dc:	b003      	add	sp, #12
 80057de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 80057e2:	68f2      	ldr	r2, [r6, #12]
 80057e4:	eb04 050a 	add.w	r5, r4, sl
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80057e8:	2024      	movs	r0, #36	; 0x24
 80057ea:	b2ed      	uxtb	r5, r5
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 80057ec:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80057ee:	e7c2      	b.n	8005776 <report_grbl_settings+0x342>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80057f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80057f2:	eb04 050a 	add.w	r5, r4, sl
 80057f6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80057fa:	2024      	movs	r0, #36	; 0x24
 80057fc:	b2ed      	uxtb	r5, r5
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 80057fe:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8005800:	f000 fc26 	bl	8006050 <serial_write>
 8005804:	4628      	mov	r0, r5
 8005806:	f7fe fe39 	bl	800447c <print_uint8_base10>
 800580a:	203d      	movs	r0, #61	; 0x3d
 800580c:	f000 fc20 	bl	8006050 <serial_write>
  printFloat(val, n_decimal);
 8005810:	9a01      	ldr	r2, [sp, #4]
 8005812:	4659      	mov	r1, fp
 8005814:	4610      	mov	r0, r2
 8005816:	f7fe fe6f 	bl	80044f8 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800581a:	4648      	mov	r0, r9
 800581c:	f7fe fe22 	bl	8004464 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8005820:	2c03      	cmp	r4, #3
 8005822:	d1ba      	bne.n	800579a <report_grbl_settings+0x366>
}
 8005824:	b003      	add	sp, #12
 8005826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582a:	bf00      	nop

0800582c <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 800582c:	b500      	push	{lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 800582e:	4813      	ldr	r0, [pc, #76]	; (800587c <report_probe_parameters+0x50>)
{
 8005830:	b085      	sub	sp, #20
  printPgmString(PSTR("[PRB:"));
 8005832:	f7fe fe17 	bl	8004464 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8005836:	4912      	ldr	r1, [pc, #72]	; (8005880 <report_probe_parameters+0x54>)
 8005838:	a801      	add	r0, sp, #4
 800583a:	f002 fc1f 	bl	800807c <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 800583e:	9801      	ldr	r0, [sp, #4]
 8005840:	f7fe ff50 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005844:	202c      	movs	r0, #44	; 0x2c
 8005846:	f000 fc03 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800584a:	9802      	ldr	r0, [sp, #8]
 800584c:	f7fe ff4a 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005850:	202c      	movs	r0, #44	; 0x2c
 8005852:	f000 fbfd 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005856:	9803      	ldr	r0, [sp, #12]
 8005858:	f7fe ff44 	bl	80046e4 <printFloat_CoordValue>
  report_util_axis_values(print_position);
  serial_write(':');
 800585c:	203a      	movs	r0, #58	; 0x3a
 800585e:	f000 fbf7 	bl	8006050 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8005862:	4b08      	ldr	r3, [pc, #32]	; (8005884 <report_probe_parameters+0x58>)
 8005864:	7958      	ldrb	r0, [r3, #5]
 8005866:	f7fe fe09 	bl	800447c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 800586a:	205d      	movs	r0, #93	; 0x5d
 800586c:	f000 fbf0 	bl	8006050 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005870:	4805      	ldr	r0, [pc, #20]	; (8005888 <report_probe_parameters+0x5c>)
 8005872:	f7fe fdf7 	bl	8004464 <printString>
  report_util_feedback_line_feed();
}
 8005876:	b005      	add	sp, #20
 8005878:	f85d fb04 	ldr.w	pc, [sp], #4
 800587c:	0800a970 	.word	0x0800a970
 8005880:	2000132c 	.word	0x2000132c
 8005884:	20001314 	.word	0x20001314
 8005888:	0800a848 	.word	0x0800a848

0800588c <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 800588c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005890:	2500      	movs	r5, #0
 8005892:	b086      	sub	sp, #24
 8005894:	b2ec      	uxtb	r4, r5
  float coord_data[N_AXIS];
  uint8_t coord_select;
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8005896:	4620      	mov	r0, r4
 8005898:	4669      	mov	r1, sp
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 800589a:	4e56      	ldr	r6, [pc, #344]	; (80059f4 <report_ngc_parameters+0x168>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 800589c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8005a1c <report_ngc_parameters+0x190>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80058a0:	4f55      	ldr	r7, [pc, #340]	; (80059f8 <report_ngc_parameters+0x16c>)
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 80058a2:	f000 fde1 	bl	8006468 <settings_read_coord_data>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f000 8094 	beq.w	80059d4 <report_ngc_parameters+0x148>
    printPgmString(PSTR("[G"));
 80058ac:	4630      	mov	r0, r6
 80058ae:	f7fe fdd9 	bl	8004464 <printString>
    switch (coord_select) {
 80058b2:	2d06      	cmp	r5, #6
 80058b4:	f000 809a 	beq.w	80059ec <report_ngc_parameters+0x160>
 80058b8:	2c07      	cmp	r4, #7
 80058ba:	d165      	bne.n	8005988 <report_ngc_parameters+0xfc>
      case 7: printPgmString(PSTR("30")); break;
 80058bc:	484f      	ldr	r0, [pc, #316]	; (80059fc <report_ngc_parameters+0x170>)
 80058be:	f7fe fdd1 	bl	8004464 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 80058c2:	203a      	movs	r0, #58	; 0x3a
 80058c4:	f000 fbc4 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80058c8:	9800      	ldr	r0, [sp, #0]
 80058ca:	f7fe ff0b 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80058ce:	202c      	movs	r0, #44	; 0x2c
 80058d0:	f000 fbbe 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80058d4:	9801      	ldr	r0, [sp, #4]
 80058d6:	f7fe ff05 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80058da:	202c      	movs	r0, #44	; 0x2c
 80058dc:	f000 fbb8 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80058e0:	9802      	ldr	r0, [sp, #8]
 80058e2:	f7fe feff 	bl	80046e4 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80058e6:	205d      	movs	r0, #93	; 0x5d
 80058e8:	f000 fbb2 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80058ec:	4c44      	ldr	r4, [pc, #272]	; (8005a00 <report_ngc_parameters+0x174>)
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80058ee:	4842      	ldr	r0, [pc, #264]	; (80059f8 <report_ngc_parameters+0x16c>)
 80058f0:	f7fe fdb8 	bl	8004464 <printString>
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 80058f4:	4843      	ldr	r0, [pc, #268]	; (8005a04 <report_ngc_parameters+0x178>)
 80058f6:	f7fe fdb5 	bl	8004464 <printString>
    printFloat_CoordValue(axis_value[idx]);
 80058fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80058fc:	f7fe fef2 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005900:	202c      	movs	r0, #44	; 0x2c
 8005902:	f000 fba5 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005906:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005908:	f7fe feec 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800590c:	202c      	movs	r0, #44	; 0x2c
 800590e:	f000 fb9f 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005912:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005914:	f7fe fee6 	bl	80046e4 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005918:	205d      	movs	r0, #93	; 0x5d
 800591a:	f000 fb99 	bl	8006050 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800591e:	4836      	ldr	r0, [pc, #216]	; (80059f8 <report_ngc_parameters+0x16c>)
 8005920:	f7fe fda0 	bl	8004464 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8005924:	4838      	ldr	r0, [pc, #224]	; (8005a08 <report_ngc_parameters+0x17c>)
 8005926:	f7fe fd9d 	bl	8004464 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 800592a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800592c:	f7fe feda 	bl	80046e4 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005930:	205d      	movs	r0, #93	; 0x5d
 8005932:	f000 fb8d 	bl	8006050 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005936:	4830      	ldr	r0, [pc, #192]	; (80059f8 <report_ngc_parameters+0x16c>)
 8005938:	f7fe fd94 	bl	8004464 <printString>
  printPgmString(PSTR("[PRB:"));
 800593c:	4833      	ldr	r0, [pc, #204]	; (8005a0c <report_ngc_parameters+0x180>)
 800593e:	f7fe fd91 	bl	8004464 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8005942:	4933      	ldr	r1, [pc, #204]	; (8005a10 <report_ngc_parameters+0x184>)
 8005944:	a803      	add	r0, sp, #12
 8005946:	f002 fb99 	bl	800807c <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 800594a:	9803      	ldr	r0, [sp, #12]
 800594c:	f7fe feca 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005950:	202c      	movs	r0, #44	; 0x2c
 8005952:	f000 fb7d 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005956:	9804      	ldr	r0, [sp, #16]
 8005958:	f7fe fec4 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800595c:	202c      	movs	r0, #44	; 0x2c
 800595e:	f000 fb77 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005962:	9805      	ldr	r0, [sp, #20]
 8005964:	f7fe febe 	bl	80046e4 <printFloat_CoordValue>
  serial_write(':');
 8005968:	203a      	movs	r0, #58	; 0x3a
 800596a:	f000 fb71 	bl	8006050 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 800596e:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <report_ngc_parameters+0x188>)
 8005970:	7958      	ldrb	r0, [r3, #5]
 8005972:	f7fe fd83 	bl	800447c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005976:	205d      	movs	r0, #93	; 0x5d
 8005978:	f000 fb6a 	bl	8006050 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800597c:	481e      	ldr	r0, [pc, #120]	; (80059f8 <report_ngc_parameters+0x16c>)
 800597e:	f7fe fd71 	bl	8004464 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8005982:	b006      	add	sp, #24
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8005988:	f104 0036 	add.w	r0, r4, #54	; 0x36
 800598c:	b2c0      	uxtb	r0, r0
 800598e:	f7fe fd75 	bl	800447c <print_uint8_base10>
    serial_write(':');
 8005992:	203a      	movs	r0, #58	; 0x3a
 8005994:	f000 fb5c 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005998:	9800      	ldr	r0, [sp, #0]
 800599a:	f7fe fea3 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800599e:	202c      	movs	r0, #44	; 0x2c
 80059a0:	f000 fb56 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80059a4:	9801      	ldr	r0, [sp, #4]
 80059a6:	f7fe fe9d 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80059aa:	202c      	movs	r0, #44	; 0x2c
 80059ac:	f000 fb50 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80059b0:	9802      	ldr	r0, [sp, #8]
 80059b2:	f7fe fe97 	bl	80046e4 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80059b6:	3501      	adds	r5, #1
 80059b8:	205d      	movs	r0, #93	; 0x5d
 80059ba:	f000 fb49 	bl	8006050 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80059be:	b2ec      	uxtb	r4, r5
 80059c0:	4638      	mov	r0, r7
 80059c2:	f7fe fd4f 	bl	8004464 <printString>
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 80059c6:	4620      	mov	r0, r4
 80059c8:	4669      	mov	r1, sp
 80059ca:	f000 fd4d 	bl	8006468 <settings_read_coord_data>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f47f af6c 	bne.w	80058ac <report_ngc_parameters+0x20>
      printPgmString(PSTR("error:"));
 80059d4:	4810      	ldr	r0, [pc, #64]	; (8005a18 <report_ngc_parameters+0x18c>)
 80059d6:	f7fe fd45 	bl	8004464 <printString>
      print_uint8_base10(status_code);
 80059da:	2007      	movs	r0, #7
 80059dc:	f7fe fd4e 	bl	800447c <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80059e0:	4805      	ldr	r0, [pc, #20]	; (80059f8 <report_ngc_parameters+0x16c>)
 80059e2:	f7fe fd3f 	bl	8004464 <printString>
}
 80059e6:	b006      	add	sp, #24
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      case 6: printPgmString(PSTR("28")); break;
 80059ec:	4640      	mov	r0, r8
 80059ee:	f7fe fd39 	bl	8004464 <printString>
    serial_write(':');
 80059f2:	e7ce      	b.n	8005992 <report_ngc_parameters+0x106>
 80059f4:	0800a978 	.word	0x0800a978
 80059f8:	0800a848 	.word	0x0800a848
 80059fc:	0800a980 	.word	0x0800a980
 8005a00:	2000128c 	.word	0x2000128c
 8005a04:	0800a984 	.word	0x0800a984
 8005a08:	0800a98c 	.word	0x0800a98c
 8005a0c:	0800a970 	.word	0x0800a970
 8005a10:	2000132c 	.word	0x2000132c
 8005a14:	20001314 	.word	0x20001314
 8005a18:	0800a840 	.word	0x0800a840
 8005a1c:	0800a97c 	.word	0x0800a97c

08005a20 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8005a20:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8005a22:	4c52      	ldr	r4, [pc, #328]	; (8005b6c <report_gcode_modes+0x14c>)
  printPgmString(PSTR("[GC:G"));
 8005a24:	4852      	ldr	r0, [pc, #328]	; (8005b70 <report_gcode_modes+0x150>)
 8005a26:	f7fe fd1d 	bl	8004464 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8005a2a:	7820      	ldrb	r0, [r4, #0]
 8005a2c:	288b      	cmp	r0, #139	; 0x8b
 8005a2e:	d95f      	bls.n	8005af0 <report_gcode_modes+0xd0>
    printPgmString(PSTR("38."));
 8005a30:	4850      	ldr	r0, [pc, #320]	; (8005b74 <report_gcode_modes+0x154>)
 8005a32:	f7fe fd17 	bl	8004464 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8005a36:	7820      	ldrb	r0, [r4, #0]
 8005a38:	3076      	adds	r0, #118	; 0x76
 8005a3a:	b2c0      	uxtb	r0, r0
 8005a3c:	f7fe fd1e 	bl	800447c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005a40:	484d      	ldr	r0, [pc, #308]	; (8005b78 <report_gcode_modes+0x158>)
 8005a42:	f7fe fd0f 	bl	8004464 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8005a46:	79a0      	ldrb	r0, [r4, #6]
 8005a48:	3036      	adds	r0, #54	; 0x36
 8005a4a:	b2c0      	uxtb	r0, r0
 8005a4c:	f7fe fd16 	bl	800447c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005a50:	4849      	ldr	r0, [pc, #292]	; (8005b78 <report_gcode_modes+0x158>)
 8005a52:	f7fe fd07 	bl	8004464 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8005a56:	7920      	ldrb	r0, [r4, #4]
 8005a58:	3011      	adds	r0, #17
 8005a5a:	b2c0      	uxtb	r0, r0
 8005a5c:	f7fe fd0e 	bl	800447c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005a60:	4845      	ldr	r0, [pc, #276]	; (8005b78 <report_gcode_modes+0x158>)
 8005a62:	f7fe fcff 	bl	8004464 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8005a66:	78a0      	ldrb	r0, [r4, #2]
 8005a68:	f1c0 0015 	rsb	r0, r0, #21
 8005a6c:	b2c0      	uxtb	r0, r0
 8005a6e:	f7fe fd05 	bl	800447c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005a72:	4841      	ldr	r0, [pc, #260]	; (8005b78 <report_gcode_modes+0x158>)
 8005a74:	f7fe fcf6 	bl	8004464 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8005a78:	78e0      	ldrb	r0, [r4, #3]
 8005a7a:	305a      	adds	r0, #90	; 0x5a
 8005a7c:	b2c0      	uxtb	r0, r0
 8005a7e:	f7fe fcfd 	bl	800447c <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8005a82:	483d      	ldr	r0, [pc, #244]	; (8005b78 <report_gcode_modes+0x158>)
 8005a84:	f7fe fcee 	bl	8004464 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8005a88:	7860      	ldrb	r0, [r4, #1]
 8005a8a:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8005a8e:	b2c0      	uxtb	r0, r0
 8005a90:	f7fe fcf4 	bl	800447c <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8005a94:	79e3      	ldrb	r3, [r4, #7]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d13b      	bne.n	8005b12 <report_gcode_modes+0xf2>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005a9a:	4838      	ldr	r0, [pc, #224]	; (8005b7c <report_gcode_modes+0x15c>)
 8005a9c:	f7fe fce2 	bl	8004464 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8005aa0:	7a63      	ldrb	r3, [r4, #9]
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d047      	beq.n	8005b36 <report_gcode_modes+0x116>
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d04d      	beq.n	8005b46 <report_gcode_modes+0x126>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d047      	beq.n	8005b3e <report_gcode_modes+0x11e>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  //report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8005aae:	7a23      	ldrb	r3, [r4, #8]
 8005ab0:	b343      	cbz	r3, 8005b04 <report_gcode_modes+0xe4>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8005ab2:	061a      	lsls	r2, r3, #24
 8005ab4:	d44b      	bmi.n	8005b4e <report_gcode_modes+0x12e>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005ab6:	065b      	lsls	r3, r3, #25
 8005ab8:	d41d      	bmi.n	8005af6 <report_gcode_modes+0xd6>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 8005aba:	4831      	ldr	r0, [pc, #196]	; (8005b80 <report_gcode_modes+0x160>)
 8005abc:	f7fe fcd2 	bl	8004464 <printString>
  print_uint8_base10(gc_state.tool);
 8005ac0:	7d20      	ldrb	r0, [r4, #20]
 8005ac2:	f7fe fcdb 	bl	800447c <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8005ac6:	482f      	ldr	r0, [pc, #188]	; (8005b84 <report_gcode_modes+0x164>)
 8005ac8:	f7fe fccc 	bl	8004464 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8005acc:	6920      	ldr	r0, [r4, #16]
 8005ace:	f7fe ff13 	bl	80048f8 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8005ad2:	482d      	ldr	r0, [pc, #180]	; (8005b88 <report_gcode_modes+0x168>)
 8005ad4:	f7fe fcc6 	bl	8004464 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8005ad8:	68e0      	ldr	r0, [r4, #12]
 8005ada:	2100      	movs	r1, #0
 8005adc:	f7fe fd0c 	bl	80044f8 <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005ae0:	205d      	movs	r0, #93	; 0x5d
 8005ae2:	f000 fab5 	bl	8006050 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 8005ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005aea:	4828      	ldr	r0, [pc, #160]	; (8005b8c <report_gcode_modes+0x16c>)
 8005aec:	f7fe bcba 	b.w	8004464 <printString>
    print_uint8_base10(gc_state.modal.motion);
 8005af0:	f7fe fcc4 	bl	800447c <print_uint8_base10>
 8005af4:	e7a4      	b.n	8005a40 <report_gcode_modes+0x20>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005af6:	4821      	ldr	r0, [pc, #132]	; (8005b7c <report_gcode_modes+0x15c>)
 8005af8:	f7fe fcb4 	bl	8004464 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005afc:	2038      	movs	r0, #56	; 0x38
 8005afe:	f000 faa7 	bl	8006050 <serial_write>
 8005b02:	e7da      	b.n	8005aba <report_gcode_modes+0x9a>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005b04:	481d      	ldr	r0, [pc, #116]	; (8005b7c <report_gcode_modes+0x15c>)
 8005b06:	f7fe fcad 	bl	8004464 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8005b0a:	2039      	movs	r0, #57	; 0x39
 8005b0c:	f000 faa0 	bl	8006050 <serial_write>
 8005b10:	e7d3      	b.n	8005aba <report_gcode_modes+0x9a>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005b12:	481a      	ldr	r0, [pc, #104]	; (8005b7c <report_gcode_modes+0x15c>)
 8005b14:	f7fe fca6 	bl	8004464 <printString>
    switch (gc_state.modal.program_flow) {
 8005b18:	79e0      	ldrb	r0, [r4, #7]
 8005b1a:	2803      	cmp	r0, #3
 8005b1c:	d021      	beq.n	8005b62 <report_gcode_modes+0x142>
 8005b1e:	281e      	cmp	r0, #30
 8005b20:	d001      	beq.n	8005b26 <report_gcode_modes+0x106>
 8005b22:	2802      	cmp	r0, #2
 8005b24:	d1b9      	bne.n	8005a9a <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 8005b26:	f7fe fca9 	bl	800447c <print_uint8_base10>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005b2a:	4814      	ldr	r0, [pc, #80]	; (8005b7c <report_gcode_modes+0x15c>)
 8005b2c:	f7fe fc9a 	bl	8004464 <printString>
  switch (gc_state.modal.spindle) {
 8005b30:	7a63      	ldrb	r3, [r4, #9]
 8005b32:	2b10      	cmp	r3, #16
 8005b34:	d1b7      	bne.n	8005aa6 <report_gcode_modes+0x86>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8005b36:	2033      	movs	r0, #51	; 0x33
 8005b38:	f000 fa8a 	bl	8006050 <serial_write>
 8005b3c:	e7b7      	b.n	8005aae <report_gcode_modes+0x8e>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8005b3e:	2035      	movs	r0, #53	; 0x35
 8005b40:	f000 fa86 	bl	8006050 <serial_write>
 8005b44:	e7b3      	b.n	8005aae <report_gcode_modes+0x8e>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8005b46:	2034      	movs	r0, #52	; 0x34
 8005b48:	f000 fa82 	bl	8006050 <serial_write>
 8005b4c:	e7af      	b.n	8005aae <report_gcode_modes+0x8e>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8005b4e:	480b      	ldr	r0, [pc, #44]	; (8005b7c <report_gcode_modes+0x15c>)
 8005b50:	f7fe fc88 	bl	8004464 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8005b54:	2037      	movs	r0, #55	; 0x37
 8005b56:	f000 fa7b 	bl	8006050 <serial_write>
 8005b5a:	7a23      	ldrb	r3, [r4, #8]
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8005b5c:	065b      	lsls	r3, r3, #25
 8005b5e:	d5ac      	bpl.n	8005aba <report_gcode_modes+0x9a>
 8005b60:	e7c9      	b.n	8005af6 <report_gcode_modes+0xd6>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8005b62:	2030      	movs	r0, #48	; 0x30
 8005b64:	f000 fa74 	bl	8006050 <serial_write>
 8005b68:	e797      	b.n	8005a9a <report_gcode_modes+0x7a>
 8005b6a:	bf00      	nop
 8005b6c:	2000128c 	.word	0x2000128c
 8005b70:	0800a994 	.word	0x0800a994
 8005b74:	0800a99c 	.word	0x0800a99c
 8005b78:	0800a9a0 	.word	0x0800a9a0
 8005b7c:	0800a9a4 	.word	0x0800a9a4
 8005b80:	0800a9a8 	.word	0x0800a9a8
 8005b84:	0800a9ac 	.word	0x0800a9ac
 8005b88:	0800a9b0 	.word	0x0800a9b0
 8005b8c:	0800a848 	.word	0x0800a848

08005b90 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4605      	mov	r5, r0
 8005b94:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8005b96:	4808      	ldr	r0, [pc, #32]	; (8005bb8 <report_startup_line+0x28>)
 8005b98:	f7fe fc64 	bl	8004464 <printString>
  print_uint8_base10(n);
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f7fe fc6d 	bl	800447c <print_uint8_base10>
  serial_write('=');
 8005ba2:	203d      	movs	r0, #61	; 0x3d
 8005ba4:	f000 fa54 	bl	8006050 <serial_write>
  printString(line);
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f7fe fc5b 	bl	8004464 <printString>
  report_util_line_feed();
}
 8005bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005bb2:	4802      	ldr	r0, [pc, #8]	; (8005bbc <report_startup_line+0x2c>)
 8005bb4:	f7fe bc56 	b.w	8004464 <printString>
 8005bb8:	0800a9b4 	.word	0x0800a9b4
 8005bbc:	0800a848 	.word	0x0800a848

08005bc0 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	460c      	mov	r4, r1
  serial_write('>');
 8005bc6:	203e      	movs	r0, #62	; 0x3e
 8005bc8:	f000 fa42 	bl	8006050 <serial_write>
  printString(line);
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f7fe fc49 	bl	8004464 <printString>
  serial_write(':');
 8005bd2:	203a      	movs	r0, #58	; 0x3a
 8005bd4:	f000 fa3c 	bl	8006050 <serial_write>
  switch(status_code) {
 8005bd8:	b924      	cbnz	r4, 8005be4 <report_execute_startup_message+0x24>
  report_status_message(status_code);
}
 8005bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 8005bde:	4807      	ldr	r0, [pc, #28]	; (8005bfc <report_execute_startup_message+0x3c>)
 8005be0:	f7fe bc40 	b.w	8004464 <printString>
      printPgmString(PSTR("error:"));
 8005be4:	4806      	ldr	r0, [pc, #24]	; (8005c00 <report_execute_startup_message+0x40>)
 8005be6:	f7fe fc3d 	bl	8004464 <printString>
      print_uint8_base10(status_code);
 8005bea:	4620      	mov	r0, r4
 8005bec:	f7fe fc46 	bl	800447c <print_uint8_base10>
}
 8005bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005bf4:	4803      	ldr	r0, [pc, #12]	; (8005c04 <report_execute_startup_message+0x44>)
 8005bf6:	f7fe bc35 	b.w	8004464 <printString>
 8005bfa:	bf00      	nop
 8005bfc:	0800a838 	.word	0x0800a838
 8005c00:	0800a840 	.word	0x0800a840
 8005c04:	0800a848 	.word	0x0800a848

08005c08 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8005c0c:	4814      	ldr	r0, [pc, #80]	; (8005c60 <report_build_info+0x58>)
 8005c0e:	f7fe fc29 	bl	8004464 <printString>
  printString(line);
 8005c12:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c14:	4c13      	ldr	r4, [pc, #76]	; (8005c64 <report_build_info+0x5c>)
  printString(line);
 8005c16:	f7fe fc25 	bl	8004464 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005c1a:	205d      	movs	r0, #93	; 0x5d
 8005c1c:	f000 fa18 	bl	8006050 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7fe fc1f 	bl	8004464 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8005c26:	4810      	ldr	r0, [pc, #64]	; (8005c68 <report_build_info+0x60>)
 8005c28:	f7fe fc1c 	bl	8004464 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8005c2c:	2056      	movs	r0, #86	; 0x56
 8005c2e:	f000 fa0f 	bl	8006050 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 8005c32:	204d      	movs	r0, #77	; 0x4d
 8005c34:	f000 fa0c 	bl	8006050 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 8005c38:	202c      	movs	r0, #44	; 0x2c
 8005c3a:	f000 fa09 	bl	8006050 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 8005c3e:	2023      	movs	r0, #35	; 0x23
 8005c40:	f7fe fc1c 	bl	800447c <print_uint8_base10>
	serial_write(',');
 8005c44:	202c      	movs	r0, #44	; 0x2c
 8005c46:	f000 fa03 	bl	8006050 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8005c4a:	20fe      	movs	r0, #254	; 0xfe
 8005c4c:	f7fe fc16 	bl	800447c <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8005c50:	205d      	movs	r0, #93	; 0x5d
 8005c52:	f000 f9fd 	bl	8006050 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c56:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 8005c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005c5c:	f7fe bc02 	b.w	8004464 <printString>
 8005c60:	0800a9b8 	.word	0x0800a9b8
 8005c64:	0800a848 	.word	0x0800a848
 8005c68:	0800a9cc 	.word	0x0800a9cc

08005c6c <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8005c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 8005c6e:	4aaa      	ldr	r2, [pc, #680]	; (8005f18 <report_realtime_status+0x2ac>)
{
 8005c70:	b08b      	sub	sp, #44	; 0x2c
  memcpy(current_position, sys_position, sizeof(sys_position));
 8005c72:	ab01      	add	r3, sp, #4
 8005c74:	ca07      	ldmia	r2, {r0, r1, r2}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8005c76:	4ca9      	ldr	r4, [pc, #676]	; (8005f1c <report_realtime_status+0x2b0>)
  memcpy(current_position, sys_position, sizeof(sys_position));
 8005c78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  system_convert_array_steps_to_mpos(print_position, current_position);
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	a804      	add	r0, sp, #16
 8005c80:	f002 f9fc 	bl	800807c <system_convert_array_steps_to_mpos>
  serial_write('<');
 8005c84:	203c      	movs	r0, #60	; 0x3c
 8005c86:	f000 f9e3 	bl	8006050 <serial_write>
  switch (sys.state) {
 8005c8a:	7823      	ldrb	r3, [r4, #0]
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d824      	bhi.n	8005cda <report_realtime_status+0x6e>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d82a      	bhi.n	8005cea <report_realtime_status+0x7e>
 8005c94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005c98:	0160013b 	.word	0x0160013b
 8005c9c:	00290164 	.word	0x00290164
 8005ca0:	00290168 	.word	0x00290168
 8005ca4:	00290029 	.word	0x00290029
 8005ca8:	0029016c 	.word	0x0029016c
 8005cac:	00290029 	.word	0x00290029
 8005cb0:	00290029 	.word	0x00290029
 8005cb4:	00290029 	.word	0x00290029
 8005cb8:	00290133 	.word	0x00290133
 8005cbc:	00290029 	.word	0x00290029
 8005cc0:	00290029 	.word	0x00290029
 8005cc4:	00290029 	.word	0x00290029
 8005cc8:	00290029 	.word	0x00290029
 8005ccc:	00290029 	.word	0x00290029
 8005cd0:	00290029 	.word	0x00290029
 8005cd4:	00290029 	.word	0x00290029
 8005cd8:	0137      	.short	0x0137
 8005cda:	2b40      	cmp	r3, #64	; 0x40
 8005cdc:	f000 8161 	beq.w	8005fa2 <report_realtime_status+0x336>
 8005ce0:	2b80      	cmp	r3, #128	; 0x80
 8005ce2:	d102      	bne.n	8005cea <report_realtime_status+0x7e>
      else {
        serial_write('2'); // Retracting
      }
    }
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8005ce4:	488e      	ldr	r0, [pc, #568]	; (8005f20 <report_realtime_status+0x2b4>)
 8005ce6:	f7fe fbbd 	bl	8004464 <printString>
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8005cea:	4e8e      	ldr	r6, [pc, #568]	; (8005f24 <report_realtime_status+0x2b8>)
 8005cec:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
 8005cf0:	07d8      	lsls	r0, r3, #31
 8005cf2:	f140 8090 	bpl.w	8005e16 <report_realtime_status+0x1aa>
 8005cf6:	7b63      	ldrb	r3, [r4, #13]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d045      	beq.n	8005d88 <report_realtime_status+0x11c>
    }
  }

  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
 8005cfc:	488a      	ldr	r0, [pc, #552]	; (8005f28 <report_realtime_status+0x2bc>)
 8005cfe:	f7fe fbb1 	bl	8004464 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8005d02:	9804      	ldr	r0, [sp, #16]
 8005d04:	f7fe fcee 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005d08:	202c      	movs	r0, #44	; 0x2c
 8005d0a:	f000 f9a1 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005d0e:	9805      	ldr	r0, [sp, #20]
 8005d10:	f7fe fce8 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005d14:	202c      	movs	r0, #44	; 0x2c
 8005d16:	f000 f99b 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005d1a:	9806      	ldr	r0, [sp, #24]
 8005d1c:	f7fe fce2 	bl	80046e4 <printFloat_CoordValue>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8005d20:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
 8005d24:	0799      	lsls	r1, r3, #30
 8005d26:	f100 80be 	bmi.w	8005ea6 <report_realtime_status+0x23a>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 8005d2a:	4880      	ldr	r0, [pc, #512]	; (8005f2c <report_realtime_status+0x2c0>)
 8005d2c:	f7fe fb9a 	bl	8004464 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 8005d30:	f001 ff3e 	bl	8007bb0 <st_get_realtime_rate>
 8005d34:	f7fe fde0 	bl	80048f8 <printFloat_RateValue>
  serial_write(',');
 8005d38:	202c      	movs	r0, #44	; 0x2c
 8005d3a:	f000 f989 	bl	8006050 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6920      	ldr	r0, [r4, #16]
 8005d42:	f7fe fbd9 	bl	80044f8 <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 8005d46:	f7fc ffb3 	bl	8002cb0 <limits_get_state>
 8005d4a:	4606      	mov	r6, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 8005d4c:	f001 ff7c 	bl	8007c48 <system_control_get_state>
 8005d50:	4605      	mov	r5, r0
  uint8_t prb_pin_state = probe_get_state();
 8005d52:	f7fe fea5 	bl	8004aa0 <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8005d56:	ea46 0305 	orr.w	r3, r6, r5
 8005d5a:	4303      	orrs	r3, r0
 8005d5c:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 8005d60:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8005d62:	f040 80af 	bne.w	8005ec4 <report_realtime_status+0x258>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 8005d66:	7b63      	ldrb	r3, [r4, #13]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d07e      	beq.n	8005e6a <report_realtime_status+0x1fe>
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	7363      	strb	r3, [r4, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8005d70:	7b23      	ldrb	r3, [r4, #12]
 8005d72:	b303      	cbz	r3, 8005db6 <report_realtime_status+0x14a>
 8005d74:	3b01      	subs	r3, #1
 8005d76:	7323      	strb	r3, [r4, #12]
        #endif
      }
    }
  #endif

  serial_write('>');
 8005d78:	203e      	movs	r0, #62	; 0x3e
 8005d7a:	f000 f969 	bl	8006050 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8005d7e:	486c      	ldr	r0, [pc, #432]	; (8005f30 <report_realtime_status+0x2c4>)
 8005d80:	f7fe fb70 	bl	8004464 <printString>
  report_util_line_feed();
}
 8005d84:	b00b      	add	sp, #44	; 0x2c
 8005d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005d88:	4d6a      	ldr	r5, [pc, #424]	; (8005f34 <report_realtime_status+0x2c8>)
 8005d8a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005d8c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8005d8e:	f7fa fc79 	bl	8000684 <__addsf3>
 8005d92:	4603      	mov	r3, r0
 8005d94:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005d96:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005d98:	9307      	str	r3, [sp, #28]
 8005d9a:	f7fa fc73 	bl	8000684 <__addsf3>
 8005d9e:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005da0:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005da2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005da4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8005da6:	9308      	str	r3, [sp, #32]
 8005da8:	f7fa fc6c 	bl	8000684 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005dac:	4639      	mov	r1, r7
 8005dae:	f7fa fc69 	bl	8000684 <__addsf3>
 8005db2:	9009      	str	r0, [sp, #36]	; 0x24
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8005db4:	e7a2      	b.n	8005cfc <report_realtime_status+0x90>
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8005db6:	7823      	ldrb	r3, [r4, #0]
      printPgmString(PSTR("|Ov:"));
 8005db8:	485f      	ldr	r0, [pc, #380]	; (8005f38 <report_realtime_status+0x2cc>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 8005dba:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 8005dbe:	bf14      	ite	ne
 8005dc0:	2313      	movne	r3, #19
 8005dc2:	2309      	moveq	r3, #9
 8005dc4:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 8005dc6:	f7fe fb4d 	bl	8004464 <printString>
      print_uint8_base10(sys.f_override);
 8005dca:	7a20      	ldrb	r0, [r4, #8]
 8005dcc:	f7fe fb56 	bl	800447c <print_uint8_base10>
      serial_write(',');
 8005dd0:	202c      	movs	r0, #44	; 0x2c
 8005dd2:	f000 f93d 	bl	8006050 <serial_write>
      print_uint8_base10(sys.r_override);
 8005dd6:	7a60      	ldrb	r0, [r4, #9]
 8005dd8:	f7fe fb50 	bl	800447c <print_uint8_base10>
      serial_write(',');
 8005ddc:	202c      	movs	r0, #44	; 0x2c
 8005dde:	f000 f937 	bl	8006050 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8005de2:	7aa0      	ldrb	r0, [r4, #10]
 8005de4:	f7fe fb4a 	bl	800447c <print_uint8_base10>
      uint8_t sp_state = spindle_get_state();
 8005de8:	f000 fd52 	bl	8006890 <spindle_get_state>
 8005dec:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8005dee:	f7fb fbdf 	bl	80015b0 <coolant_get_state>
 8005df2:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	f040 80c5 	bne.w	8005f84 <report_realtime_status+0x318>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d0bc      	beq.n	8005d78 <report_realtime_status+0x10c>
        printPgmString(PSTR("|A:"));
 8005dfe:	484f      	ldr	r0, [pc, #316]	; (8005f3c <report_realtime_status+0x2d0>)
 8005e00:	f7fe fb30 	bl	8004464 <printString>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8005e04:	07e2      	lsls	r2, r4, #31
 8005e06:	f100 80c8 	bmi.w	8005f9a <report_realtime_status+0x32e>
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8005e0a:	07a3      	lsls	r3, r4, #30
 8005e0c:	d5b4      	bpl.n	8005d78 <report_realtime_status+0x10c>
 8005e0e:	204d      	movs	r0, #77	; 0x4d
 8005e10:	f000 f91e 	bl	8006050 <serial_write>
 8005e14:	e7b0      	b.n	8005d78 <report_realtime_status+0x10c>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005e16:	4d47      	ldr	r5, [pc, #284]	; (8005f34 <report_realtime_status+0x2c8>)
 8005e18:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005e1a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8005e1c:	f7fa fc32 	bl	8000684 <__addsf3>
 8005e20:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 8005e22:	9804      	ldr	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005e24:	9107      	str	r1, [sp, #28]
        print_position[idx] -= wco[idx];
 8005e26:	f7fa fc2b 	bl	8000680 <__aeabi_fsub>
 8005e2a:	4603      	mov	r3, r0
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005e2c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005e2e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
        print_position[idx] -= wco[idx];
 8005e30:	9304      	str	r3, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005e32:	f7fa fc27 	bl	8000684 <__addsf3>
 8005e36:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 8005e38:	9805      	ldr	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005e3a:	9108      	str	r1, [sp, #32]
        print_position[idx] -= wco[idx];
 8005e3c:	f7fa fc20 	bl	8000680 <__aeabi_fsub>
 8005e40:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005e42:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005e44:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005e46:	6be8      	ldr	r0, [r5, #60]	; 0x3c
        print_position[idx] -= wco[idx];
 8005e48:	9305      	str	r3, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8005e4a:	f7fa fc1b 	bl	8000684 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa fc18 	bl	8000684 <__addsf3>
 8005e54:	4601      	mov	r1, r0
        print_position[idx] -= wco[idx];
 8005e56:	9806      	ldr	r0, [sp, #24]
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8005e58:	9109      	str	r1, [sp, #36]	; 0x24
        print_position[idx] -= wco[idx];
 8005e5a:	f7fa fc11 	bl	8000680 <__aeabi_fsub>
 8005e5e:	4603      	mov	r3, r0
    printPgmString(PSTR("|WPos:"));
 8005e60:	4837      	ldr	r0, [pc, #220]	; (8005f40 <report_realtime_status+0x2d4>)
        print_position[idx] -= wco[idx];
 8005e62:	9306      	str	r3, [sp, #24]
    printPgmString(PSTR("|WPos:"));
 8005e64:	f7fe fafe 	bl	8004464 <printString>
 8005e68:	e74b      	b.n	8005d02 <report_realtime_status+0x96>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8005e6a:	7822      	ldrb	r2, [r4, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8005e6c:	7b23      	ldrb	r3, [r4, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 8005e6e:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 8005e72:	bf14      	ite	ne
 8005e74:	221d      	movne	r2, #29
 8005e76:	2209      	moveq	r2, #9
 8005e78:	7362      	strb	r2, [r4, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8005e7a:	b90b      	cbnz	r3, 8005e80 <report_realtime_status+0x214>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	7323      	strb	r3, [r4, #12]
    printPgmString(PSTR("|WCO:"));
 8005e80:	4830      	ldr	r0, [pc, #192]	; (8005f44 <report_realtime_status+0x2d8>)
 8005e82:	f7fe faef 	bl	8004464 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8005e86:	9807      	ldr	r0, [sp, #28]
 8005e88:	f7fe fc2c 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005e8c:	202c      	movs	r0, #44	; 0x2c
 8005e8e:	f000 f8df 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005e92:	9808      	ldr	r0, [sp, #32]
 8005e94:	f7fe fc26 	bl	80046e4 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8005e98:	202c      	movs	r0, #44	; 0x2c
 8005e9a:	f000 f8d9 	bl	8006050 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8005e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ea0:	f7fe fc20 	bl	80046e4 <printFloat_CoordValue>
  for (idx=0; idx<N_AXIS; idx++) {
 8005ea4:	e764      	b.n	8005d70 <report_realtime_status+0x104>
    printPgmString(PSTR("|Bf:"));
 8005ea6:	4828      	ldr	r0, [pc, #160]	; (8005f48 <report_realtime_status+0x2dc>)
 8005ea8:	f7fe fadc 	bl	8004464 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 8005eac:	f7fe fab8 	bl	8004420 <plan_get_block_buffer_available>
 8005eb0:	f7fe fae4 	bl	800447c <print_uint8_base10>
    serial_write(',');
 8005eb4:	202c      	movs	r0, #44	; 0x2c
 8005eb6:	f000 f8cb 	bl	8006050 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 8005eba:	f000 f8b5 	bl	8006028 <serial_get_rx_buffer_available>
 8005ebe:	f7fe fadd 	bl	800447c <print_uint8_base10>
 8005ec2:	e732      	b.n	8005d2a <report_realtime_status+0xbe>
    printPgmString(PSTR("|Pn:"));
 8005ec4:	4821      	ldr	r0, [pc, #132]	; (8005f4c <report_realtime_status+0x2e0>)
 8005ec6:	f7fe facd 	bl	8004464 <printString>
    if (prb_pin_state) { serial_write('P'); }
 8005eca:	2f00      	cmp	r7, #0
 8005ecc:	d154      	bne.n	8005f78 <report_realtime_status+0x30c>
    if (lim_pin_state) {
 8005ece:	b146      	cbz	r6, 8005ee2 <report_realtime_status+0x276>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8005ed0:	07f2      	lsls	r2, r6, #31
 8005ed2:	d47c      	bmi.n	8005fce <report_realtime_status+0x362>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 8005ed4:	07b3      	lsls	r3, r6, #30
 8005ed6:	d476      	bmi.n	8005fc6 <report_realtime_status+0x35a>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 8005ed8:	0777      	lsls	r7, r6, #29
 8005eda:	d502      	bpl.n	8005ee2 <report_realtime_status+0x276>
 8005edc:	205a      	movs	r0, #90	; 0x5a
 8005ede:	f000 f8b7 	bl	8006050 <serial_write>
    if (ctrl_pin_state) {
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	f43f af3f 	beq.w	8005d66 <report_realtime_status+0xfa>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8005ee8:	07ee      	lsls	r6, r5, #31
 8005eea:	d478      	bmi.n	8005fde <report_realtime_status+0x372>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8005eec:	07a8      	lsls	r0, r5, #30
 8005eee:	d472      	bmi.n	8005fd6 <report_realtime_status+0x36a>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8005ef0:	0769      	lsls	r1, r5, #29
 8005ef2:	f57f af38 	bpl.w	8005d66 <report_realtime_status+0xfa>
 8005ef6:	2053      	movs	r0, #83	; 0x53
 8005ef8:	f000 f8aa 	bl	8006050 <serial_write>
 8005efc:	e733      	b.n	8005d66 <report_realtime_status+0xfa>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005efe:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	da6f      	bge.n	8005fe6 <report_realtime_status+0x37a>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8005f06:	4812      	ldr	r0, [pc, #72]	; (8005f50 <report_realtime_status+0x2e4>)
 8005f08:	f7fe faac 	bl	8004464 <printString>
 8005f0c:	e6ed      	b.n	8005cea <report_realtime_status+0x7e>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8005f0e:	4811      	ldr	r0, [pc, #68]	; (8005f54 <report_realtime_status+0x2e8>)
 8005f10:	f7fe faa8 	bl	8004464 <printString>
 8005f14:	e6e9      	b.n	8005cea <report_realtime_status+0x7e>
 8005f16:	bf00      	nop
 8005f18:	20001338 	.word	0x20001338
 8005f1c:	20001314 	.word	0x20001314
 8005f20:	0800aa0c 	.word	0x0800aa0c
 8005f24:	200014c8 	.word	0x200014c8
 8005f28:	0800aa14 	.word	0x0800aa14
 8005f2c:	0800aa24 	.word	0x0800aa24
 8005f30:	0800a848 	.word	0x0800a848
 8005f34:	2000128c 	.word	0x2000128c
 8005f38:	0800aa3c 	.word	0x0800aa3c
 8005f3c:	0800aa44 	.word	0x0800aa44
 8005f40:	0800aa48 	.word	0x0800aa48
 8005f44:	0800aa34 	.word	0x0800aa34
 8005f48:	0800aa1c 	.word	0x0800aa1c
 8005f4c:	0800aa2c 	.word	0x0800aa2c
 8005f50:	0800a9e8 	.word	0x0800a9e8
 8005f54:	0800a9d4 	.word	0x0800a9d4
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 8005f58:	482c      	ldr	r0, [pc, #176]	; (800600c <report_realtime_status+0x3a0>)
 8005f5a:	f7fe fa83 	bl	8004464 <printString>
 8005f5e:	e6c4      	b.n	8005cea <report_realtime_status+0x7e>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 8005f60:	482b      	ldr	r0, [pc, #172]	; (8006010 <report_realtime_status+0x3a4>)
 8005f62:	f7fe fa7f 	bl	8004464 <printString>
 8005f66:	e6c0      	b.n	8005cea <report_realtime_status+0x7e>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8005f68:	482a      	ldr	r0, [pc, #168]	; (8006014 <report_realtime_status+0x3a8>)
 8005f6a:	f7fe fa7b 	bl	8004464 <printString>
 8005f6e:	e6bc      	b.n	8005cea <report_realtime_status+0x7e>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8005f70:	4829      	ldr	r0, [pc, #164]	; (8006018 <report_realtime_status+0x3ac>)
 8005f72:	f7fe fa77 	bl	8004464 <printString>
 8005f76:	e6b8      	b.n	8005cea <report_realtime_status+0x7e>
    if (prb_pin_state) { serial_write('P'); }
 8005f78:	2050      	movs	r0, #80	; 0x50
 8005f7a:	f000 f869 	bl	8006050 <serial_write>
    if (lim_pin_state) {
 8005f7e:	2e00      	cmp	r6, #0
 8005f80:	d0af      	beq.n	8005ee2 <report_realtime_status+0x276>
 8005f82:	e7a5      	b.n	8005ed0 <report_realtime_status+0x264>
        printPgmString(PSTR("|A:"));
 8005f84:	4825      	ldr	r0, [pc, #148]	; (800601c <report_realtime_status+0x3b0>)
 8005f86:	f7fe fa6d 	bl	8004464 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8005f8a:	2d01      	cmp	r5, #1
 8005f8c:	d017      	beq.n	8005fbe <report_realtime_status+0x352>
              else { serial_write('C'); } // CCW
 8005f8e:	2043      	movs	r0, #67	; 0x43
 8005f90:	f000 f85e 	bl	8006050 <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8005f94:	07e2      	lsls	r2, r4, #31
 8005f96:	f57f af38 	bpl.w	8005e0a <report_realtime_status+0x19e>
 8005f9a:	2046      	movs	r0, #70	; 0x46
 8005f9c:	f000 f858 	bl	8006050 <serial_write>
 8005fa0:	e733      	b.n	8005e0a <report_realtime_status+0x19e>
    printPgmString(PSTR("Door:"));
 8005fa2:	481f      	ldr	r0, [pc, #124]	; (8006020 <report_realtime_status+0x3b4>)
 8005fa4:	f7fe fa5e 	bl	8004464 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8005fa8:	78a3      	ldrb	r3, [r4, #2]
 8005faa:	071f      	lsls	r7, r3, #28
 8005fac:	d429      	bmi.n	8006002 <report_realtime_status+0x396>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005fae:	075e      	lsls	r6, r3, #29
 8005fb0:	d523      	bpl.n	8005ffa <report_realtime_status+0x38e>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8005fb2:	069d      	lsls	r5, r3, #26
 8005fb4:	d51d      	bpl.n	8005ff2 <report_realtime_status+0x386>
      else { serial_write('1'); } // Actively holding
 8005fb6:	2031      	movs	r0, #49	; 0x31
 8005fb8:	f000 f84a 	bl	8006050 <serial_write>
 8005fbc:	e695      	b.n	8005cea <report_realtime_status+0x7e>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8005fbe:	2053      	movs	r0, #83	; 0x53
 8005fc0:	f000 f846 	bl	8006050 <serial_write>
 8005fc4:	e71e      	b.n	8005e04 <report_realtime_status+0x198>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 8005fc6:	2059      	movs	r0, #89	; 0x59
 8005fc8:	f000 f842 	bl	8006050 <serial_write>
 8005fcc:	e784      	b.n	8005ed8 <report_realtime_status+0x26c>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8005fce:	2058      	movs	r0, #88	; 0x58
 8005fd0:	f000 f83e 	bl	8006050 <serial_write>
 8005fd4:	e77e      	b.n	8005ed4 <report_realtime_status+0x268>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8005fd6:	2048      	movs	r0, #72	; 0x48
 8005fd8:	f000 f83a 	bl	8006050 <serial_write>
 8005fdc:	e788      	b.n	8005ef0 <report_realtime_status+0x284>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8005fde:	2052      	movs	r0, #82	; 0x52
 8005fe0:	f000 f836 	bl	8006050 <serial_write>
 8005fe4:	e782      	b.n	8005eec <report_realtime_status+0x280>
      printPgmString(PSTR("Hold:"));
 8005fe6:	480f      	ldr	r0, [pc, #60]	; (8006024 <report_realtime_status+0x3b8>)
 8005fe8:	f7fe fa3c 	bl	8004464 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8005fec:	78a3      	ldrb	r3, [r4, #2]
 8005fee:	07db      	lsls	r3, r3, #31
 8005ff0:	d5e1      	bpl.n	8005fb6 <report_realtime_status+0x34a>
 8005ff2:	2030      	movs	r0, #48	; 0x30
 8005ff4:	f000 f82c 	bl	8006050 <serial_write>
 8005ff8:	e677      	b.n	8005cea <report_realtime_status+0x7e>
        serial_write('2'); // Retracting
 8005ffa:	2032      	movs	r0, #50	; 0x32
 8005ffc:	f000 f828 	bl	8006050 <serial_write>
 8006000:	e673      	b.n	8005cea <report_realtime_status+0x7e>
      serial_write('3'); // Restoring
 8006002:	2033      	movs	r0, #51	; 0x33
 8006004:	f000 f824 	bl	8006050 <serial_write>
 8006008:	e66f      	b.n	8005cea <report_realtime_status+0x7e>
 800600a:	bf00      	nop
 800600c:	0800a9f4 	.word	0x0800a9f4
 8006010:	0800a9fc 	.word	0x0800a9fc
 8006014:	0800a9ec 	.word	0x0800a9ec
 8006018:	0800a9dc 	.word	0x0800a9dc
 800601c:	0800aa44 	.word	0x0800aa44
 8006020:	0800aa04 	.word	0x0800aa04
 8006024:	0800a9e0 	.word	0x0800a9e0

08006028 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8006028:	4a06      	ldr	r2, [pc, #24]	; (8006044 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 800602c:	7811      	ldrb	r1, [r2, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800602e:	781a      	ldrb	r2, [r3, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8006030:	b2cb      	uxtb	r3, r1
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8006032:	428a      	cmp	r2, r1
 8006034:	bf2c      	ite	cs
 8006036:	1e98      	subcs	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 8006038:	f103 30ff 	addcc.w	r0, r3, #4294967295
 800603c:	1a80      	subs	r0, r0, r2
 800603e:	b2c0      	uxtb	r0, r0
}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000cfd 	.word	0x20000cfd
 8006048:	20000cfc 	.word	0x20000cfc

0800604c <serial_init>:
  // defaults to 8-bit, no parity, 1 stop bit
#endif
#ifdef WIN32
  InitializeCriticalSectionAndSpinCount(&CriticalSection,0x00000400);
#endif
}
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop

08006050 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 8006050:	b470      	push	{r4, r5, r6}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 8006052:	4e0f      	ldr	r6, [pc, #60]	; (8006090 <serial_write+0x40>)
 8006054:	490f      	ldr	r1, [pc, #60]	; (8006094 <serial_write+0x44>)
 8006056:	7835      	ldrb	r5, [r6, #0]
  if (next_head == TX_RING_BUFFER) { next_head = 0; }

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 8006058:	4c0f      	ldr	r4, [pc, #60]	; (8006098 <serial_write+0x48>)
  uint8_t next_head = serial_tx_buffer_head + 1;
 800605a:	1c6a      	adds	r2, r5, #1
 800605c:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 800605e:	2a80      	cmp	r2, #128	; 0x80
 8006060:	bf08      	it	eq
 8006062:	2200      	moveq	r2, #0
 8006064:	e002      	b.n	800606c <serial_write+0x1c>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 8006066:	7823      	ldrb	r3, [r4, #0]
 8006068:	06db      	lsls	r3, r3, #27
 800606a:	d40e      	bmi.n	800608a <serial_write+0x3a>
  while (next_head == serial_tx_buffer_tail) {
 800606c:	780b      	ldrb	r3, [r1, #0]
 800606e:	4293      	cmp	r3, r2
 8006070:	d0f9      	beq.n	8006066 <serial_write+0x16>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <serial_write+0x4c>)
 8006074:	490a      	ldr	r1, [pc, #40]	; (80060a0 <serial_write+0x50>)
 8006076:	5558      	strb	r0, [r3, r5]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 8006078:	4807      	ldr	r0, [pc, #28]	; (8006098 <serial_write+0x48>)
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 800607a:	e002      	b.n	8006082 <serial_write+0x32>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 800607c:	7803      	ldrb	r3, [r0, #0]
 800607e:	06db      	lsls	r3, r3, #27
 8006080:	d403      	bmi.n	800608a <serial_write+0x3a>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 8006082:	780b      	ldrb	r3, [r1, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1f9      	bne.n	800607c <serial_write+0x2c>
  }
#endif
  serial_tx_buffer_head = next_head;
 8006088:	7032      	strb	r2, [r6, #0]

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 800608a:	bc70      	pop	{r4, r5, r6}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000cfe 	.word	0x20000cfe
 8006094:	20000cff 	.word	0x20000cff
 8006098:	20001329 	.word	0x20001329
 800609c:	20001348 	.word	0x20001348
 80060a0:	20000e84 	.word	0x20000e84

080060a4 <serial_read>:

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
  if (serial_rx_buffer_head == tail) {
 80060a4:	4908      	ldr	r1, [pc, #32]	; (80060c8 <serial_read+0x24>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <serial_read+0x28>)
  if (serial_rx_buffer_head == tail) {
 80060a8:	7808      	ldrb	r0, [r1, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80060aa:	7813      	ldrb	r3, [r2, #0]
  if (serial_rx_buffer_head == tail) {
 80060ac:	4298      	cmp	r0, r3
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80060ae:	b2d9      	uxtb	r1, r3
  if (serial_rx_buffer_head == tail) {
 80060b0:	d008      	beq.n	80060c4 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 80060b2:	1c4b      	adds	r3, r1, #1
 80060b4:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 80060b6:	2bfe      	cmp	r3, #254	; 0xfe
 80060b8:	bf08      	it	eq
 80060ba:	2300      	moveq	r3, #0
    uint8_t data = serial_rx_buffer[tail];
 80060bc:	4804      	ldr	r0, [pc, #16]	; (80060d0 <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 80060be:	7013      	strb	r3, [r2, #0]
    uint8_t data = serial_rx_buffer[tail];
 80060c0:	5c40      	ldrb	r0, [r0, r1]

    return data;
 80060c2:	4770      	bx	lr
    return SERIAL_NO_DATA;
 80060c4:	20ff      	movs	r0, #255	; 0xff
  }
}
 80060c6:	4770      	bx	lr
 80060c8:	20000cfc 	.word	0x20000cfc
 80060cc:	20000cfd 	.word	0x20000cfd
 80060d0:	200013c8 	.word	0x200013c8

080060d4 <OnUsbDataRx>:
	//lcd_write_char(*dataIn);
	uint8_t next_head;
    uint8_t data;

	// Write data to buffer unless it is full.
	while (length != 0)
 80060d4:	2900      	cmp	r1, #0
 80060d6:	d07b      	beq.n	80061d0 <OnUsbDataRx+0xfc>
{
 80060d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060dc:	1e4d      	subs	r5, r1, #1
 80060de:	b2ed      	uxtb	r5, r5
 80060e0:	3501      	adds	r5, #1
 80060e2:	4604      	mov	r4, r0
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 80060e4:	4e61      	ldr	r6, [pc, #388]	; (800626c <OnUsbDataRx+0x198>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 80060e6:	4f62      	ldr	r7, [pc, #392]	; (8006270 <OnUsbDataRx+0x19c>)
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80060e8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8006278 <OnUsbDataRx+0x1a4>
 80060ec:	4405      	add	r5, r0
 80060ee:	e006      	b.n	80060fe <OnUsbDataRx+0x2a>
  switch (data) {
 80060f0:	2b21      	cmp	r3, #33	; 0x21
 80060f2:	d11d      	bne.n	8006130 <OnUsbDataRx+0x5c>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 80060f4:	2008      	movs	r0, #8
 80060f6:	f002 f80b 	bl	8008110 <system_set_exec_state_flag>
	while (length != 0)
 80060fa:	42a5      	cmp	r5, r4
 80060fc:	d00a      	beq.n	8006114 <OnUsbDataRx+0x40>
        data = *dataIn ++;
 80060fe:	f814 3b01 	ldrb.w	r3, [r4], #1
  switch (data) {
 8006102:	2b3f      	cmp	r3, #63	; 0x3f
 8006104:	d00e      	beq.n	8006124 <OnUsbDataRx+0x50>
 8006106:	d807      	bhi.n	8006118 <OnUsbDataRx+0x44>
 8006108:	2b18      	cmp	r3, #24
 800610a:	d1f1      	bne.n	80060f0 <OnUsbDataRx+0x1c>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 800610c:	f7fd fb6c 	bl	80037e8 <mc_reset>
	while (length != 0)
 8006110:	42a5      	cmp	r5, r4
 8006112:	d1f4      	bne.n	80060fe <OnUsbDataRx+0x2a>
#else
    length--;
#endif
   }
#endif
}
 8006114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (data) {
 8006118:	2b7e      	cmp	r3, #126	; 0x7e
 800611a:	d107      	bne.n	800612c <OnUsbDataRx+0x58>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 800611c:	2002      	movs	r0, #2
 800611e:	f001 fff7 	bl	8008110 <system_set_exec_state_flag>
 8006122:	e7ea      	b.n	80060fa <OnUsbDataRx+0x26>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 8006124:	2001      	movs	r0, #1
 8006126:	f001 fff3 	bl	8008110 <system_set_exec_state_flag>
 800612a:	e7e6      	b.n	80060fa <OnUsbDataRx+0x26>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 800612c:	061a      	lsls	r2, r3, #24
 800612e:	d40c      	bmi.n	800614a <OnUsbDataRx+0x76>
        next_head = serial_rx_buffer_head + 1;
 8006130:	7831      	ldrb	r1, [r6, #0]
        if (next_head != serial_rx_buffer_tail) {
 8006132:	7838      	ldrb	r0, [r7, #0]
        next_head = serial_rx_buffer_head + 1;
 8006134:	1c4a      	adds	r2, r1, #1
 8006136:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 8006138:	2afe      	cmp	r2, #254	; 0xfe
 800613a:	bf08      	it	eq
 800613c:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 800613e:	4290      	cmp	r0, r2
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8006140:	bf1c      	itt	ne
 8006142:	f808 3001 	strbne.w	r3, [r8, r1]
          serial_rx_buffer_head = next_head;
 8006146:	7032      	strbne	r2, [r6, #0]
 8006148:	e7d7      	b.n	80060fa <OnUsbDataRx+0x26>
        switch(data) {
 800614a:	3b84      	subs	r3, #132	; 0x84
 800614c:	2b1d      	cmp	r3, #29
 800614e:	d8d4      	bhi.n	80060fa <OnUsbDataRx+0x26>
 8006150:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <OnUsbDataRx+0x84>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	08006265 	.word	0x08006265
 800615c:	08006253 	.word	0x08006253
 8006160:	080060fb 	.word	0x080060fb
 8006164:	080060fb 	.word	0x080060fb
 8006168:	080060fb 	.word	0x080060fb
 800616c:	080060fb 	.word	0x080060fb
 8006170:	080060fb 	.word	0x080060fb
 8006174:	080060fb 	.word	0x080060fb
 8006178:	080060fb 	.word	0x080060fb
 800617c:	080060fb 	.word	0x080060fb
 8006180:	080060fb 	.word	0x080060fb
 8006184:	080060fb 	.word	0x080060fb
 8006188:	0800624b 	.word	0x0800624b
 800618c:	08006243 	.word	0x08006243
 8006190:	0800623b 	.word	0x0800623b
 8006194:	08006233 	.word	0x08006233
 8006198:	0800622b 	.word	0x0800622b
 800619c:	08006223 	.word	0x08006223
 80061a0:	0800621b 	.word	0x0800621b
 80061a4:	08006213 	.word	0x08006213
 80061a8:	080060fb 	.word	0x080060fb
 80061ac:	0800620b 	.word	0x0800620b
 80061b0:	08006203 	.word	0x08006203
 80061b4:	080061fb 	.word	0x080061fb
 80061b8:	080061f3 	.word	0x080061f3
 80061bc:	080061eb 	.word	0x080061eb
 80061c0:	080061e3 	.word	0x080061e3
 80061c4:	080060fb 	.word	0x080060fb
 80061c8:	080061db 	.word	0x080061db
 80061cc:	080061d3 	.word	0x080061d3
 80061d0:	4770      	bx	lr
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 80061d2:	2080      	movs	r0, #128	; 0x80
 80061d4:	f001 ffca 	bl	800816c <system_set_exec_accessory_override_flag>
 80061d8:	e78f      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 80061da:	2040      	movs	r0, #64	; 0x40
 80061dc:	f001 ffc6 	bl	800816c <system_set_exec_accessory_override_flag>
 80061e0:	e78b      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 80061e2:	2020      	movs	r0, #32
 80061e4:	f001 ffc2 	bl	800816c <system_set_exec_accessory_override_flag>
 80061e8:	e787      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 80061ea:	2010      	movs	r0, #16
 80061ec:	f001 ffbe 	bl	800816c <system_set_exec_accessory_override_flag>
 80061f0:	e783      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 80061f2:	2008      	movs	r0, #8
 80061f4:	f001 ffba 	bl	800816c <system_set_exec_accessory_override_flag>
 80061f8:	e77f      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 80061fa:	2004      	movs	r0, #4
 80061fc:	f001 ffb6 	bl	800816c <system_set_exec_accessory_override_flag>
 8006200:	e77b      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8006202:	2002      	movs	r0, #2
 8006204:	f001 ffb2 	bl	800816c <system_set_exec_accessory_override_flag>
 8006208:	e777      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 800620a:	2001      	movs	r0, #1
 800620c:	f001 ffae 	bl	800816c <system_set_exec_accessory_override_flag>
 8006210:	e773      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8006212:	2080      	movs	r0, #128	; 0x80
 8006214:	f001 ffa0 	bl	8008158 <system_set_exec_motion_override_flag>
 8006218:	e76f      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 800621a:	2040      	movs	r0, #64	; 0x40
 800621c:	f001 ff9c 	bl	8008158 <system_set_exec_motion_override_flag>
 8006220:	e76b      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 8006222:	2020      	movs	r0, #32
 8006224:	f001 ff98 	bl	8008158 <system_set_exec_motion_override_flag>
 8006228:	e767      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 800622a:	2010      	movs	r0, #16
 800622c:	f001 ff94 	bl	8008158 <system_set_exec_motion_override_flag>
 8006230:	e763      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 8006232:	2008      	movs	r0, #8
 8006234:	f001 ff90 	bl	8008158 <system_set_exec_motion_override_flag>
 8006238:	e75f      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 800623a:	2004      	movs	r0, #4
 800623c:	f001 ff8c 	bl	8008158 <system_set_exec_motion_override_flag>
 8006240:	e75b      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 8006242:	2002      	movs	r0, #2
 8006244:	f001 ff88 	bl	8008158 <system_set_exec_motion_override_flag>
 8006248:	e757      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 800624a:	2001      	movs	r0, #1
 800624c:	f001 ff84 	bl	8008158 <system_set_exec_motion_override_flag>
 8006250:	e753      	b.n	80060fa <OnUsbDataRx+0x26>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <OnUsbDataRx+0x1a0>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	069b      	lsls	r3, r3, #26
 8006258:	f57f af4f 	bpl.w	80060fa <OnUsbDataRx+0x26>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 800625c:	2040      	movs	r0, #64	; 0x40
 800625e:	f001 ff57 	bl	8008110 <system_set_exec_state_flag>
 8006262:	e74a      	b.n	80060fa <OnUsbDataRx+0x26>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 8006264:	2020      	movs	r0, #32
 8006266:	f001 ff53 	bl	8008110 <system_set_exec_state_flag>
 800626a:	e746      	b.n	80060fa <OnUsbDataRx+0x26>
 800626c:	20000cfc 	.word	0x20000cfc
 8006270:	20000cfd 	.word	0x20000cfd
 8006274:	20001314 	.word	0x20001314
 8006278:	200013c8 	.word	0x200013c8

0800627c <serial_reset_read_buffer>:

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 800627c:	4a02      	ldr	r2, [pc, #8]	; (8006288 <serial_reset_read_buffer+0xc>)
 800627e:	4b03      	ldr	r3, [pc, #12]	; (800628c <serial_reset_read_buffer+0x10>)
 8006280:	7812      	ldrb	r2, [r2, #0]
 8006282:	701a      	strb	r2, [r3, #0]
}
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20000cfc 	.word	0x20000cfc
 800628c:	20000cfd 	.word	0x20000cfd

08006290 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4604      	mov	r4, r0
 8006294:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8006296:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800629a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800629e:	f7ff f815 	bl	80052cc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80062a2:	4629      	mov	r1, r5
 80062a4:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80062a8:	2250      	movs	r2, #80	; 0x50
}
 80062aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80062ae:	f7fb ba19 	b.w	80016e4 <memcpy_to_eeprom_with_checksum>
 80062b2:	bf00      	nop

080062b4 <settings_store_build_info>:


// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
 80062b4:	4601      	mov	r1, r0
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 80062b6:	2250      	movs	r2, #80	; 0x50
 80062b8:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80062bc:	f7fb ba12 	b.w	80016e4 <memcpy_to_eeprom_with_checksum>

080062c0 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4604      	mov	r4, r0
 80062c4:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
 80062c6:	f7ff f801 	bl	80052cc <protocol_buffer_synchronize>
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 80062ca:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80062ce:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80062d2:	4629      	mov	r1, r5
}
 80062d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80062d8:	220c      	movs	r2, #12
 80062da:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80062de:	f7fb ba01 	b.w	80016e4 <memcpy_to_eeprom_with_checksum>
 80062e2:	bf00      	nop

080062e4 <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e6:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80062e8:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 80062ea:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80062ec:	d407      	bmi.n	80062fe <settings_restore+0x1a>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 80062ee:	07a9      	lsls	r1, r5, #30
 80062f0:	d441      	bmi.n	8006376 <settings_restore+0x92>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 80062f2:	076a      	lsls	r2, r5, #29
 80062f4:	d452      	bmi.n	800639c <settings_restore+0xb8>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 80062f6:	072b      	lsls	r3, r5, #28
 80062f8:	d466      	bmi.n	80063c8 <settings_restore+0xe4>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
  }
}
 80062fa:	b005      	add	sp, #20
 80062fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 80062fe:	f44f 12f8 	mov.w	r2, #2031616	; 0x1f0000
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8006302:	4c37      	ldr	r4, [pc, #220]	; (80063e0 <settings_restore+0xfc>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8006304:	211f      	movs	r1, #31
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8006306:	f8c4 2032 	str.w	r2, [r4, #50]	; 0x32
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 800630a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800630e:	65a2      	str	r2, [r4, #88]	; 0x58
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8006310:	4a34      	ldr	r2, [pc, #208]	; (80063e4 <settings_restore+0x100>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8006312:	26fa      	movs	r6, #250	; 0xfa
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8006314:	2344      	movs	r3, #68	; 0x44
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8006316:	63e2      	str	r2, [r4, #60]	; 0x3c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8006318:	2200      	movs	r2, #0
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 800631a:	2000      	movs	r0, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800631c:	2706      	movs	r7, #6
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 800631e:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8006322:	4931      	ldr	r1, [pc, #196]	; (80063e8 <settings_restore+0x104>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8006324:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8006328:	64e1      	str	r1, [r4, #76]	; 0x4c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 800632a:	4930      	ldr	r1, [pc, #192]	; (80063ec <settings_restore+0x108>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 800632c:	4e30      	ldr	r6, [pc, #192]	; (80063f0 <settings_restore+0x10c>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 800632e:	6521      	str	r1, [r4, #80]	; 0x50
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8006330:	4930      	ldr	r1, [pc, #192]	; (80063f4 <settings_restore+0x110>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8006332:	6462      	str	r2, [r4, #68]	; 0x44
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8006334:	63a1      	str	r1, [r4, #56]	; 0x38
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8006336:	4930      	ldr	r1, [pc, #192]	; (80063f8 <settings_restore+0x114>)
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8006338:	4a30      	ldr	r2, [pc, #192]	; (80063fc <settings_restore+0x118>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 800633a:	6421      	str	r1, [r4, #64]	; 0x40
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 800633c:	4930      	ldr	r1, [pc, #192]	; (8006400 <settings_restore+0x11c>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 800633e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <settings_restore+0x120>)
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8006344:	86e0      	strh	r0, [r4, #54]	; 0x36
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8006346:	60e1      	str	r1, [r4, #12]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8006348:	6121      	str	r1, [r4, #16]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 800634a:	6161      	str	r1, [r4, #20]
  eeprom_put_char(0, SETTINGS_VERSION);
 800634c:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 800634e:	61a2      	str	r2, [r4, #24]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8006350:	61e2      	str	r2, [r4, #28]
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8006352:	6222      	str	r2, [r4, #32]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8006354:	6263      	str	r3, [r4, #36]	; 0x24
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8006356:	62a3      	str	r3, [r4, #40]	; 0x28
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8006358:	62e3      	str	r3, [r4, #44]	; 0x2c
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800635a:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 800635e:	6026      	str	r6, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8006360:	6066      	str	r6, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8006362:	60a6      	str	r6, [r4, #8]
  eeprom_put_char(0, SETTINGS_VERSION);
 8006364:	f7fb f9b8 	bl	80016d8 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8006368:	4621      	mov	r1, r4
 800636a:	225c      	movs	r2, #92	; 0x5c
 800636c:	2001      	movs	r0, #1
 800636e:	f7fb f9b9 	bl	80016e4 <memcpy_to_eeprom_with_checksum>
  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8006372:	07a9      	lsls	r1, r5, #30
 8006374:	d5bd      	bpl.n	80062f2 <settings_restore+0xe>
    memset(&coord_data, 0, sizeof(coord_data));
 8006376:	2300      	movs	r3, #0
 8006378:	f44f 7400 	mov.w	r4, #512	; 0x200
 800637c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006380:	9303      	str	r3, [sp, #12]
    protocol_buffer_synchronize();
 8006382:	f7fe ffa3 	bl	80052cc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006386:	4620      	mov	r0, r4
 8006388:	220c      	movs	r2, #12
 800638a:	a901      	add	r1, sp, #4
 800638c:	340d      	adds	r4, #13
 800638e:	f7fb f9a9 	bl	80016e4 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8006392:	f5b4 7f1a 	cmp.w	r4, #616	; 0x268
 8006396:	d1f4      	bne.n	8006382 <settings_restore+0x9e>
  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8006398:	076a      	lsls	r2, r5, #29
 800639a:	d5ac      	bpl.n	80062f6 <settings_restore+0x12>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 800639c:	2100      	movs	r1, #0
 800639e:	f44f 7040 	mov.w	r0, #768	; 0x300
 80063a2:	f7fb f999 	bl	80016d8 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 80063a6:	2100      	movs	r1, #0
 80063a8:	f240 3001 	movw	r0, #769	; 0x301
 80063ac:	f7fb f994 	bl	80016d8 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 80063b0:	2100      	movs	r1, #0
 80063b2:	f240 3051 	movw	r0, #849	; 0x351
 80063b6:	f7fb f98f 	bl	80016d8 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 80063ba:	2100      	movs	r1, #0
 80063bc:	f240 3052 	movw	r0, #850	; 0x352
 80063c0:	f7fb f98a 	bl	80016d8 <eeprom_put_char>
  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 80063c4:	072b      	lsls	r3, r5, #28
 80063c6:	d598      	bpl.n	80062fa <settings_restore+0x16>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 80063c8:	2100      	movs	r1, #0
 80063ca:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80063ce:	f7fb f983 	bl	80016d8 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 80063d2:	2100      	movs	r1, #0
 80063d4:	f240 30c1 	movw	r0, #961	; 0x3c1
 80063d8:	f7fb f97e 	bl	80016d8 <eeprom_put_char>
}
 80063dc:	b005      	add	sp, #20
 80063de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e0:	200014c8 	.word	0x200014c8
 80063e4:	3b03126f 	.word	0x3b03126f
 80063e8:	41200000 	.word	0x41200000
 80063ec:	42c80000 	.word	0x42c80000
 80063f0:	45a00000 	.word	0x45a00000
 80063f4:	3c23d70a 	.word	0x3c23d70a
 80063f8:	447a0000 	.word	0x447a0000
 80063fc:	4bdbba00 	.word	0x4bdbba00
 8006400:	44fa0000 	.word	0x44fa0000
 8006404:	c38c0000 	.word	0xc38c0000

08006408 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 800640c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006410:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006414:	f500 7440 	add.w	r4, r0, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8006418:	4621      	mov	r1, r4
 800641a:	4630      	mov	r0, r6
 800641c:	2250      	movs	r2, #80	; 0x50
 800641e:	f7fb f9af 	bl	8001780 <memcpy_from_eeprom_with_checksum>
 8006422:	b108      	cbz	r0, 8006428 <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 8006424:	2001      	movs	r0, #1
}
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 800642a:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800642c:	f7fe ff4e 	bl	80052cc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8006430:	4620      	mov	r0, r4
 8006432:	4631      	mov	r1, r6
 8006434:	2250      	movs	r2, #80	; 0x50
 8006436:	f7fb f955 	bl	80016e4 <memcpy_to_eeprom_with_checksum>
    return(false);
 800643a:	4628      	mov	r0, r5
}
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	bf00      	nop

08006440 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8006440:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8006442:	2250      	movs	r2, #80	; 0x50
 8006444:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 8006448:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 800644a:	f7fb f999 	bl	8001780 <memcpy_from_eeprom_with_checksum>
 800644e:	b108      	cbz	r0, 8006454 <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 8006450:	2001      	movs	r0, #1
}
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 8006456:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8006458:	4629      	mov	r1, r5
 800645a:	2250      	movs	r2, #80	; 0x50
 800645c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8006460:	f7fb f940 	bl	80016e4 <memcpy_to_eeprom_with_checksum>
    return(false);
 8006464:	4620      	mov	r0, r4
}
 8006466:	bd38      	pop	{r3, r4, r5, pc}

08006468 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 800646c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8006470:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8006474:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8006478:	4621      	mov	r1, r4
 800647a:	4630      	mov	r0, r6
 800647c:	220c      	movs	r2, #12
 800647e:	f7fb f97f 	bl	8001780 <memcpy_from_eeprom_with_checksum>
 8006482:	b108      	cbz	r0, 8006488 <settings_read_coord_data+0x20>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 8006484:	2001      	movs	r0, #1
}
 8006486:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 8006488:	2300      	movs	r3, #0
 800648a:	4605      	mov	r5, r0
 800648c:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 800648e:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 8006490:	60b3      	str	r3, [r6, #8]
    protocol_buffer_synchronize();
 8006492:	f7fe ff1b 	bl	80052cc <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8006496:	4620      	mov	r0, r4
 8006498:	4631      	mov	r1, r6
 800649a:	220c      	movs	r2, #12
 800649c:	f7fb f922 	bl	80016e4 <memcpy_to_eeprom_with_checksum>
    return(false);
 80064a0:	4628      	mov	r0, r5
}
 80064a2:	bd70      	pop	{r4, r5, r6, pc}

080064a4 <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	460d      	mov	r5, r1
 80064a8:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 80064aa:	2100      	movs	r1, #0
 80064ac:	4628      	mov	r0, r5
 80064ae:	f7fa fb8f 	bl	8000bd0 <__aeabi_fcmplt>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d16c      	bne.n	8006590 <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 80064b6:	2c63      	cmp	r4, #99	; 0x63
 80064b8:	d91e      	bls.n	80064f8 <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 80064ba:	f1a4 0264 	sub.w	r2, r4, #100	; 0x64
 80064be:	b2d2      	uxtb	r2, r2
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 80064c0:	2a02      	cmp	r2, #2
 80064c2:	f240 8114 	bls.w	80066ee <settings_store_global_setting+0x24a>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 80064c6:	2a09      	cmp	r2, #9
 80064c8:	d914      	bls.n	80064f4 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 80064ca:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 80064ce:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	f240 80fe 	bls.w	80066d2 <settings_store_global_setting+0x22e>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 80064d6:	2b09      	cmp	r3, #9
 80064d8:	d90c      	bls.n	80064f4 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 80064da:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 80064de:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	f240 80fb 	bls.w	80066dc <settings_store_global_setting+0x238>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 80064e6:	2b09      	cmp	r3, #9
 80064e8:	d904      	bls.n	80064f4 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 80064ea:	347e      	adds	r4, #126	; 0x7e
 80064ec:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 80064ee:	2c02      	cmp	r4, #2
 80064f0:	f240 8101 	bls.w	80066f6 <settings_store_global_setting+0x252>
      }
    }
  } else {
    // Store non-axis Grbl settings
    uint8_t int_value = truncf(value);
 80064f4:	2003      	movs	r0, #3
        return(STATUS_INVALID_STATEMENT);
    }
  }
  write_global_settings();
  return(STATUS_OK);
}
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7fa fbcd 	bl	8000c98 <__aeabi_f2uiz>
 80064fe:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 8006500:	2c20      	cmp	r4, #32
 8006502:	d8f7      	bhi.n	80064f4 <settings_store_global_setting+0x50>
 8006504:	a301      	add	r3, pc, #4	; (adr r3, 800650c <settings_store_global_setting+0x68>)
 8006506:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800650a:	bf00      	nop
 800650c:	080065bf 	.word	0x080065bf
 8006510:	080065cd 	.word	0x080065cd
 8006514:	080065f5 	.word	0x080065f5
 8006518:	080065d5 	.word	0x080065d5
 800651c:	080065df 	.word	0x080065df
 8006520:	080065ff 	.word	0x080065ff
 8006524:	08006615 	.word	0x08006615
 8006528:	080064f5 	.word	0x080064f5
 800652c:	080064f5 	.word	0x080064f5
 8006530:	080064f5 	.word	0x080064f5
 8006534:	0800667f 	.word	0x0800667f
 8006538:	08006687 	.word	0x08006687
 800653c:	08006643 	.word	0x08006643
 8006540:	080066bd 	.word	0x080066bd
 8006544:	080064f5 	.word	0x080064f5
 8006548:	080064f5 	.word	0x080064f5
 800654c:	080064f5 	.word	0x080064f5
 8006550:	080064f5 	.word	0x080064f5
 8006554:	080064f5 	.word	0x080064f5
 8006558:	080064f5 	.word	0x080064f5
 800655c:	0800668d 	.word	0x0800668d
 8006560:	080066a5 	.word	0x080066a5
 8006564:	0800662f 	.word	0x0800662f
 8006568:	08006677 	.word	0x08006677
 800656c:	0800666b 	.word	0x0800666b
 8006570:	08006671 	.word	0x08006671
 8006574:	08006649 	.word	0x08006649
 8006578:	08006651 	.word	0x08006651
 800657c:	080064f5 	.word	0x080064f5
 8006580:	080064f5 	.word	0x080064f5
 8006584:	08006657 	.word	0x08006657
 8006588:	08006661 	.word	0x08006661
 800658c:	08006595 	.word	0x08006595
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8006590:	2004      	movs	r0, #4
}
 8006592:	bd38      	pop	{r3, r4, r5, pc}
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 8006594:	4a6e      	ldr	r2, [pc, #440]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006596:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 800659a:	2800      	cmp	r0, #0
 800659c:	f000 80b2 	beq.w	8006704 <settings_store_global_setting+0x260>
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
  eeprom_put_char(0, SETTINGS_VERSION);
 80065a8:	210a      	movs	r1, #10
 80065aa:	2000      	movs	r0, #0
 80065ac:	f7fb f894 	bl	80016d8 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 80065b0:	225c      	movs	r2, #92	; 0x5c
 80065b2:	2001      	movs	r0, #1
 80065b4:	4966      	ldr	r1, [pc, #408]	; (8006750 <settings_store_global_setting+0x2ac>)
 80065b6:	f7fb f895 	bl	80016e4 <memcpy_to_eeprom_with_checksum>
  return(STATUS_OK);
 80065ba:	2000      	movs	r0, #0
}
 80065bc:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 80065be:	2802      	cmp	r0, #2
 80065c0:	f240 80c2 	bls.w	8006748 <settings_store_global_setting+0x2a4>
        settings.pulse_microseconds = int_value; break;
 80065c4:	4b62      	ldr	r3, [pc, #392]	; (8006750 <settings_store_global_setting+0x2ac>)
 80065c6:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
 80065ca:	e7ed      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 80065cc:	4b60      	ldr	r3, [pc, #384]	; (8006750 <settings_store_global_setting+0x2ac>)
 80065ce:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 80065d2:	e7e9      	b.n	80065a8 <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 80065d4:	4b5e      	ldr	r3, [pc, #376]	; (8006750 <settings_store_global_setting+0x2ac>)
 80065d6:	8698      	strh	r0, [r3, #52]	; 0x34
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 80065d8:	f000 fcbc 	bl	8006f54 <st_generate_step_dir_invert_masks>
        break;
 80065dc:	e7e4      	b.n	80065a8 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 80065de:	4a5c      	ldr	r2, [pc, #368]	; (8006750 <settings_store_global_setting+0x2ac>)
 80065e0:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f000 809d 	beq.w	8006724 <settings_store_global_setting+0x280>
 80065ea:	f043 0304 	orr.w	r3, r3, #4
 80065ee:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 80065f2:	e7d9      	b.n	80065a8 <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 80065f4:	4b56      	ldr	r3, [pc, #344]	; (8006750 <settings_store_global_setting+0x2ac>)
 80065f6:	8658      	strh	r0, [r3, #50]	; 0x32
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 80065f8:	f000 fcac 	bl	8006f54 <st_generate_step_dir_invert_masks>
        break;
 80065fc:	e7d4      	b.n	80065a8 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 80065fe:	4a54      	ldr	r2, [pc, #336]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006600:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8006604:	2800      	cmp	r0, #0
 8006606:	f000 8088 	beq.w	800671a <settings_store_global_setting+0x276>
 800660a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800660e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006612:	e7c9      	b.n	80065a8 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8006614:	4b4e      	ldr	r3, [pc, #312]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006616:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800661a:	2800      	cmp	r0, #0
 800661c:	d07a      	beq.n	8006714 <settings_store_global_setting+0x270>
 800661e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 8006622:	2000      	movs	r0, #0
 8006624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006628:	f7fe fa26 	bl	8004a78 <probe_configure_invert_mask>
        break;
 800662c:	e7bc      	b.n	80065a8 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 800662e:	4a48      	ldr	r2, [pc, #288]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006630:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8006634:	2800      	cmp	r0, #0
 8006636:	d07f      	beq.n	8006738 <settings_store_global_setting+0x294>
 8006638:	f043 0310 	orr.w	r3, r3, #16
 800663c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006640:	e7b2      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 8006642:	4b43      	ldr	r3, [pc, #268]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006644:	63dd      	str	r5, [r3, #60]	; 0x3c
 8006646:	e7af      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 8006648:	4b41      	ldr	r3, [pc, #260]	; (8006750 <settings_store_global_setting+0x2ac>)
 800664a:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
 800664e:	e7ab      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 8006650:	4b3f      	ldr	r3, [pc, #252]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006652:	659d      	str	r5, [r3, #88]	; 0x58
 8006654:	e7a8      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8006656:	4b3e      	ldr	r3, [pc, #248]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006658:	641d      	str	r5, [r3, #64]	; 0x40
 800665a:	f000 f897 	bl	800678c <spindle_init>
 800665e:	e7a3      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8006660:	4b3b      	ldr	r3, [pc, #236]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006662:	645d      	str	r5, [r3, #68]	; 0x44
 8006664:	f000 f892 	bl	800678c <spindle_init>
 8006668:	e79e      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 800666a:	4b39      	ldr	r3, [pc, #228]	; (8006750 <settings_store_global_setting+0x2ac>)
 800666c:	64dd      	str	r5, [r3, #76]	; 0x4c
 800666e:	e79b      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 8006670:	4b37      	ldr	r3, [pc, #220]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006672:	651d      	str	r5, [r3, #80]	; 0x50
 8006674:	e798      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 8006676:	4b36      	ldr	r3, [pc, #216]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006678:	f8a3 004a 	strh.w	r0, [r3, #74]	; 0x4a
 800667c:	e794      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 800667e:	4b34      	ldr	r3, [pc, #208]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006680:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
 8006684:	e790      	b.n	80065a8 <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 8006686:	4b32      	ldr	r3, [pc, #200]	; (8006750 <settings_store_global_setting+0x2ac>)
 8006688:	639d      	str	r5, [r3, #56]	; 0x38
 800668a:	e78d      	b.n	80065a8 <settings_store_global_setting+0x104>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 800668c:	4a30      	ldr	r2, [pc, #192]	; (8006750 <settings_store_global_setting+0x2ac>)
 800668e:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
        if (int_value) {
 8006692:	2800      	cmp	r0, #0
 8006694:	d04b      	beq.n	800672e <settings_store_global_setting+0x28a>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8006696:	06d9      	lsls	r1, r3, #27
 8006698:	d558      	bpl.n	800674c <settings_store_global_setting+0x2a8>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 800669a:	f043 0320 	orr.w	r3, r3, #32
 800669e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 80066a2:	e781      	b.n	80065a8 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 80066a4:	4b2a      	ldr	r3, [pc, #168]	; (8006750 <settings_store_global_setting+0x2ac>)
 80066a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d049      	beq.n	8006742 <settings_store_global_setting+0x29e>
 80066ae:	f042 0208 	orr.w	r2, r2, #8
 80066b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 80066b6:	f7fc faa5 	bl	8002c04 <limits_init>
        break;
 80066ba:	e775      	b.n	80065a8 <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 80066bc:	4b24      	ldr	r3, [pc, #144]	; (8006750 <settings_store_global_setting+0x2ac>)
 80066be:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80066c2:	b320      	cbz	r0, 800670e <settings_store_global_setting+0x26a>
 80066c4:	f042 0201 	orr.w	r2, r2, #1
 80066c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 80066cc:	f001 fccc 	bl	8008068 <system_flag_wco_change>
        break;
 80066d0:	e76a      	b.n	80065a8 <settings_store_global_setting+0x104>
            settings.max_rate[parameter] = value;
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <settings_store_global_setting+0x2ac>)
 80066d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066d8:	60dd      	str	r5, [r3, #12]
            break;
 80066da:	e765      	b.n	80065a8 <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 80066dc:	4628      	mov	r0, r5
 80066de:	491d      	ldr	r1, [pc, #116]	; (8006754 <settings_store_global_setting+0x2b0>)
 80066e0:	1d9c      	adds	r4, r3, #6
 80066e2:	f7fa f8d7 	bl	8000894 <__aeabi_fmul>
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <settings_store_global_setting+0x2ac>)
 80066e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80066ec:	e75c      	b.n	80065a8 <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 80066ee:	4b18      	ldr	r3, [pc, #96]	; (8006750 <settings_store_global_setting+0x2ac>)
 80066f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
            break;
 80066f4:	e758      	b.n	80065a8 <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 80066f6:	4a16      	ldr	r2, [pc, #88]	; (8006750 <settings_store_global_setting+0x2ac>)
 80066f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80066fc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006700:	6263      	str	r3, [r4, #36]	; 0x24
 8006702:	e751      	b.n	80065a8 <settings_store_global_setting+0x104>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8006704:	f023 0302 	bic.w	r3, r3, #2
 8006708:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 800670c:	e74c      	b.n	80065a8 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 800670e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006712:	e7d9      	b.n	80066c8 <settings_store_global_setting+0x224>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8006714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006718:	e783      	b.n	8006622 <settings_store_global_setting+0x17e>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 800671a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006722:	e741      	b.n	80065a8 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8006724:	f023 0304 	bic.w	r3, r3, #4
 8006728:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 800672c:	e73c      	b.n	80065a8 <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 800672e:	f023 0320 	bic.w	r3, r3, #32
 8006732:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006736:	e737      	b.n	80065a8 <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8006738:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800673c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 8006740:	e732      	b.n	80065a8 <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8006742:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8006746:	e7b4      	b.n	80066b2 <settings_store_global_setting+0x20e>
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8006748:	2006      	movs	r0, #6
}
 800674a:	bd38      	pop	{r3, r4, r5, pc}
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 800674c:	200a      	movs	r0, #10
}
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	200014c8 	.word	0x200014c8
 8006754:	45610000 	.word	0x45610000

08006758 <settings_init>:
  uint8_t version = eeprom_get_char(0);
 8006758:	2000      	movs	r0, #0


// Initialize the config subsystem
void settings_init() {
 800675a:	b508      	push	{r3, lr}
  uint8_t version = eeprom_get_char(0);
 800675c:	f7fa ffb6 	bl	80016cc <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8006760:	280a      	cmp	r0, #10
 8006762:	d009      	beq.n	8006778 <settings_init+0x20>
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8006764:	2007      	movs	r0, #7
 8006766:	f7fe fdcd 	bl	8005304 <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 800676a:	20ff      	movs	r0, #255	; 0xff
 800676c:	f7ff fdba 	bl	80062e4 <settings_restore>
    report_grbl_settings();
  }
}
 8006770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_grbl_settings();
 8006774:	f7fe be5e 	b.w	8005434 <report_grbl_settings>
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8006778:	225c      	movs	r2, #92	; 0x5c
 800677a:	2101      	movs	r1, #1
 800677c:	4802      	ldr	r0, [pc, #8]	; (8006788 <settings_init+0x30>)
 800677e:	f7fa ffff 	bl	8001780 <memcpy_from_eeprom_with_checksum>
 8006782:	2800      	cmp	r0, #0
 8006784:	d0ee      	beq.n	8006764 <settings_init+0xc>
}
 8006786:	bd08      	pop	{r3, pc}
 8006788:	200014c8 	.word	0x200014c8

0800678c <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 800678c:	b570      	push	{r4, r5, r6, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 800678e:	4b34      	ldr	r3, [pc, #208]	; (8006860 <spindle_init+0xd4>)
{
 8006790:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8006792:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006794:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006796:	f7f9 ff73 	bl	8000680 <__aeabi_fsub>
 800679a:	4601      	mov	r1, r0
 800679c:	4831      	ldr	r0, [pc, #196]	; (8006864 <spindle_init+0xd8>)
 800679e:	f7fa f92d 	bl	80009fc <__aeabi_fdiv>
 80067a2:	4602      	mov	r2, r0
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 80067a4:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 80067a6:	4b30      	ldr	r3, [pc, #192]	; (8006868 <spindle_init+0xdc>)
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 80067a8:	4e30      	ldr	r6, [pc, #192]	; (800686c <spindle_init+0xe0>)
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 80067aa:	2101      	movs	r1, #1
 80067ac:	2008      	movs	r0, #8
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 80067ae:	601a      	str	r2, [r3, #0]
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 80067b0:	f7fa fde6 	bl	8001380 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 80067b4:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <spindle_init+0xe4>)
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 80067b6:	4630      	mov	r0, r6
 80067b8:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 80067ba:	9300      	str	r3, [sp, #0]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 80067bc:	f7fa fbf4 	bl	8000fa8 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 80067c0:	4b2c      	ldr	r3, [pc, #176]	; (8006874 <spindle_init+0xe8>)
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 80067c2:	4669      	mov	r1, sp
 80067c4:	4630      	mov	r0, r6
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 80067c6:	9300      	str	r3, [sp, #0]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 80067c8:	f7fa fbee 	bl	8000fa8 <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80067cc:	2101      	movs	r1, #1
 80067ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80067d2:	f7fa fdd5 	bl	8001380 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 80067d6:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 80067d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80067dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_TimeBaseStructInit(&timerInitStructure);
 80067e0:	f7fa fe82 	bl	80014e8 <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 80067e4:	2263      	movs	r2, #99	; 0x63
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <spindle_init+0xec>)
 80067e8:	4824      	ldr	r0, [pc, #144]	; (800687c <spindle_init+0xf0>)
 80067ea:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 80067ec:	4d24      	ldr	r5, [pc, #144]	; (8006880 <spindle_init+0xf4>)
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 80067ee:	fba0 0303 	umull	r0, r3, r0, r3
 80067f2:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 80067f4:	4628      	mov	r0, r5
 80067f6:	a901      	add	r1, sp, #4
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 80067f8:	3b01      	subs	r3, #1
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 80067fa:	9202      	str	r2, [sp, #8]
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 80067fc:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006800:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8006804:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8006808:	f7fa fdd2 	bl	80013b0 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 800680c:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <spindle_init+0xf8>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 800680e:	4628      	mov	r0, r5
 8006810:	a904      	add	r1, sp, #16
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8006812:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8006814:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8006818:	f7fa fe20 	bl	800145c <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800681c:	4628      	mov	r0, r5
 800681e:	2108      	movs	r1, #8
 8006820:	f7fa fe92 	bl	8001548 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006824:	4621      	mov	r1, r4
 8006826:	4628      	mov	r0, r5
 8006828:	f7fa fe74 	bl	8001514 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 800682c:	4628      	mov	r0, r5
 800682e:	2101      	movs	r1, #1
 8006830:	f7fa fe62 	bl	80014f8 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8006834:	2101      	movs	r1, #1
 8006836:	2004      	movs	r0, #4
 8006838:	f7fa fda2 	bl	8001380 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <spindle_init+0xfc>)
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 800683e:	4669      	mov	r1, sp
 8006840:	4812      	ldr	r0, [pc, #72]	; (800688c <spindle_init+0x100>)
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8006842:	9300      	str	r3, [sp, #0]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8006844:	f7fa fbb0 	bl	8000fa8 <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f7fa fe62 	bl	8001514 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 8006850:	4622      	mov	r2, r4
 8006852:	4630      	mov	r0, r6
 8006854:	2102      	movs	r1, #2
 8006856:	f7fa fd39 	bl	80012cc <GPIO_WriteBit>
}
 800685a:	b008      	add	sp, #32
 800685c:	bd70      	pop	{r4, r5, r6, pc}
 800685e:	bf00      	nop
 8006860:	200014c8 	.word	0x200014c8
 8006864:	42c60000 	.word	0x42c60000
 8006868:	20000d00 	.word	0x20000d00
 800686c:	40010c00 	.word	0x40010c00
 8006870:	10030001 	.word	0x10030001
 8006874:	10030002 	.word	0x10030002
 8006878:	20000004 	.word	0x20000004
 800687c:	431bde83 	.word	0x431bde83
 8006880:	40012c00 	.word	0x40012c00
 8006884:	00010060 	.word	0x00010060
 8006888:	18030100 	.word	0x18030100
 800688c:	40010800 	.word	0x40010800

08006890 <spindle_get_state>:
{
 8006890:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 8006892:	4805      	ldr	r0, [pc, #20]	; (80068a8 <spindle_get_state+0x18>)
 8006894:	f7fa fd0e 	bl	80012b4 <GPIO_ReadInputData>
 8006898:	b2c3      	uxtb	r3, r0
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 800689a:	f010 0002 	ands.w	r0, r0, #2
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 800689e:	bf1c      	itt	ne
 80068a0:	f003 0001 	andne.w	r0, r3, #1
 80068a4:	3001      	addne	r0, #1
}
 80068a6:	bd08      	pop	{r3, pc}
 80068a8:	40010c00 	.word	0x40010c00

080068ac <spindle_stop>:
{
 80068ac:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80068ae:	2100      	movs	r1, #0
 80068b0:	4804      	ldr	r0, [pc, #16]	; (80068c4 <spindle_stop+0x18>)
 80068b2:	f7fa fe2f 	bl	8001514 <TIM_CtrlPWMOutputs>
      #endif
    #endif
#endif
}
 80068b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ResetSpindleEnablebit();
 80068ba:	2200      	movs	r2, #0
 80068bc:	2102      	movs	r1, #2
 80068be:	4802      	ldr	r0, [pc, #8]	; (80068c8 <spindle_stop+0x1c>)
 80068c0:	f7fa bd04 	b.w	80012cc <GPIO_WriteBit>
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40010c00 	.word	0x40010c00

080068cc <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 80068cc:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 80068ce:	4803      	ldr	r0, [pc, #12]	; (80068dc <spindle_set_speed+0x10>)
 80068d0:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80068d2:	b101      	cbz	r1, 80068d6 <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80068d4:	2101      	movs	r1, #1
 80068d6:	f7fa be1d 	b.w	8001514 <TIM_CtrlPWMOutputs>
 80068da:	bf00      	nop
 80068dc:	40012c00 	.word	0x40012c00

080068e0 <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80068e2:	4b1e      	ldr	r3, [pc, #120]	; (800695c <spindle_compute_pwm_value+0x7c>)
	{
 80068e4:	4604      	mov	r4, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80068e6:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 80068e8:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80068ea:	4630      	mov	r0, r6
 80068ec:	4629      	mov	r1, r5
 80068ee:	f7fa f983 	bl	8000bf8 <__aeabi_fcmpge>
 80068f2:	4f1b      	ldr	r7, [pc, #108]	; (8006960 <spindle_compute_pwm_value+0x80>)
 80068f4:	b9e0      	cbnz	r0, 8006930 <spindle_compute_pwm_value+0x50>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80068f6:	7ab8      	ldrb	r0, [r7, #10]
 80068f8:	f7f9 ff78 	bl	80007ec <__aeabi_i2f>
 80068fc:	4621      	mov	r1, r4
 80068fe:	f7f9 ffc9 	bl	8000894 <__aeabi_fmul>
 8006902:	4918      	ldr	r1, [pc, #96]	; (8006964 <spindle_compute_pwm_value+0x84>)
 8006904:	f7f9 ffc6 	bl	8000894 <__aeabi_fmul>
 8006908:	4604      	mov	r4, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800690a:	4628      	mov	r0, r5
 800690c:	4621      	mov	r1, r4
 800690e:	f7fa f969 	bl	8000be4 <__aeabi_fcmple>
 8006912:	b968      	cbnz	r0, 8006930 <spindle_compute_pwm_value+0x50>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
			pwm_value = SPINDLE_PWM_MAX_VALUE;
		}
		else if (rpm <= settings.rpm_min) {
 8006914:	4621      	mov	r1, r4
 8006916:	4630      	mov	r0, r6
 8006918:	f7fa f96e 	bl	8000bf8 <__aeabi_fcmpge>
 800691c:	b158      	cbz	r0, 8006936 <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 800691e:	2500      	movs	r5, #0
 8006920:	4620      	mov	r0, r4
 8006922:	4629      	mov	r1, r5
 8006924:	f7fa f94a 	bl	8000bbc <__aeabi_fcmpeq>
 8006928:	b1a8      	cbz	r0, 8006956 <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 800692a:	2000      	movs	r0, #0
				sys.spindle_speed = 0.0f;
 800692c:	613d      	str	r5, [r7, #16]
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
		}
		return(pwm_value);
	}
 800692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8006930:	2064      	movs	r0, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8006932:	613d      	str	r5, [r7, #16]
	}
 8006934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006936:	4631      	mov	r1, r6
 8006938:	4620      	mov	r0, r4
			sys.spindle_speed = rpm;
 800693a:	613c      	str	r4, [r7, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800693c:	f7f9 fea0 	bl	8000680 <__aeabi_fsub>
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <spindle_compute_pwm_value+0x88>)
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	f7f9 ffa6 	bl	8000894 <__aeabi_fmul>
 8006948:	f002 ff5e 	bl	8009808 <floorf>
 800694c:	f7fa f9a4 	bl	8000c98 <__aeabi_f2uiz>
 8006950:	3001      	adds	r0, #1
 8006952:	b280      	uxth	r0, r0
	}
 8006954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8006956:	2001      	movs	r0, #1
				sys.spindle_speed = settings.rpm_min;
 8006958:	613e      	str	r6, [r7, #16]
	}
 800695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695c:	200014c8 	.word	0x200014c8
 8006960:	20001314 	.word	0x20001314
 8006964:	3c23d70a 	.word	0x3c23d70a
 8006968:	20000d00 	.word	0x20000d00

0800696c <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 800696e:	4d3f      	ldr	r5, [pc, #252]	; (8006a6c <spindle_set_state+0x100>)
 8006970:	786a      	ldrb	r2, [r5, #1]
 8006972:	2a00      	cmp	r2, #0
 8006974:	d144      	bne.n	8006a00 <spindle_set_state+0x94>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8006976:	4604      	mov	r4, r0
 8006978:	2800      	cmp	r0, #0
 800697a:	d034      	beq.n	80069e6 <spindle_set_state+0x7a>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 800697c:	2810      	cmp	r0, #16
 800697e:	460e      	mov	r6, r1
 8006980:	d051      	beq.n	8006a26 <spindle_set_state+0xba>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 8006982:	2201      	movs	r2, #1
 8006984:	483a      	ldr	r0, [pc, #232]	; (8006a70 <spindle_set_state+0x104>)
 8006986:	4611      	mov	r1, r2
 8006988:	f7fa fca0 	bl	80012cc <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 800698c:	4b39      	ldr	r3, [pc, #228]	; (8006a74 <spindle_set_state+0x108>)
 800698e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006992:	0792      	lsls	r2, r2, #30
 8006994:	d443      	bmi.n	8006a1e <spindle_set_state+0xb2>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006996:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8006998:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800699a:	4638      	mov	r0, r7
 800699c:	4621      	mov	r1, r4
 800699e:	f7fa f92b 	bl	8000bf8 <__aeabi_fcmpge>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d12d      	bne.n	8006a02 <spindle_set_state+0x96>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80069a6:	7aa8      	ldrb	r0, [r5, #10]
 80069a8:	f7f9 ff20 	bl	80007ec <__aeabi_i2f>
 80069ac:	4932      	ldr	r1, [pc, #200]	; (8006a78 <spindle_set_state+0x10c>)
 80069ae:	f7f9 ff71 	bl	8000894 <__aeabi_fmul>
 80069b2:	4631      	mov	r1, r6
 80069b4:	f7f9 ff6e 	bl	8000894 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80069b8:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80069ba:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80069bc:	f7fa f91c 	bl	8000bf8 <__aeabi_fcmpge>
 80069c0:	b9f8      	cbnz	r0, 8006a02 <spindle_set_state+0x96>
		else if (rpm <= settings.rpm_min) {
 80069c2:	4639      	mov	r1, r7
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7fa f90d 	bl	8000be4 <__aeabi_fcmple>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d031      	beq.n	8006a32 <spindle_set_state+0xc6>
			if (rpm == 0.0f) { // S0 disables spindle
 80069ce:	2400      	movs	r4, #0
 80069d0:	4630      	mov	r0, r6
 80069d2:	4621      	mov	r1, r4
 80069d4:	f7fa f8f2 	bl	8000bbc <__aeabi_fcmpeq>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d042      	beq.n	8006a62 <spindle_set_state+0xf6>
		TIM1->CCR1 = pwm_value;
 80069dc:	2200      	movs	r2, #0
 80069de:	4b27      	ldr	r3, [pc, #156]	; (8006a7c <spindle_set_state+0x110>)
				sys.spindle_speed = 0.0f;
 80069e0:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 80069e2:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80069e4:	e038      	b.n	8006a58 <spindle_set_state+0xec>
      sys.spindle_speed = 0.0f;
 80069e6:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80069e8:	4601      	mov	r1, r0
 80069ea:	4824      	ldr	r0, [pc, #144]	; (8006a7c <spindle_set_state+0x110>)
      sys.spindle_speed = 0.0f;
 80069ec:	612b      	str	r3, [r5, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80069ee:	f7fa fd91 	bl	8001514 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 80069f2:	4622      	mov	r2, r4
 80069f4:	2102      	movs	r1, #2
 80069f6:	481e      	ldr	r0, [pc, #120]	; (8006a70 <spindle_set_state+0x104>)
 80069f8:	f7fa fc68 	bl	80012cc <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 80069fc:	2300      	movs	r3, #0
 80069fe:	732b      	strb	r3, [r5, #12]
}
 8006a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TIM1->CCR1 = pwm_value;
 8006a02:	2264      	movs	r2, #100	; 0x64
 8006a04:	4b1d      	ldr	r3, [pc, #116]	; (8006a7c <spindle_set_state+0x110>)
			sys.spindle_speed = settings.rpm_max;
 8006a06:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006a08:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	481b      	ldr	r0, [pc, #108]	; (8006a7c <spindle_set_state+0x110>)
 8006a0e:	f7fa fd81 	bl	8001514 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8006a12:	2201      	movs	r2, #1
 8006a14:	2102      	movs	r1, #2
 8006a16:	4816      	ldr	r0, [pc, #88]	; (8006a70 <spindle_set_state+0x104>)
 8006a18:	f7fa fc58 	bl	80012cc <GPIO_WriteBit>
 8006a1c:	e7ee      	b.n	80069fc <spindle_set_state+0x90>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8006a1e:	2c20      	cmp	r4, #32
 8006a20:	bf08      	it	eq
 8006a22:	2600      	moveq	r6, #0
 8006a24:	e7b7      	b.n	8006996 <spindle_set_state+0x2a>
        ResetSpindleDirectionBit();
 8006a26:	2101      	movs	r1, #1
 8006a28:	4811      	ldr	r0, [pc, #68]	; (8006a70 <spindle_set_state+0x104>)
 8006a2a:	f7fa fc4f 	bl	80012cc <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8006a2e:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <spindle_set_state+0x108>)
 8006a30:	e7b1      	b.n	8006996 <spindle_set_state+0x2a>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006a32:	4639      	mov	r1, r7
 8006a34:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8006a36:	612e      	str	r6, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006a38:	f7f9 fe22 	bl	8000680 <__aeabi_fsub>
 8006a3c:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <spindle_set_state+0x114>)
 8006a3e:	6819      	ldr	r1, [r3, #0]
 8006a40:	f7f9 ff28 	bl	8000894 <__aeabi_fmul>
 8006a44:	f002 fee0 	bl	8009808 <floorf>
 8006a48:	f7fa f926 	bl	8000c98 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <spindle_set_state+0x110>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006a4e:	3001      	adds	r0, #1
 8006a50:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8006a52:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d1d8      	bne.n	8006a0a <spindle_set_state+0x9e>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4808      	ldr	r0, [pc, #32]	; (8006a7c <spindle_set_state+0x110>)
 8006a5c:	f7fa fd5a 	bl	8001514 <TIM_CtrlPWMOutputs>
	}
 8006a60:	e7d7      	b.n	8006a12 <spindle_set_state+0xa6>
		TIM1->CCR1 = pwm_value;
 8006a62:	2201      	movs	r2, #1
 8006a64:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <spindle_set_state+0x110>)
				sys.spindle_speed = settings.rpm_min;
 8006a66:	612f      	str	r7, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006a68:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006a6a:	e7ce      	b.n	8006a0a <spindle_set_state+0x9e>
 8006a6c:	20001314 	.word	0x20001314
 8006a70:	40010c00 	.word	0x40010c00
 8006a74:	200014c8 	.word	0x200014c8
 8006a78:	3c23d70a 	.word	0x3c23d70a
 8006a7c:	40012c00 	.word	0x40012c00
 8006a80:	20000d00 	.word	0x20000d00

08006a84 <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 8006a86:	4d40      	ldr	r5, [pc, #256]	; (8006b88 <spindle_sync+0x104>)
 8006a88:	782b      	ldrb	r3, [r5, #0]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d04c      	beq.n	8006b28 <spindle_sync+0xa4>
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460e      	mov	r6, r1
 8006a92:	f7fe fc1b 	bl	80052cc <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 8006a96:	786a      	ldrb	r2, [r5, #1]
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	d145      	bne.n	8006b28 <spindle_sync+0xa4>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8006a9c:	2c00      	cmp	r4, #0
 8006a9e:	d04a      	beq.n	8006b36 <spindle_sync+0xb2>
      if (state == SPINDLE_ENABLE_CW) {
 8006aa0:	2c10      	cmp	r4, #16
 8006aa2:	d042      	beq.n	8006b2a <spindle_sync+0xa6>
      SetSpindleDirectionBit();
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4839      	ldr	r0, [pc, #228]	; (8006b8c <spindle_sync+0x108>)
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	f7fa fc0f 	bl	80012cc <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8006aae:	4b38      	ldr	r3, [pc, #224]	; (8006b90 <spindle_sync+0x10c>)
 8006ab0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006ab4:	0792      	lsls	r2, r2, #30
 8006ab6:	d502      	bpl.n	8006abe <spindle_sync+0x3a>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8006ab8:	2c20      	cmp	r4, #32
 8006aba:	bf08      	it	eq
 8006abc:	2600      	moveq	r6, #0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006abe:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8006ac0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	f7fa f897 	bl	8000bf8 <__aeabi_fcmpge>
 8006aca:	b9f0      	cbnz	r0, 8006b0a <spindle_sync+0x86>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8006acc:	7aa8      	ldrb	r0, [r5, #10]
 8006ace:	f7f9 fe8d 	bl	80007ec <__aeabi_i2f>
 8006ad2:	4930      	ldr	r1, [pc, #192]	; (8006b94 <spindle_sync+0x110>)
 8006ad4:	f7f9 fede 	bl	8000894 <__aeabi_fmul>
 8006ad8:	4631      	mov	r1, r6
 8006ada:	f7f9 fedb 	bl	8000894 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006ade:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8006ae0:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8006ae2:	f7fa f889 	bl	8000bf8 <__aeabi_fcmpge>
 8006ae6:	b980      	cbnz	r0, 8006b0a <spindle_sync+0x86>
		else if (rpm <= settings.rpm_min) {
 8006ae8:	4639      	mov	r1, r7
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7fa f87a 	bl	8000be4 <__aeabi_fcmple>
 8006af0:	b368      	cbz	r0, 8006b4e <spindle_sync+0xca>
			if (rpm == 0.0f) { // S0 disables spindle
 8006af2:	2400      	movs	r4, #0
 8006af4:	4630      	mov	r0, r6
 8006af6:	4621      	mov	r1, r4
 8006af8:	f7fa f860 	bl	8000bbc <__aeabi_fcmpeq>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d03e      	beq.n	8006b7e <spindle_sync+0xfa>
		TIM1->CCR1 = pwm_value;
 8006b00:	2200      	movs	r2, #0
 8006b02:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <spindle_sync+0x114>)
				sys.spindle_speed = 0.0f;
 8006b04:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006b06:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006b08:	e034      	b.n	8006b74 <spindle_sync+0xf0>
		TIM1->CCR1 = pwm_value;
 8006b0a:	2264      	movs	r2, #100	; 0x64
 8006b0c:	4b22      	ldr	r3, [pc, #136]	; (8006b98 <spindle_sync+0x114>)
			sys.spindle_speed = settings.rpm_max;
 8006b0e:	612c      	str	r4, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006b10:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8006b12:	2101      	movs	r1, #1
 8006b14:	4820      	ldr	r0, [pc, #128]	; (8006b98 <spindle_sync+0x114>)
 8006b16:	f7fa fcfd 	bl	8001514 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	481b      	ldr	r0, [pc, #108]	; (8006b8c <spindle_sync+0x108>)
 8006b20:	f7fa fbd4 	bl	80012cc <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8006b24:	2300      	movs	r3, #0
 8006b26:	732b      	strb	r3, [r5, #12]
    spindle_set_state(state,rpm);
  }
 8006b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ResetSpindleDirectionBit();
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	4817      	ldr	r0, [pc, #92]	; (8006b8c <spindle_sync+0x108>)
 8006b2e:	f7fa fbcd 	bl	80012cc <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8006b32:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <spindle_sync+0x10c>)
 8006b34:	e7c3      	b.n	8006abe <spindle_sync+0x3a>
      sys.spindle_speed = 0.0f;
 8006b36:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4817      	ldr	r0, [pc, #92]	; (8006b98 <spindle_sync+0x114>)
      sys.spindle_speed = 0.0f;
 8006b3c:	612b      	str	r3, [r5, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006b3e:	f7fa fce9 	bl	8001514 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8006b42:	4622      	mov	r2, r4
 8006b44:	2102      	movs	r1, #2
 8006b46:	4811      	ldr	r0, [pc, #68]	; (8006b8c <spindle_sync+0x108>)
 8006b48:	f7fa fbc0 	bl	80012cc <GPIO_WriteBit>
}
 8006b4c:	e7ea      	b.n	8006b24 <spindle_sync+0xa0>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006b4e:	4639      	mov	r1, r7
 8006b50:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8006b52:	612e      	str	r6, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006b54:	f7f9 fd94 	bl	8000680 <__aeabi_fsub>
 8006b58:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <spindle_sync+0x118>)
 8006b5a:	6819      	ldr	r1, [r3, #0]
 8006b5c:	f7f9 fe9a 	bl	8000894 <__aeabi_fmul>
 8006b60:	f002 fe52 	bl	8009808 <floorf>
 8006b64:	f7fa f898 	bl	8000c98 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8006b68:	4a0b      	ldr	r2, [pc, #44]	; (8006b98 <spindle_sync+0x114>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8006b6a:	1c43      	adds	r3, r0, #1
 8006b6c:	b29b      	uxth	r3, r3
		TIM1->CCR1 = pwm_value;
 8006b6e:	8693      	strh	r3, [r2, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ce      	bne.n	8006b12 <spindle_sync+0x8e>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8006b74:	2100      	movs	r1, #0
 8006b76:	4808      	ldr	r0, [pc, #32]	; (8006b98 <spindle_sync+0x114>)
 8006b78:	f7fa fccc 	bl	8001514 <TIM_CtrlPWMOutputs>
	}
 8006b7c:	e7cd      	b.n	8006b1a <spindle_sync+0x96>
		TIM1->CCR1 = pwm_value;
 8006b7e:	2201      	movs	r2, #1
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <spindle_sync+0x114>)
				sys.spindle_speed = settings.rpm_min;
 8006b82:	612f      	str	r7, [r5, #16]
		TIM1->CCR1 = pwm_value;
 8006b84:	869a      	strh	r2, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8006b86:	e7c4      	b.n	8006b12 <spindle_sync+0x8e>
 8006b88:	20001314 	.word	0x20001314
 8006b8c:	40010c00 	.word	0x40010c00
 8006b90:	200014c8 	.word	0x200014c8
 8006b94:	3c23d70a 	.word	0x3c23d70a
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	20000d00 	.word	0x20000d00

08006ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006ba4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006ba6:	e003      	b.n	8006bb0 <LoopCopyDataInit>

08006ba8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8006baa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006bac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006bae:	3104      	adds	r1, #4

08006bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006bb0:	480b      	ldr	r0, [pc, #44]	; (8006be0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8006bb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006bb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006bb8:	d3f6      	bcc.n	8006ba8 <CopyDataInit>
	ldr	r2, =_sbss
 8006bba:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8006bbc:	e002      	b.n	8006bc4 <LoopFillZerobss>

08006bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006bbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006bc0:	f842 3b04 	str.w	r3, [r2], #4

08006bc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8006bc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006bc8:	d3f9      	bcc.n	8006bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006bca:	f001 fae9 	bl	80081a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bce:	f002 fd07 	bl	80095e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006bd2:	f7fc fadd 	bl	8003190 <main>
	bx	lr
 8006bd6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006bd8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8006bdc:	0800af10 	.word	0x0800af10
	ldr	r0, =_sdata
 8006be0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006be4:	20000520 	.word	0x20000520
	ldr	r2, =_sbss
 8006be8:	20000520 	.word	0x20000520
	ldr	r3, = _ebss
 8006bec:	200015ac 	.word	0x200015ac

08006bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006bf0:	e7fe      	b.n	8006bf0 <ADC1_2_IRQHandler>
	...

08006bf4 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 8006bf4:	b570      	push	{r4, r5, r6, lr}
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8006bf6:	4d18      	ldr	r5, [pc, #96]	; (8006c58 <st_wake_up+0x64>)
  {
	  SetStepperDisableBit();
 8006bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8006bfc:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
	  SetStepperDisableBit();
 8006c00:	4816      	ldr	r0, [pc, #88]	; (8006c5c <st_wake_up+0x68>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8006c02:	075b      	lsls	r3, r3, #29
 8006c04:	d525      	bpl.n	8006c52 <st_wake_up+0x5e>
	  SetStepperDisableBit();
 8006c06:	f7fa fb5d 	bl	80012c4 <GPIO_SetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8006c0a:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 8006c0c:	f64f 76fe 	movw	r6, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8006c10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8006c14:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <st_wake_up+0x6c>)
 8006c16:	4813      	ldr	r0, [pc, #76]	; (8006c64 <st_wake_up+0x70>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006c1e:	fba0 0202 	umull	r0, r2, r0, r2
 8006c22:	0c92      	lsrs	r2, r2, #18
 8006c24:	fb03 f302 	mul.w	r3, r3, r2
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8006c28:	480f      	ldr	r0, [pc, #60]	; (8006c68 <st_wake_up+0x74>)
  st.step_outbits = step_port_invert_mask;
 8006c2a:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <st_wake_up+0x78>)
 8006c2c:	4d10      	ldr	r5, [pc, #64]	; (8006c70 <st_wake_up+0x7c>)
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8006c2e:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 8006c30:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8006c32:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8006c34:	8284      	strh	r4, [r0, #20]
  TIM3->SR = ~TIM_SR_UIF;
 8006c36:	8206      	strh	r6, [r0, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8006c38:	6a90      	ldr	r0, [r2, #40]	; 0x28
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8006c3a:	81d3      	strh	r3, [r2, #14]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8006c3c:	8843      	ldrh	r3, [r0, #2]
  st.step_outbits = step_port_invert_mask;
 8006c3e:	8215      	strh	r5, [r2, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8006c46:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 8006c48:	880b      	ldrh	r3, [r1, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	4323      	orrs	r3, r4
 8006c4e:	800b      	strh	r3, [r1, #0]
#endif
}
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
	  ResetStepperDisableBit();
 8006c52:	f7fa fb39 	bl	80012c8 <GPIO_ResetBits>
 8006c56:	e7d8      	b.n	8006c0a <st_wake_up+0x16>
 8006c58:	200014c8 	.word	0x200014c8
 8006c5c:	40010800 	.word	0x40010800
 8006c60:	20000004 	.word	0x20000004
 8006c64:	431bde83 	.word	0x431bde83
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	20000d98 	.word	0x20000d98
 8006c70:	20000e7c 	.word	0x20000e7c

08006c74 <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8006c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8006c78:	2100      	movs	r1, #0
{
 8006c7a:	b538      	push	{r3, r4, r5, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8006c7c:	8813      	ldrh	r3, [r2, #0]

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006c7e:	4c18      	ldr	r4, [pc, #96]	; (8006ce0 <st_go_idle+0x6c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8006c80:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006c84:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  busy = false;
 8006c88:	4d16      	ldr	r5, [pc, #88]	; (8006ce4 <st_go_idle+0x70>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006c8e:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8006c90:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 8006c92:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 8006c94:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006c96:	d00e      	beq.n	8006cb6 <st_go_idle+0x42>
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <st_go_idle+0x74>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d112      	bne.n	8006cc6 <st_go_idle+0x52>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8006ca0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006ca4:	075a      	lsls	r2, r3, #29
 8006ca6:	d514      	bpl.n	8006cd2 <st_go_idle+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 8006ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  SetStepperDisableBit();
 8006cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cb0:	480e      	ldr	r0, [pc, #56]	; (8006cec <st_go_idle+0x78>)
 8006cb2:	f7fa bb07 	b.w	80012c4 <GPIO_SetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8006cb6:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <st_go_idle+0x7c>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ec      	bne.n	8006c98 <st_go_idle+0x24>
 8006cbe:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <st_go_idle+0x74>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	d1ec      	bne.n	8006ca0 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 8006cc6:	f7fc fe8b 	bl	80039e0 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8006cca:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006cce:	075b      	lsls	r3, r3, #29
 8006cd0:	d5ea      	bpl.n	8006ca8 <st_go_idle+0x34>
}
 8006cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  ResetStepperDisableBit();
 8006cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cda:	4804      	ldr	r0, [pc, #16]	; (8006cec <st_go_idle+0x78>)
 8006cdc:	f7fa baf4 	b.w	80012c8 <GPIO_ResetBits>
 8006ce0:	200014c8 	.word	0x200014c8
 8006ce4:	20000d04 	.word	0x20000d04
 8006ce8:	20001314 	.word	0x20001314
 8006cec:	40010800 	.word	0x40010800
 8006cf0:	20001344 	.word	0x20001344

08006cf4 <TIM2_IRQHandler>:
#ifdef WIN32
void Timer1Proc()
#endif
{
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8006cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
 8006cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8006cfc:	8a13      	ldrh	r3, [r2, #16]
{
 8006cfe:	b082      	sub	sp, #8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8006d00:	f013 0501 	ands.w	r5, r3, #1
 8006d04:	f000 8088 	beq.w	8006e18 <TIM2_IRQHandler+0x124>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 8006d08:	2300      	movs	r3, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8006d0a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8006d0e:	4e74      	ldr	r6, [pc, #464]	; (8006ee0 <TIM2_IRQHandler+0x1ec>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8006d10:	8211      	strh	r1, [r2, #16]
		TIM2->CNT = 0;
 8006d12:	8493      	strh	r3, [r2, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8006d14:	7833      	ldrb	r3, [r6, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d17e      	bne.n	8006e18 <TIM2_IRQHandler+0x124>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8006d1a:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 8006d1e:	2101      	movs	r1, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8006d20:	4870      	ldr	r0, [pc, #448]	; (8006ee4 <TIM2_IRQHandler+0x1f0>)
 8006d22:	4c71      	ldr	r4, [pc, #452]	; (8006ee8 <TIM2_IRQHandler+0x1f4>)
 8006d24:	68c7      	ldr	r7, [r0, #12]
 8006d26:	8a63      	ldrh	r3, [r4, #18]
 8006d28:	f027 0770 	bic.w	r7, r7, #112	; 0x70
 8006d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d30:	433b      	orrs	r3, r7
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8006d32:	4f6e      	ldr	r7, [pc, #440]	; (8006eec <TIM2_IRQHandler+0x1f8>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8006d34:	60c3      	str	r3, [r0, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8006d36:	f8a7 c010 	strh.w	ip, [r7, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 8006d3a:	68c3      	ldr	r3, [r0, #12]
 8006d3c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8006d40:	f023 0307 	bic.w	r3, r3, #7
 8006d44:	ea43 030c 	orr.w	r3, r3, ip
 8006d48:	60c3      	str	r3, [r0, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 8006d4a:	883b      	ldrh	r3, [r7, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 8006d4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  TIM3->CR1 |= TIM_CR1_CEN;
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	430b      	orrs	r3, r1
 8006d52:	803b      	strh	r3, [r7, #0]
  busy = true;
 8006d54:	7031      	strb	r1, [r6, #0]
  if (st.exec_segment == NULL) {
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d06a      	beq.n	8006e30 <TIM2_IRQHandler+0x13c>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 8006d5a:	4b65      	ldr	r3, [pc, #404]	; (8006ef0 <TIM2_IRQHandler+0x1fc>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	f000 80a8 	beq.w	8006eb4 <TIM2_IRQHandler+0x1c0>

  // Reset step out bits.
  st.step_outbits = 0;
 8006d64:	2200      	movs	r2, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 8006d66:	6a60      	ldr	r0, [r4, #36]	; 0x24
    st.counter_x += st.steps[X_AXIS];
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	6967      	ldr	r7, [r4, #20]
  if (st.counter_x > st.exec_block->step_event_count) {
 8006d6c:	68c1      	ldr	r1, [r0, #12]
    st.counter_x += st.steps[X_AXIS];
 8006d6e:	443b      	add	r3, r7
  if (st.counter_x > st.exec_block->step_event_count) {
 8006d70:	428b      	cmp	r3, r1
    st.counter_x += st.steps[X_AXIS];
 8006d72:	6023      	str	r3, [r4, #0]
  st.step_outbits = 0;
 8006d74:	8222      	strh	r2, [r4, #16]
  if (st.counter_x > st.exec_block->step_event_count) {
 8006d76:	d952      	bls.n	8006e1e <TIM2_IRQHandler+0x12a>
    st.step_outbits |= (1<<X_STEP_BIT);
 8006d78:	2201      	movs	r2, #1
    st.counter_x -= st.exec_block->step_event_count;
 8006d7a:	1a5b      	subs	r3, r3, r1
 8006d7c:	6023      	str	r3, [r4, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8006d7e:	8a03      	ldrh	r3, [r0, #16]
    st.step_outbits |= (1<<X_STEP_BIT);
 8006d80:	8222      	strh	r2, [r4, #16]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8006d82:	2203      	movs	r2, #3
 8006d84:	4f5b      	ldr	r7, [pc, #364]	; (8006ef4 <TIM2_IRQHandler+0x200>)
 8006d86:	f013 0f10 	tst.w	r3, #16
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	bf14      	ite	ne
 8006d8e:	f103 33ff 	addne.w	r3, r3, #4294967295
    else { sys_position[X_AXIS]++; }
 8006d92:	3301      	addeq	r3, #1
 8006d94:	603b      	str	r3, [r7, #0]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 8006d96:	6863      	ldr	r3, [r4, #4]
 8006d98:	69a7      	ldr	r7, [r4, #24]
 8006d9a:	443b      	add	r3, r7
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8006d9c:	4299      	cmp	r1, r3
    st.counter_y += st.steps[Y_AXIS];
 8006d9e:	6063      	str	r3, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 8006da0:	d20a      	bcs.n	8006db8 <TIM2_IRQHandler+0xc4>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8006da2:	8a05      	ldrh	r5, [r0, #16]
    st.counter_y -= st.exec_block->step_event_count;
 8006da4:	1a5b      	subs	r3, r3, r1
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8006da6:	06ad      	lsls	r5, r5, #26
    st.counter_y -= st.exec_block->step_event_count;
 8006da8:	6063      	str	r3, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 8006daa:	8222      	strh	r2, [r4, #16]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8006dac:	d53a      	bpl.n	8006e24 <TIM2_IRQHandler+0x130>
 8006dae:	4615      	mov	r5, r2
 8006db0:	4f50      	ldr	r7, [pc, #320]	; (8006ef4 <TIM2_IRQHandler+0x200>)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	607b      	str	r3, [r7, #4]
    else { sys_position[Y_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 8006db8:	68a2      	ldr	r2, [r4, #8]
 8006dba:	69e3      	ldr	r3, [r4, #28]
 8006dbc:	441a      	add	r2, r3
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 8006dbe:	4291      	cmp	r1, r2
    st.counter_z += st.steps[Z_AXIS];
 8006dc0:	60a2      	str	r2, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 8006dc2:	d20e      	bcs.n	8006de2 <TIM2_IRQHandler+0xee>
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
 8006dc4:	1a52      	subs	r2, r2, r1
 8006dc6:	60a2      	str	r2, [r4, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8006dc8:	4a4a      	ldr	r2, [pc, #296]	; (8006ef4 <TIM2_IRQHandler+0x200>)
 8006dca:	8a00      	ldrh	r0, [r0, #16]
    st.step_outbits |= (1<<Z_STEP_BIT);
 8006dcc:	f045 0304 	orr.w	r3, r5, #4
 8006dd0:	b29d      	uxth	r5, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8006dd2:	6893      	ldr	r3, [r2, #8]
 8006dd4:	0641      	lsls	r1, r0, #25
 8006dd6:	bf4c      	ite	mi
 8006dd8:	f103 33ff 	addmi.w	r3, r3, #4294967295
    else { sys_position[Z_AXIS]++; }
 8006ddc:	3301      	addpl	r3, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 8006dde:	8225      	strh	r5, [r4, #16]
    else { sys_position[Z_AXIS]++; }
 8006de0:	6093      	str	r3, [r2, #8]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8006de2:	4b45      	ldr	r3, [pc, #276]	; (8006ef8 <TIM2_IRQHandler+0x204>)
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	2a04      	cmp	r2, #4
 8006de8:	d102      	bne.n	8006df0 <TIM2_IRQHandler+0xfc>
 8006dea:	88db      	ldrh	r3, [r3, #6]
 8006dec:	401d      	ands	r5, r3
 8006dee:	8225      	strh	r5, [r4, #16]

  st.step_count--; // Decrement step events count
 8006df0:	8c22      	ldrh	r2, [r4, #32]
 8006df2:	3a01      	subs	r2, #1
 8006df4:	b292      	uxth	r2, r2
 8006df6:	8422      	strh	r2, [r4, #32]
  if (st.step_count == 0) {
 8006df8:	b942      	cbnz	r2, 8006e0c <TIM2_IRQHandler+0x118>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8006dfa:	4940      	ldr	r1, [pc, #256]	; (8006efc <TIM2_IRQHandler+0x208>)
    st.exec_segment = NULL;
 8006dfc:	62a2      	str	r2, [r4, #40]	; 0x28
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8006dfe:	780b      	ldrb	r3, [r1, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2db      	uxtb	r3, r3
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 8006e04:	2b0a      	cmp	r3, #10
 8006e06:	bf08      	it	eq
 8006e08:	2300      	moveq	r3, #0
	segment_buffer_tail = segment_tail_next;
 8006e0a:	700b      	strb	r3, [r1, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 8006e0c:	2200      	movs	r2, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8006e0e:	4b3c      	ldr	r3, [pc, #240]	; (8006f00 <TIM2_IRQHandler+0x20c>)
  busy = false;
 8006e10:	7032      	strb	r2, [r6, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	406b      	eors	r3, r5
 8006e16:	8223      	strh	r3, [r4, #16]
}
 8006e18:	b002      	add	sp, #8
 8006e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1e:	4615      	mov	r5, r2
 8006e20:	2202      	movs	r2, #2
 8006e22:	e7b8      	b.n	8006d96 <TIM2_IRQHandler+0xa2>
    else { sys_position[Y_AXIS]++; }
 8006e24:	4615      	mov	r5, r2
 8006e26:	4a33      	ldr	r2, [pc, #204]	; (8006ef4 <TIM2_IRQHandler+0x200>)
 8006e28:	6853      	ldr	r3, [r2, #4]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	6053      	str	r3, [r2, #4]
 8006e2e:	e7c3      	b.n	8006db8 <TIM2_IRQHandler+0xc4>
    if (segment_buffer_head != segment_buffer_tail) {
 8006e30:	4b32      	ldr	r3, [pc, #200]	; (8006efc <TIM2_IRQHandler+0x208>)
 8006e32:	4f34      	ldr	r7, [pc, #208]	; (8006f04 <TIM2_IRQHandler+0x210>)
 8006e34:	7819      	ldrb	r1, [r3, #0]
 8006e36:	783f      	ldrb	r7, [r7, #0]
 8006e38:	428f      	cmp	r7, r1
 8006e3a:	d040      	beq.n	8006ebe <TIM2_IRQHandler+0x1ca>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	4932      	ldr	r1, [pc, #200]	; (8006f08 <TIM2_IRQHandler+0x214>)
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8006e40:	f894 c022 	ldrb.w	ip, [r4, #34]	; 0x22
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8006e44:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8006e48:	8878      	ldrh	r0, [r7, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8006e4a:	62a7      	str	r7, [r4, #40]	; 0x28
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8006e4c:	3801      	subs	r0, #1
 8006e4e:	b280      	uxth	r0, r0
 8006e50:	8590      	strh	r0, [r2, #44]	; 0x2c
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8006e52:	7938      	ldrb	r0, [r7, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8006e54:	f831 7033 	ldrh.w	r7, [r1, r3, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8006e58:	4584      	cmp	ip, r0
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8006e5a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8006e5e:	8427      	strh	r7, [r4, #32]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8006e60:	d02b      	beq.n	8006eba <TIM2_IRQHandler+0x1c6>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8006e62:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <TIM2_IRQHandler+0x218>)
 8006e64:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 8006e68:	eb03 0387 	add.w	r3, r3, r7, lsl #2
        st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 8006e6c:	68df      	ldr	r7, [r3, #12]
        st.exec_block_index = st.exec_segment->st_block_index;
 8006e6e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
        st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 8006e72:	087f      	lsrs	r7, r7, #1
 8006e74:	e9c4 7701 	strd	r7, r7, [r4, #4]
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8006e78:	6263      	str	r3, [r4, #36]	; 0x24
        st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 8006e7a:	6027      	str	r7, [r4, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8006e7c:	4824      	ldr	r0, [pc, #144]	; (8006f10 <TIM2_IRQHandler+0x21c>)
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8006e7e:	4411      	add	r1, r2
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8006e80:	8a1f      	ldrh	r7, [r3, #16]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8006e82:	f891 e005 	ldrb.w	lr, [r1, #5]
 8006e86:	f8d3 c000 	ldr.w	ip, [r3]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8006e8a:	f8b0 8000 	ldrh.w	r8, [r0]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 8006e8e:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8006e92:	88c8      	ldrh	r0, [r1, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8006e94:	fa2c fc0e 	lsr.w	ip, ip, lr
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8006e98:	ea87 0108 	eor.w	r1, r7, r8
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 8006e9c:	fa22 f20e 	lsr.w	r2, r2, lr
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 8006ea0:	fa23 f30e 	lsr.w	r3, r3, lr
 8006ea4:	e9c4 2306 	strd	r2, r3, [r4, #24]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 8006ea8:	f8c4 c014 	str.w	ip, [r4, #20]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8006eac:	8261      	strh	r1, [r4, #18]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8006eae:	f7ff fd0d 	bl	80068cc <spindle_set_speed>
 8006eb2:	e752      	b.n	8006d5a <TIM2_IRQHandler+0x66>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 8006eb4:	f7fd fe04 	bl	8004ac0 <probe_state_monitor>
 8006eb8:	e754      	b.n	8006d64 <TIM2_IRQHandler+0x70>
 8006eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ebc:	e7de      	b.n	8006e7c <TIM2_IRQHandler+0x188>
      st_go_idle();
 8006ebe:	9001      	str	r0, [sp, #4]
 8006ec0:	f7ff fed8 	bl	8006c74 <st_go_idle>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8006ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec6:	9801      	ldr	r0, [sp, #4]
 8006ec8:	7c9b      	ldrb	r3, [r3, #18]
 8006eca:	b92b      	cbnz	r3, 8006ed8 <TIM2_IRQHandler+0x1e4>
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8006ecc:	2004      	movs	r0, #4
}
 8006ece:	b002      	add	sp, #8
 8006ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8006ed4:	f001 b91c 	b.w	8008110 <system_set_exec_state_flag>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8006ed8:	f7ff fcf8 	bl	80068cc <spindle_set_speed>
 8006edc:	e7f6      	b.n	8006ecc <TIM2_IRQHandler+0x1d8>
 8006ede:	bf00      	nop
 8006ee0:	20000d04 	.word	0x20000d04
 8006ee4:	40010800 	.word	0x40010800
 8006ee8:	20000d98 	.word	0x20000d98
 8006eec:	40000400 	.word	0x40000400
 8006ef0:	2000132a 	.word	0x2000132a
 8006ef4:	20001338 	.word	0x20001338
 8006ef8:	20001314 	.word	0x20001314
 8006efc:	20000d95 	.word	0x20000d95
 8006f00:	20000e7c 	.word	0x20000e7c
 8006f04:	20000d94 	.word	0x20000d94
 8006f08:	20000d44 	.word	0x20000d44
 8006f0c:	20000dc4 	.word	0x20000dc4
 8006f10:	20000d06 	.word	0x20000d06

08006f14 <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 8006f14:	b410      	push	{r4}
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
		TIM3->CNT = 0;
 8006f16:	2000      	movs	r0, #0
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8006f18:	f64f 74fc 	movw	r4, #65532	; 0xfffc
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8006f1c:	490a      	ldr	r1, [pc, #40]	; (8006f48 <TIM3_IRQHandler+0x34>)
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <TIM3_IRQHandler+0x38>)
 8006f20:	68ca      	ldr	r2, [r1, #12]
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	f022 0207 	bic.w	r2, r2, #7
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8006f2e:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <TIM3_IRQHandler+0x3c>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8006f30:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8006f32:	8813      	ldrh	r3, [r2, #0]
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	041b      	lsls	r3, r3, #16
 8006f3a:	0c1b      	lsrs	r3, r3, #16
 8006f3c:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8006f3e:	8214      	strh	r4, [r2, #16]
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 8006f40:	bc10      	pop	{r4}
		TIM3->CNT = 0;
 8006f42:	8490      	strh	r0, [r2, #36]	; 0x24
}
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40010800 	.word	0x40010800
 8006f4c:	20000e7c 	.word	0x20000e7c
 8006f50:	40000400 	.word	0x40000400

08006f54 <st_generate_step_dir_invert_masks>:
{
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006f54:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <st_generate_step_dir_invert_masks+0x48>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006f56:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006f58:	8e58      	ldrh	r0, [r3, #50]	; 0x32
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006f5a:	f012 0301 	ands.w	r3, r2, #1
 8006f5e:	bf18      	it	ne
 8006f60:	2310      	movne	r3, #16
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006f62:	f000 0101 	and.w	r1, r0, #1
 8006f66:	f010 0f02 	tst.w	r0, #2
 8006f6a:	bf18      	it	ne
 8006f6c:	f041 0102 	orrne.w	r1, r1, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006f70:	f012 0f02 	tst.w	r2, #2
 8006f74:	bf1c      	itt	ne
 8006f76:	f043 0320 	orrne.w	r3, r3, #32
 8006f7a:	b29b      	uxthne	r3, r3
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006f7c:	0740      	lsls	r0, r0, #29
 8006f7e:	bf48      	it	mi
 8006f80:	f041 0104 	orrmi.w	r1, r1, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006f84:	0752      	lsls	r2, r2, #29
 8006f86:	bf48      	it	mi
 8006f88:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8006f8c:	4804      	ldr	r0, [pc, #16]	; (8006fa0 <st_generate_step_dir_invert_masks+0x4c>)
 8006f8e:	4a05      	ldr	r2, [pc, #20]	; (8006fa4 <st_generate_step_dir_invert_masks+0x50>)
 8006f90:	bf48      	it	mi
 8006f92:	b29b      	uxthmi	r3, r3
  for (idx=0; idx<N_AXIS; idx++) {
 8006f94:	8001      	strh	r1, [r0, #0]
 8006f96:	8013      	strh	r3, [r2, #0]
  }
}
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	200014c8 	.word	0x200014c8
 8006fa0:	20000e7c 	.word	0x20000e7c
 8006fa4:	20000d06 	.word	0x20000d06

08006fa8 <st_reset>:


// Reset and clear stepper subsystem variables
void st_reset()
{
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(&st, 0, sizeof(stepper_t));
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 8006faa:	2601      	movs	r6, #1
  memset(&st, 0, sizeof(stepper_t));
 8006fac:	4d29      	ldr	r5, [pc, #164]	; (8007054 <st_reset+0xac>)
  st_go_idle();
 8006fae:	f7ff fe61 	bl	8006c74 <st_go_idle>
  memset(&prep, 0, sizeof(st_prep_t));
 8006fb2:	2238      	movs	r2, #56	; 0x38
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4828      	ldr	r0, [pc, #160]	; (8007058 <st_reset+0xb0>)
 8006fb8:	f002 fb44 	bl	8009644 <memset>
  memset(&st, 0, sizeof(stepper_t));
 8006fbc:	2228      	movs	r2, #40	; 0x28
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f002 fb3f 	bl	8009644 <memset>
  st.exec_segment = NULL;
 8006fc6:	2100      	movs	r1, #0
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006fc8:	4a24      	ldr	r2, [pc, #144]	; (800705c <st_reset+0xb4>)
  segment_buffer_tail = 0;
 8006fca:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 800707c <st_reset+0xd4>
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006fce:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006fd0:	8e50      	ldrh	r0, [r2, #50]	; 0x32
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8006fd2:	ea13 0206 	ands.w	r2, r3, r6
 8006fd6:	bf18      	it	ne
 8006fd8:	2210      	movne	r2, #16
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8006fda:	4f21      	ldr	r7, [pc, #132]	; (8007060 <st_reset+0xb8>)
  segment_buffer_tail = 0;
 8006fdc:	f88c 1000 	strb.w	r1, [ip]
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8006fe0:	6039      	str	r1, [r7, #0]
  segment_buffer_head = 0; // empty = tail
 8006fe2:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8007080 <st_reset+0xd8>
  busy = false;
 8006fe6:	4f1f      	ldr	r7, [pc, #124]	; (8007064 <st_reset+0xbc>)
  st.exec_segment = NULL;
 8006fe8:	62a9      	str	r1, [r5, #40]	; 0x28
  busy = false;
 8006fea:	7039      	strb	r1, [r7, #0]
  segment_buffer_head = 0; // empty = tail
 8006fec:	f88c 1000 	strb.w	r1, [ip]
  segment_next_head = 1;
 8006ff0:	491d      	ldr	r1, [pc, #116]	; (8007068 <st_reset+0xc0>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006ff2:	ea00 0406 	and.w	r4, r0, r6
 8006ff6:	0787      	lsls	r7, r0, #30
  segment_next_head = 1;
 8006ff8:	700e      	strb	r6, [r1, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8006ffa:	bf48      	it	mi
 8006ffc:	f044 0402 	orrmi.w	r4, r4, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8007000:	079e      	lsls	r6, r3, #30
 8007002:	bf44      	itt	mi
 8007004:	f042 0220 	orrmi.w	r2, r2, #32
 8007008:	b292      	uxthmi	r2, r2
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800700a:	0740      	lsls	r0, r0, #29
 800700c:	bf48      	it	mi
 800700e:	f044 0404 	orrmi.w	r4, r4, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8007012:	0759      	lsls	r1, r3, #29
 8007014:	bf48      	it	mi
 8007016:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 800701a:	4814      	ldr	r0, [pc, #80]	; (800706c <st_reset+0xc4>)
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <st_reset+0xc8>)
 800701e:	bf48      	it	mi
 8007020:	b292      	uxthmi	r2, r2
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8007022:	4914      	ldr	r1, [pc, #80]	; (8007074 <st_reset+0xcc>)
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8007024:	826a      	strh	r2, [r5, #18]
 8007026:	8004      	strh	r4, [r0, #0]
 8007028:	801a      	strh	r2, [r3, #0]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 800702a:	880b      	ldrh	r3, [r1, #0]
 800702c:	07db      	lsls	r3, r3, #31
 800702e:	d4fc      	bmi.n	800702a <st_reset+0x82>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8007030:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007034:	4810      	ldr	r0, [pc, #64]	; (8007078 <st_reset+0xd0>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8007036:	820b      	strh	r3, [r1, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8007038:	68c3      	ldr	r3, [r0, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 800703a:	f002 0270 	and.w	r2, r2, #112	; 0x70
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800703e:	f023 0307 	bic.w	r3, r3, #7
 8007042:	4323      	orrs	r3, r4
 8007044:	60c3      	str	r3, [r0, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 8007046:	68c3      	ldr	r3, [r0, #12]
 8007048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704c:	431a      	orrs	r2, r3
 800704e:	60c2      	str	r2, [r0, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8007050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007052:	bf00      	nop
 8007054:	20000d98 	.word	0x20000d98
 8007058:	20000d0c 	.word	0x20000d0c
 800705c:	200014c8 	.word	0x200014c8
 8007060:	20000d08 	.word	0x20000d08
 8007064:	20000d04 	.word	0x20000d04
 8007068:	20000d96 	.word	0x20000d96
 800706c:	20000e7c 	.word	0x20000e7c
 8007070:	20000d06 	.word	0x20000d06
 8007074:	40000400 	.word	0x40000400
 8007078:	40010800 	.word	0x40010800
 800707c:	20000d95 	.word	0x20000d95
 8007080:	20000d94 	.word	0x20000d94

08007084 <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 8007084:	b570      	push	{r4, r5, r6, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8007086:	2101      	movs	r1, #1
{
 8007088:	b086      	sub	sp, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 800708a:	4c49      	ldr	r4, [pc, #292]	; (80071b0 <stepper_init+0x12c>)
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 800708c:	2004      	movs	r0, #4
 800708e:	f7fa f977 	bl	8001380 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8007092:	4b48      	ldr	r3, [pc, #288]	; (80071b4 <stepper_init+0x130>)
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8007094:	4620      	mov	r0, r4
 8007096:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8007098:	9301      	str	r3, [sp, #4]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 800709a:	f7f9 ff85 	bl	8000fa8 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 800709e:	2101      	movs	r1, #1
 80070a0:	2004      	movs	r0, #4
 80070a2:	f7fa f96d 	bl	8001380 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80070a6:	2307      	movs	r3, #7
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80070a8:	4620      	mov	r0, r4
 80070aa:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80070ac:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80070b0:	f7f9 ff7a 	bl	8000fa8 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 80070b4:	2101      	movs	r1, #1
 80070b6:	2004      	movs	r0, #4
 80070b8:	f7fa f962 	bl	8001380 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80070bc:	2370      	movs	r3, #112	; 0x70
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 80070be:	2500      	movs	r5, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80070c0:	4e3d      	ldr	r6, [pc, #244]	; (80071b8 <stepper_init+0x134>)
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80070c2:	4620      	mov	r0, r4
 80070c4:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80070c6:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80070ca:	f7f9 ff6d 	bl	8000fa8 <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80070ce:	69f3      	ldr	r3, [r6, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80070d0:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80070d2:	f043 0301 	orr.w	r3, r3, #1
 80070d6:	61f3      	str	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80070d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 80070dc:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80070e0:	f7fa f966 	bl	80013b0 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 80070e4:	2101      	movs	r1, #1
 80070e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80070ea:	f7fa fa35 	bl	8001558 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 80070ee:	2201      	movs	r2, #1
 80070f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80070f4:	4611      	mov	r1, r2
 80070f6:	f7fa fa1d 	bl	8001534 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 80070fa:	2101      	movs	r1, #1
 80070fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007100:	f7fa f9fa 	bl	80014f8 <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8007104:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007108:	f7f9 fde6 	bl	8000cd8 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 800710c:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <stepper_init+0x138>)
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800710e:	a802      	add	r0, sp, #8
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8007110:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 8007112:	f7f9 fdeb 	bl	8000cec <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8007116:	69f3      	ldr	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007118:	f5a4 3482 	sub.w	r4, r4, #66560	; 0x10400
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 800711c:	f043 0302 	orr.w	r3, r3, #2
 8007120:	61f3      	str	r3, [r6, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8007122:	4620      	mov	r0, r4
 8007124:	a903      	add	r1, sp, #12
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8007126:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 800712a:	f7fa f941 	bl	80013b0 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 800712e:	4620      	mov	r0, r4
 8007130:	2101      	movs	r1, #1
 8007132:	f7fa fa11 	bl	8001558 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8007136:	2201      	movs	r2, #1
 8007138:	4620      	mov	r0, r4
 800713a:	4611      	mov	r1, r2
 800713c:	f7fa f9fa 	bl	8001534 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8007140:	2101      	movs	r1, #1
 8007142:	4620      	mov	r0, r4
 8007144:	f7fa f9d8 	bl	80014f8 <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8007148:	f44f 7040 	mov.w	r0, #768	; 0x300
 800714c:	f7f9 fdc4 	bl	8000cd8 <NVIC_PriorityGroupConfig>
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 8007150:	4b1b      	ldr	r3, [pc, #108]	; (80071c0 <stepper_init+0x13c>)
	NVIC_Init(&NVIC_InitStructure);
 8007152:	a802      	add	r0, sp, #8
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 8007154:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 8007156:	f7f9 fdc9 	bl	8000cec <NVIC_Init>
	TIM2->CR1 &= ~TIM_CR1_CEN;
 800715a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800715e:	2610      	movs	r6, #16
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8007160:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8007164:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8007168:	8813      	ldrh	r3, [r2, #0]
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	40b3      	lsls	r3, r6
 8007170:	40f3      	lsrs	r3, r6
 8007172:	8013      	strh	r3, [r2, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8007174:	8a13      	ldrh	r3, [r2, #16]
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	40b3      	lsls	r3, r6
 800717c:	40f3      	lsrs	r3, r6
 800717e:	8213      	strh	r3, [r2, #16]
	TIM2->CNT = 0;
 8007180:	8495      	strh	r5, [r2, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8007182:	8823      	ldrh	r3, [r4, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8007184:	4a0f      	ldr	r2, [pc, #60]	; (80071c4 <stepper_init+0x140>)
 8007186:	f023 0301 	bic.w	r3, r3, #1
 800718a:	40b3      	lsls	r3, r6
 800718c:	40f3      	lsrs	r3, r6
 800718e:	8023      	strh	r3, [r4, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8007190:	8a23      	ldrh	r3, [r4, #16]
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	40b3      	lsls	r3, r6
 8007198:	40f3      	lsrs	r3, r6
 800719a:	8223      	strh	r3, [r4, #16]
	TIM3->CNT = 0;
 800719c:	84a5      	strh	r5, [r4, #36]	; 0x24
 800719e:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 80071a2:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80071a6:	6010      	str	r0, [r2, #0]
 80071a8:	6011      	str	r1, [r2, #0]
}
 80071aa:	b006      	add	sp, #24
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
 80071ae:	bf00      	nop
 80071b0:	40010800 	.word	0x40010800
 80071b4:	10038000 	.word	0x10038000
 80071b8:	40021000 	.word	0x40021000
 80071bc:	0101011c 	.word	0x0101011c
 80071c0:	0101011d 	.word	0x0101011d
 80071c4:	e000e100 	.word	0xe000e100

080071c8 <st_update_plan_block_parameters>:
{
 80071c8:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 80071ca:	4c08      	ldr	r4, [pc, #32]	; (80071ec <st_update_plan_block_parameters+0x24>)
 80071cc:	6825      	ldr	r5, [r4, #0]
 80071ce:	b15d      	cbz	r5, 80071e8 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <st_update_plan_block_parameters+0x28>)
 80071d2:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 80071d4:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 80071dc:	4608      	mov	r0, r1
 80071de:	f7f9 fb59 	bl	8000894 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 80071e2:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 80071e4:	6168      	str	r0, [r5, #20]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 80071e6:	6023      	str	r3, [r4, #0]
}
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	bf00      	nop
 80071ec:	20000d08 	.word	0x20000d08
 80071f0:	20000d0c 	.word	0x20000d0c

080071f4 <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 80071f4:	4b2f      	ldr	r3, [pc, #188]	; (80072b4 <st_prep_buffer+0xc0>)
 80071f6:	791b      	ldrb	r3, [r3, #4]
 80071f8:	07da      	lsls	r2, r3, #31
 80071fa:	f100 8478 	bmi.w	8007aee <st_prep_buffer+0x8fa>
{
 80071fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007202:	b08f      	sub	sp, #60	; 0x3c
 8007204:	4b2c      	ldr	r3, [pc, #176]	; (80072b8 <st_prep_buffer+0xc4>)
 8007206:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8007208:	4b2c      	ldr	r3, [pc, #176]	; (80072bc <st_prep_buffer+0xc8>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	42bb      	cmp	r3, r7
 800720e:	f000 824e 	beq.w	80076ae <st_prep_buffer+0x4ba>
    if (pl_block == NULL) {
 8007212:	4b2b      	ldr	r3, [pc, #172]	; (80072c0 <st_prep_buffer+0xcc>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 824b 	beq.w	80076b4 <st_prep_buffer+0x4c0>
 800721e:	4c29      	ldr	r4, [pc, #164]	; (80072c4 <st_prep_buffer+0xd0>)
 8007220:	f8d3 a020 	ldr.w	sl, [r3, #32]
 8007224:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007226:	4650      	mov	r0, sl
 8007228:	4619      	mov	r1, r3
 800722a:	9303      	str	r3, [sp, #12]
 800722c:	9402      	str	r4, [sp, #8]
 800722e:	f7f9 fa27 	bl	8000680 <__aeabi_fsub>
 8007232:	4607      	mov	r7, r0
 8007234:	6a22      	ldr	r2, [r4, #32]
 8007236:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <st_prep_buffer+0xd4>)
 8007238:	9201      	str	r2, [sp, #4]
 800723a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800723c:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8007240:	9205      	str	r2, [sp, #20]
 8007242:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007244:	7d25      	ldrb	r5, [r4, #20]
 8007246:	9208      	str	r2, [sp, #32]
 8007248:	930d      	str	r3, [sp, #52]	; 0x34
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800724a:	4b20      	ldr	r3, [pc, #128]	; (80072cc <st_prep_buffer+0xd8>)
    prep_segment->st_block_index = prep.st_block_index;
 800724c:	9902      	ldr	r1, [sp, #8]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800724e:	781c      	ldrb	r4, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 8007250:	481f      	ldr	r0, [pc, #124]	; (80072d0 <st_prep_buffer+0xdc>)
 8007252:	780a      	ldrb	r2, [r1, #0]
 8007254:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
 8007258:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 800725a:	6909      	ldr	r1, [r1, #16]
 800725c:	4650      	mov	r0, sl
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800725e:	940b      	str	r4, [sp, #44]	; 0x2c
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8007260:	f7f9 fa0e 	bl	8000680 <__aeabi_fsub>
 8007264:	2100      	movs	r1, #0
 8007266:	9004      	str	r0, [sp, #16]
    if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 8007268:	f7f9 fcc6 	bl	8000bf8 <__aeabi_fcmpge>
    prep_segment->st_block_index = prep.st_block_index;
 800726c:	00e3      	lsls	r3, r4, #3
 800726e:	9307      	str	r3, [sp, #28]
 8007270:	b908      	cbnz	r0, 8007276 <st_prep_buffer+0x82>
 8007272:	2300      	movs	r3, #0
 8007274:	9304      	str	r3, [sp, #16]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007276:	4639      	mov	r1, r7
 8007278:	4638      	mov	r0, r7
 800727a:	f7f9 fa03 	bl	8000684 <__addsf3>
 800727e:	4603      	mov	r3, r0
 8007280:	9901      	ldr	r1, [sp, #4]
 8007282:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007286:	9306      	str	r3, [sp, #24]
 8007288:	f7f9 fbb8 	bl	80009fc <__aeabi_fdiv>
 800728c:	4603      	mov	r3, r0
 800728e:	9903      	ldr	r1, [sp, #12]
 8007290:	9805      	ldr	r0, [sp, #20]
 8007292:	9309      	str	r3, [sp, #36]	; 0x24
 8007294:	f7f9 fc92 	bl	8000bbc <__aeabi_fcmpeq>
 8007298:	9b02      	ldr	r3, [sp, #8]
 800729a:	69df      	ldr	r7, [r3, #28]
 800729c:	2800      	cmp	r0, #0
 800729e:	f000 81bd 	beq.w	800761c <st_prep_buffer+0x428>
 80072a2:	f04f 0202 	mov.w	r2, #2
 80072a6:	f8df b02c 	ldr.w	fp, [pc, #44]	; 80072d4 <st_prep_buffer+0xe0>
 80072aa:	b2d3      	uxtb	r3, r2
 80072ac:	2400      	movs	r4, #0
 80072ae:	465e      	mov	r6, fp
 80072b0:	930a      	str	r3, [sp, #40]	; 0x28
 80072b2:	e01c      	b.n	80072ee <st_prep_buffer+0xfa>
 80072b4:	20001314 	.word	0x20001314
 80072b8:	20000d96 	.word	0x20000d96
 80072bc:	20000d95 	.word	0x20000d95
 80072c0:	20000d08 	.word	0x20000d08
 80072c4:	20000d0c 	.word	0x20000d0c
 80072c8:	20000e78 	.word	0x20000e78
 80072cc:	20000d94 	.word	0x20000d94
 80072d0:	20000d44 	.word	0x20000d44
 80072d4:	392ec33e 	.word	0x392ec33e
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80072d8:	4621      	mov	r1, r4
 80072da:	4630      	mov	r0, r6
 80072dc:	f7f9 f9d0 	bl	8000680 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80072e0:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80072e2:	4683      	mov	fp, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80072e4:	4650      	mov	r0, sl
 80072e6:	f7f9 fc91 	bl	8000c0c <__aeabi_fcmpgt>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d050      	beq.n	8007390 <st_prep_buffer+0x19c>
      switch (prep.ramp_type) {
 80072ee:	2d01      	cmp	r5, #1
 80072f0:	f000 8131 	beq.w	8007556 <st_prep_buffer+0x362>
 80072f4:	2d03      	cmp	r5, #3
 80072f6:	f000 8111 	beq.w	800751c <st_prep_buffer+0x328>
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	f000 80e6 	beq.w	80074cc <st_prep_buffer+0x2d8>
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	4658      	mov	r0, fp
 8007304:	69d9      	ldr	r1, [r3, #28]
 8007306:	f7f9 fac5 	bl	8000894 <__aeabi_fmul>
 800730a:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 800730c:	4638      	mov	r0, r7
 800730e:	4649      	mov	r1, r9
 8007310:	f7f9 fc7c 	bl	8000c0c <__aeabi_fcmpgt>
 8007314:	2800      	cmp	r0, #0
 8007316:	f000 8137 	beq.w	8007588 <st_prep_buffer+0x394>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 800731a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800731e:	4648      	mov	r0, r9
 8007320:	f7f9 fab8 	bl	8000894 <__aeabi_fmul>
 8007324:	4639      	mov	r1, r7
 8007326:	f7f9 f9ab 	bl	8000680 <__aeabi_fsub>
 800732a:	4659      	mov	r1, fp
 800732c:	f7f9 fab2 	bl	8000894 <__aeabi_fmul>
 8007330:	4651      	mov	r1, sl
 8007332:	f7f9 f9a7 	bl	8000684 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8007336:	4641      	mov	r1, r8
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8007338:	900c      	str	r0, [sp, #48]	; 0x30
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 800733a:	f7f9 fc67 	bl	8000c0c <__aeabi_fcmpgt>
 800733e:	2800      	cmp	r0, #0
 8007340:	f000 8122 	beq.w	8007588 <st_prep_buffer+0x394>
              prep.current_speed -= speed_var;
 8007344:	4638      	mov	r0, r7
 8007346:	4649      	mov	r1, r9
 8007348:	f7f9 f99a 	bl	8000680 <__aeabi_fsub>
 800734c:	4607      	mov	r7, r0
              mm_remaining = mm_var;
 800734e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
      dt += time_var; // Add computed ramp time to total segment time.
 8007352:	4659      	mov	r1, fp
 8007354:	4620      	mov	r0, r4
 8007356:	f7f9 f995 	bl	8000684 <__addsf3>
 800735a:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800735c:	4630      	mov	r0, r6
 800735e:	4621      	mov	r1, r4
 8007360:	f7f9 fc54 	bl	8000c0c <__aeabi_fcmpgt>
 8007364:	2800      	cmp	r0, #0
 8007366:	d1b7      	bne.n	80072d8 <st_prep_buffer+0xe4>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8007368:	4651      	mov	r1, sl
 800736a:	9804      	ldr	r0, [sp, #16]
 800736c:	f7f9 fc30 	bl	8000bd0 <__aeabi_fcmplt>
 8007370:	b170      	cbz	r0, 8007390 <st_prep_buffer+0x19c>
          dt_max += DT_SEGMENT;
 8007372:	4630      	mov	r0, r6
 8007374:	49ab      	ldr	r1, [pc, #684]	; (8007624 <st_prep_buffer+0x430>)
 8007376:	f7f9 f985 	bl	8000684 <__addsf3>
          time_var = dt_max - dt;
 800737a:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 800737c:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 800737e:	f7f9 f97f 	bl	8000680 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007382:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8007384:	4683      	mov	fp, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8007386:	4650      	mov	r0, sl
 8007388:	f7f9 fc40 	bl	8000c0c <__aeabi_fcmpgt>
 800738c:	2800      	cmp	r0, #0
 800738e:	d1ae      	bne.n	80072ee <st_prep_buffer+0xfa>
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8007390:	9b02      	ldr	r3, [sp, #8]
 8007392:	751d      	strb	r5, [r3, #20]
 8007394:	61df      	str	r7, [r3, #28]
 8007396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	7c9b      	ldrb	r3, [r3, #18]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f040 8127 	bne.w	80075f0 <st_prep_buffer+0x3fc>
 80073a2:	4ba1      	ldr	r3, [pc, #644]	; (8007628 <st_prep_buffer+0x434>)
 80073a4:	f893 9004 	ldrb.w	r9, [r3, #4]
 80073a8:	f019 0f08 	tst.w	r9, #8
 80073ac:	f040 81d5 	bne.w	800775a <st_prep_buffer+0x566>
 80073b0:	9b02      	ldr	r3, [sp, #8]
 80073b2:	8e98      	ldrh	r0, [r3, #52]	; 0x34
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80073b4:	9a07      	ldr	r2, [sp, #28]
 80073b6:	4b9d      	ldr	r3, [pc, #628]	; (800762c <st_prep_buffer+0x438>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 80073b8:	9f02      	ldr	r7, [sp, #8]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80073ba:	4413      	add	r3, r2
 80073bc:	80d8      	strh	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	4650      	mov	r0, sl
 80073c2:	f7f9 fa67 	bl	8000894 <__aeabi_fmul>
 80073c6:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 80073c8:	f002 f9aa 	bl	8009720 <ceilf>
 80073cc:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 80073ce:	68b8      	ldr	r0, [r7, #8]
 80073d0:	f002 f9a6 	bl	8009720 <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 80073d4:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 80073d6:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 80073d8:	f7f9 f952 	bl	8000680 <__aeabi_fsub>
 80073dc:	f7f9 fc5c 	bl	8000c98 <__aeabi_f2uiz>
 80073e0:	4b92      	ldr	r3, [pc, #584]	; (800762c <st_prep_buffer+0x438>)
 80073e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073e4:	fa1f f880 	uxth.w	r8, r0
 80073e8:	f823 8032 	strh.w	r8, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0) {
 80073ec:	f1b8 0f00 	cmp.w	r8, #0
 80073f0:	d103      	bne.n	80073fa <st_prep_buffer+0x206>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 80073f2:	f019 0f02 	tst.w	r9, #2
 80073f6:	f040 83ae 	bne.w	8007b56 <st_prep_buffer+0x962>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 80073fa:	9b02      	ldr	r3, [sp, #8]
 80073fc:	4620      	mov	r0, r4
 80073fe:	6859      	ldr	r1, [r3, #4]
 8007400:	f7f9 f940 	bl	8000684 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8007404:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8007406:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8007408:	4638      	mov	r0, r7
 800740a:	f7f9 f939 	bl	8000680 <__aeabi_fsub>
 800740e:	4601      	mov	r1, r0
 8007410:	4620      	mov	r0, r4
 8007412:	f7f9 faf3 	bl	80009fc <__aeabi_fdiv>
 8007416:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8007418:	4a85      	ldr	r2, [pc, #532]	; (8007630 <st_prep_buffer+0x43c>)
 800741a:	4b86      	ldr	r3, [pc, #536]	; (8007634 <st_prep_buffer+0x440>)
 800741c:	6817      	ldr	r7, [r2, #0]
 800741e:	4886      	ldr	r0, [pc, #536]	; (8007638 <st_prep_buffer+0x444>)
 8007420:	fba3 2307 	umull	r2, r3, r3, r7
 8007424:	0c9b      	lsrs	r3, r3, #18
 8007426:	fb00 f003 	mul.w	r0, r0, r3
 800742a:	f7f9 f9db 	bl	80007e4 <__aeabi_ui2f>
 800742e:	4983      	ldr	r1, [pc, #524]	; (800763c <st_prep_buffer+0x448>)
 8007430:	f7f9 fa30 	bl	8000894 <__aeabi_fmul>
 8007434:	4621      	mov	r1, r4
 8007436:	f7f9 fa2d 	bl	8000894 <__aeabi_fmul>
 800743a:	f002 f971 	bl	8009720 <ceilf>
 800743e:	f7f9 fc2b 	bl	8000c98 <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8007442:	4b7f      	ldr	r3, [pc, #508]	; (8007640 <st_prep_buffer+0x44c>)
 8007444:	fba3 3707 	umull	r3, r7, r3, r7
 8007448:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 800744c:	f080 8100 	bcs.w	8007650 <st_prep_buffer+0x45c>
 8007450:	2200      	movs	r2, #0
 8007452:	4b76      	ldr	r3, [pc, #472]	; (800762c <st_prep_buffer+0x438>)
 8007454:	9907      	ldr	r1, [sp, #28]
 8007456:	440b      	add	r3, r1
 8007458:	715a      	strb	r2, [r3, #5]
      if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 800745a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800745e:	4298      	cmp	r0, r3
 8007460:	bf28      	it	cs
 8007462:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8007464:	4977      	ldr	r1, [pc, #476]	; (8007644 <st_prep_buffer+0x450>)
 8007466:	4f71      	ldr	r7, [pc, #452]	; (800762c <st_prep_buffer+0x438>)
 8007468:	780b      	ldrb	r3, [r1, #0]
 800746a:	9a07      	ldr	r2, [sp, #28]
 800746c:	443a      	add	r2, r7
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800746e:	1c5f      	adds	r7, r3, #1
 8007470:	b2ff      	uxtb	r7, r7
 8007472:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8007474:	4a74      	ldr	r2, [pc, #464]	; (8007648 <st_prep_buffer+0x454>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007476:	2f0a      	cmp	r7, #10
    segment_buffer_head = segment_next_head;
 8007478:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800747a:	f000 80fa 	beq.w	8007672 <st_prep_buffer+0x47e>
    pl_block->millimeters = mm_remaining;
 800747e:	4b73      	ldr	r3, [pc, #460]	; (800764c <st_prep_buffer+0x458>)
    prep.steps_remaining = n_steps_remaining;
 8007480:	9a02      	ldr	r2, [sp, #8]
    pl_block->millimeters = mm_remaining;
 8007482:	681b      	ldr	r3, [r3, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007484:	700f      	strb	r7, [r1, #0]
    pl_block->millimeters = mm_remaining;
 8007486:	f8c3 a020 	str.w	sl, [r3, #32]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800748a:	4631      	mov	r1, r6
    prep.steps_remaining = n_steps_remaining;
 800748c:	6095      	str	r5, [r2, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800748e:	4628      	mov	r0, r5
 8007490:	f7f9 f8f6 	bl	8000680 <__aeabi_fsub>
 8007494:	4621      	mov	r1, r4
 8007496:	f7f9 f9fd 	bl	8000894 <__aeabi_fmul>
 800749a:	9b02      	ldr	r3, [sp, #8]
    if (mm_remaining == prep.mm_complete) {
 800749c:	4651      	mov	r1, sl
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800749e:	6058      	str	r0, [r3, #4]
    if (mm_remaining == prep.mm_complete) {
 80074a0:	6998      	ldr	r0, [r3, #24]
 80074a2:	f7f9 fb8b 	bl	8000bbc <__aeabi_fcmpeq>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f aeae 	beq.w	8007208 <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 80074ac:	4650      	mov	r0, sl
 80074ae:	2100      	movs	r1, #0
 80074b0:	f7f9 fbac 	bl	8000c0c <__aeabi_fcmpgt>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	f040 834e 	bne.w	8007b56 <st_prep_buffer+0x962>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 80074ba:	f019 0304 	ands.w	r3, r9, #4
 80074be:	f040 834a 	bne.w	8007b56 <st_prep_buffer+0x962>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 80074c2:	4a62      	ldr	r2, [pc, #392]	; (800764c <st_prep_buffer+0x458>)
 80074c4:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 80074c6:	f7fc fc5b 	bl	8003d80 <plan_discard_current_block>
 80074ca:	e69b      	b.n	8007204 <st_prep_buffer+0x10>
          speed_var = pl_block->acceleration*time_var;
 80074cc:	9b00      	ldr	r3, [sp, #0]
 80074ce:	4658      	mov	r0, fp
 80074d0:	69d9      	ldr	r1, [r3, #28]
 80074d2:	f7f9 f9df 	bl	8000894 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 80074d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 80074da:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 80074dc:	f7f9 f9da 	bl	8000894 <__aeabi_fmul>
 80074e0:	4639      	mov	r1, r7
 80074e2:	f7f9 f8cf 	bl	8000684 <__addsf3>
 80074e6:	4659      	mov	r1, fp
 80074e8:	f7f9 f9d4 	bl	8000894 <__aeabi_fmul>
 80074ec:	4601      	mov	r1, r0
 80074ee:	4650      	mov	r0, sl
 80074f0:	f7f9 f8c6 	bl	8000680 <__aeabi_fsub>
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 80074f4:	9903      	ldr	r1, [sp, #12]
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 80074f6:	4682      	mov	sl, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 80074f8:	f7f9 fb6a 	bl	8000bd0 <__aeabi_fcmplt>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d05b      	beq.n	80075b8 <st_prep_buffer+0x3c4>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007500:	4638      	mov	r0, r7
 8007502:	9f01      	ldr	r7, [sp, #4]
 8007504:	4639      	mov	r1, r7
 8007506:	f7f9 f8bd 	bl	8000684 <__addsf3>
 800750a:	4601      	mov	r1, r0
 800750c:	9806      	ldr	r0, [sp, #24]
 800750e:	f7f9 fa75 	bl	80009fc <__aeabi_fdiv>
 8007512:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007514:	4683      	mov	fp, r0
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8007516:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800751a:	e71a      	b.n	8007352 <st_prep_buffer+0x15e>
          speed_var = pl_block->acceleration*time_var;
 800751c:	9b00      	ldr	r3, [sp, #0]
 800751e:	4658      	mov	r0, fp
 8007520:	69d9      	ldr	r1, [r3, #28]
 8007522:	f7f9 f9b7 	bl	8000894 <__aeabi_fmul>
 8007526:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8007528:	9901      	ldr	r1, [sp, #4]
 800752a:	4638      	mov	r0, r7
 800752c:	f7f9 f8a8 	bl	8000680 <__aeabi_fsub>
 8007530:	4649      	mov	r1, r9
 8007532:	f7f9 fb57 	bl	8000be4 <__aeabi_fcmple>
 8007536:	2800      	cmp	r0, #0
 8007538:	d044      	beq.n	80075c4 <st_prep_buffer+0x3d0>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800753a:	4638      	mov	r0, r7
 800753c:	9f01      	ldr	r7, [sp, #4]
            prep.ramp_type = RAMP_CRUISE;
 800753e:	2501      	movs	r5, #1
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007540:	4639      	mov	r1, r7
 8007542:	f7f9 f89f 	bl	8000684 <__addsf3>
 8007546:	4601      	mov	r1, r0
 8007548:	9806      	ldr	r0, [sp, #24]
 800754a:	f7f9 fa57 	bl	80009fc <__aeabi_fdiv>
						mm_remaining = prep.accelerate_until;
 800754e:	f8dd a00c 	ldr.w	sl, [sp, #12]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8007552:	4683      	mov	fp, r0
            prep.current_speed = prep.maximum_speed;
 8007554:	e6fd      	b.n	8007352 <st_prep_buffer+0x15e>
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8007556:	9901      	ldr	r1, [sp, #4]
 8007558:	4658      	mov	r0, fp
 800755a:	f7f9 f99b 	bl	8000894 <__aeabi_fmul>
 800755e:	4601      	mov	r1, r0
 8007560:	4650      	mov	r0, sl
 8007562:	f7f9 f88d 	bl	8000680 <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8007566:	9905      	ldr	r1, [sp, #20]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8007568:	4681      	mov	r9, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 800756a:	f7f9 fb31 	bl	8000bd0 <__aeabi_fcmplt>
 800756e:	b308      	cbz	r0, 80075b4 <st_prep_buffer+0x3c0>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8007570:	4650      	mov	r0, sl
 8007572:	f8dd a014 	ldr.w	sl, [sp, #20]
            prep.ramp_type = RAMP_DECEL;
 8007576:	2502      	movs	r5, #2
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8007578:	4651      	mov	r1, sl
 800757a:	f7f9 f881 	bl	8000680 <__aeabi_fsub>
 800757e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007580:	f7f9 f988 	bl	8000894 <__aeabi_fmul>
 8007584:	4683      	mov	fp, r0
            prep.ramp_type = RAMP_DECEL;
 8007586:	e6e4      	b.n	8007352 <st_prep_buffer+0x15e>
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8007588:	4650      	mov	r0, sl
 800758a:	4641      	mov	r1, r8
 800758c:	f7f9 f878 	bl	8000680 <__aeabi_fsub>
 8007590:	4601      	mov	r1, r0
 8007592:	f7f9 f877 	bl	8000684 <__addsf3>
 8007596:	f8dd a020 	ldr.w	sl, [sp, #32]
 800759a:	4681      	mov	r9, r0
 800759c:	4651      	mov	r1, sl
 800759e:	4638      	mov	r0, r7
 80075a0:	f7f9 f870 	bl	8000684 <__addsf3>
 80075a4:	4601      	mov	r1, r0
 80075a6:	4648      	mov	r0, r9
 80075a8:	f7f9 fa28 	bl	80009fc <__aeabi_fdiv>
          prep.current_speed = prep.exit_speed;
 80075ac:	4657      	mov	r7, sl
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80075ae:	4683      	mov	fp, r0
          mm_remaining = prep.mm_complete;
 80075b0:	46c2      	mov	sl, r8
 80075b2:	e6ce      	b.n	8007352 <st_prep_buffer+0x15e>
            mm_remaining = mm_var;
 80075b4:	46ca      	mov	sl, r9
 80075b6:	e6cc      	b.n	8007352 <st_prep_buffer+0x15e>
            prep.current_speed += speed_var;
 80075b8:	4638      	mov	r0, r7
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f9 f862 	bl	8000684 <__addsf3>
 80075c0:	4607      	mov	r7, r0
 80075c2:	e6c6      	b.n	8007352 <st_prep_buffer+0x15e>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 80075c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80075c8:	4648      	mov	r0, r9
 80075ca:	f7f9 f963 	bl	8000894 <__aeabi_fmul>
 80075ce:	4639      	mov	r1, r7
 80075d0:	f7f9 f856 	bl	8000680 <__aeabi_fsub>
 80075d4:	4659      	mov	r1, fp
 80075d6:	f7f9 f95d 	bl	8000894 <__aeabi_fmul>
 80075da:	4601      	mov	r1, r0
 80075dc:	4650      	mov	r0, sl
 80075de:	f7f9 f851 	bl	8000684 <__addsf3>
            prep.current_speed -= speed_var;
 80075e2:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 80075e4:	4682      	mov	sl, r0
            prep.current_speed -= speed_var;
 80075e6:	4638      	mov	r0, r7
 80075e8:	f7f9 f84a 	bl	8000680 <__aeabi_fsub>
 80075ec:	4607      	mov	r7, r0
 80075ee:	e6b0      	b.n	8007352 <st_prep_buffer+0x15e>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 80075f0:	9b00      	ldr	r3, [sp, #0]
 80075f2:	7c9b      	ldrb	r3, [r3, #18]
 80075f4:	f013 0f30 	tst.w	r3, #48	; 0x30
 80075f8:	f040 80c9 	bne.w	800778e <st_prep_buffer+0x59a>
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <st_prep_buffer+0x434>)
 80075fe:	f893 9004 	ldrb.w	r9, [r3, #4]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8007602:	2300      	movs	r3, #0
          sys.spindle_speed = 0.0;
 8007604:	2100      	movs	r1, #0
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8007606:	4618      	mov	r0, r3
          sys.spindle_speed = 0.0;
 8007608:	4a07      	ldr	r2, [pc, #28]	; (8007628 <st_prep_buffer+0x434>)
 800760a:	6111      	str	r1, [r2, #16]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 800760c:	9a02      	ldr	r2, [sp, #8]
 800760e:	8693      	strh	r3, [r2, #52]	; 0x34
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <st_prep_buffer+0x434>)
 8007612:	f009 09f7 	and.w	r9, r9, #247	; 0xf7
 8007616:	f883 9004 	strb.w	r9, [r3, #4]
 800761a:	e6cb      	b.n	80073b4 <st_prep_buffer+0x1c0>
 800761c:	f04f 0201 	mov.w	r2, #1
 8007620:	e641      	b.n	80072a6 <st_prep_buffer+0xb2>
 8007622:	bf00      	nop
 8007624:	392ec33e 	.word	0x392ec33e
 8007628:	20001314 	.word	0x20001314
 800762c:	20000d44 	.word	0x20000d44
 8007630:	20000004 	.word	0x20000004
 8007634:	431bde83 	.word	0x431bde83
 8007638:	000f4240 	.word	0x000f4240
 800763c:	42700000 	.word	0x42700000
 8007640:	10624dd3 	.word	0x10624dd3
 8007644:	20000d96 	.word	0x20000d96
 8007648:	20000d94 	.word	0x20000d94
 800764c:	20000d08 	.word	0x20000d08
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8007650:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8007654:	f080 8091 	bcs.w	800777a <st_prep_buffer+0x586>
 8007658:	2301      	movs	r3, #1
 800765a:	4aa9      	ldr	r2, [pc, #676]	; (8007900 <st_prep_buffer+0x70c>)
 800765c:	9907      	ldr	r1, [sp, #28]
 800765e:	440a      	add	r2, r1
 8007660:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 8007662:	4aa7      	ldr	r2, [pc, #668]	; (8007900 <st_prep_buffer+0x70c>)
 8007664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007666:	fa08 f803 	lsl.w	r8, r8, r3
 800766a:	f822 8031 	strh.w	r8, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 800766e:	40d8      	lsrs	r0, r3
        prep_segment->n_step <<= prep_segment->amass_level;
 8007670:	e6f3      	b.n	800745a <st_prep_buffer+0x266>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007672:	2200      	movs	r2, #0
    prep.steps_remaining = n_steps_remaining;
 8007674:	9f02      	ldr	r7, [sp, #8]
    pl_block->millimeters = mm_remaining;
 8007676:	4ba3      	ldr	r3, [pc, #652]	; (8007904 <st_prep_buffer+0x710>)
    prep.steps_remaining = n_steps_remaining;
 8007678:	60bd      	str	r5, [r7, #8]
    pl_block->millimeters = mm_remaining;
 800767a:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800767c:	4628      	mov	r0, r5
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800767e:	4da2      	ldr	r5, [pc, #648]	; (8007908 <st_prep_buffer+0x714>)
    pl_block->millimeters = mm_remaining;
 8007680:	f8c3 a020 	str.w	sl, [r3, #32]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8007684:	702a      	strb	r2, [r5, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007686:	4631      	mov	r1, r6
 8007688:	f7f8 fffa 	bl	8000680 <__aeabi_fsub>
 800768c:	4621      	mov	r1, r4
 800768e:	f7f9 f901 	bl	8000894 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8007692:	69b9      	ldr	r1, [r7, #24]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8007694:	6078      	str	r0, [r7, #4]
    if (mm_remaining == prep.mm_complete) {
 8007696:	4650      	mov	r0, sl
 8007698:	f7f9 fa90 	bl	8000bbc <__aeabi_fcmpeq>
 800769c:	4607      	mov	r7, r0
 800769e:	2800      	cmp	r0, #0
 80076a0:	f47f af04 	bne.w	80074ac <st_prep_buffer+0x2b8>
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 80076a4:	4b99      	ldr	r3, [pc, #612]	; (800790c <st_prep_buffer+0x718>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	42bb      	cmp	r3, r7
 80076aa:	f47f adb2 	bne.w	8007212 <st_prep_buffer+0x1e>
}
 80076ae:	b00f      	add	sp, #60	; 0x3c
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 80076b4:	4b96      	ldr	r3, [pc, #600]	; (8007910 <st_prep_buffer+0x71c>)
 80076b6:	791b      	ldrb	r3, [r3, #4]
 80076b8:	075b      	lsls	r3, r3, #29
 80076ba:	d573      	bpl.n	80077a4 <st_prep_buffer+0x5b0>
 80076bc:	f7fc fb7c 	bl	8003db8 <plan_get_system_motion_block>
      else { pl_block = plan_get_current_block(); }
 80076c0:	4b90      	ldr	r3, [pc, #576]	; (8007904 <st_prep_buffer+0x710>)
 80076c2:	9000      	str	r0, [sp, #0]
 80076c4:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d0f1      	beq.n	80076ae <st_prep_buffer+0x4ba>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 80076ca:	4992      	ldr	r1, [pc, #584]	; (8007914 <st_prep_buffer+0x720>)
 80076cc:	784c      	ldrb	r4, [r1, #1]
 80076ce:	9102      	str	r1, [sp, #8]
 80076d0:	f014 0201 	ands.w	r2, r4, #1
 80076d4:	d069      	beq.n	80077aa <st_prep_buffer+0x5b6>
          prep.recalculate_flag = false;
 80076d6:	2300      	movs	r3, #0
 80076d8:	4a8d      	ldr	r2, [pc, #564]	; (8007910 <st_prep_buffer+0x71c>)
 80076da:	704b      	strb	r3, [r1, #1]
 80076dc:	7916      	ldrb	r6, [r2, #4]
 80076de:	4b8e      	ldr	r3, [pc, #568]	; (8007918 <st_prep_buffer+0x724>)
 80076e0:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80076e4:	f006 0502 	and.w	r5, r6, #2
 80076e8:	930d      	str	r3, [sp, #52]	; 0x34
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 80076ea:	2200      	movs	r2, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 80076ec:	9b00      	ldr	r3, [sp, #0]
 80076ee:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80076f2:	69df      	ldr	r7, [r3, #28]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 80076f4:	9b02      	ldr	r3, [sp, #8]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 80076f6:	4639      	mov	r1, r7
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 80076f8:	619a      	str	r2, [r3, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 80076fa:	f7f9 f97f 	bl	80009fc <__aeabi_fdiv>
 80076fe:	4601      	mov	r1, r0
 8007700:	4604      	mov	r4, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8007702:	2d00      	cmp	r5, #0
 8007704:	f000 80b2 	beq.w	800786c <st_prep_buffer+0x678>
				prep.ramp_type = RAMP_DECEL;
 8007708:	2502      	movs	r5, #2
 800770a:	9c02      	ldr	r4, [sp, #8]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 800770c:	9b00      	ldr	r3, [sp, #0]
				prep.ramp_type = RAMP_DECEL;
 800770e:	7525      	strb	r5, [r4, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007710:	695c      	ldr	r4, [r3, #20]
 8007712:	4620      	mov	r0, r4
 8007714:	f7f9 f8be 	bl	8000894 <__aeabi_fmul>
 8007718:	4601      	mov	r1, r0
 800771a:	4650      	mov	r0, sl
 800771c:	f7f8 ffb0 	bl	8000680 <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8007720:	2100      	movs	r1, #0
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8007722:	4680      	mov	r8, r0
				if (decel_dist < 0.0f) {
 8007724:	f7f9 fa54 	bl	8000bd0 <__aeabi_fcmplt>
 8007728:	2800      	cmp	r0, #0
 800772a:	f040 8149 	bne.w	80079c0 <st_prep_buffer+0x7cc>
					prep.exit_speed = 0.0f;
 800772e:	2200      	movs	r2, #0
 8007730:	9c02      	ldr	r4, [sp, #8]
 8007732:	4650      	mov	r0, sl
 8007734:	6aa1      	ldr	r1, [r4, #40]	; 0x28
					prep.mm_complete = decel_dist; // End of feed hold.
 8007736:	f8c4 8018 	str.w	r8, [r4, #24]
					prep.exit_speed = 0.0f;
 800773a:	6262      	str	r2, [r4, #36]	; 0x24
 800773c:	9103      	str	r1, [sp, #12]
 800773e:	f7f8 ff9f 	bl	8000680 <__aeabi_fsub>
 8007742:	6a23      	ldr	r3, [r4, #32]
 8007744:	4607      	mov	r7, r0
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	2300      	movs	r3, #0
 800774e:	9308      	str	r3, [sp, #32]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8007750:	4b6f      	ldr	r3, [pc, #444]	; (8007910 <st_prep_buffer+0x71c>)
 8007752:	f046 0608 	orr.w	r6, r6, #8
 8007756:	711e      	strb	r6, [r3, #4]
 8007758:	e577      	b.n	800724a <st_prep_buffer+0x56>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 800775a:	9b00      	ldr	r3, [sp, #0]
 800775c:	7c9b      	ldrb	r3, [r3, #18]
 800775e:	f013 0f30 	tst.w	r3, #48	; 0x30
 8007762:	f43f af4e 	beq.w	8007602 <st_prep_buffer+0x40e>
          float rpm = pl_block->spindle_speed;
 8007766:	9b00      	ldr	r3, [sp, #0]
 8007768:	6b18      	ldr	r0, [r3, #48]	; 0x30
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 800776a:	f7ff f8b9 	bl	80068e0 <spindle_compute_pwm_value>
 800776e:	4b68      	ldr	r3, [pc, #416]	; (8007910 <st_prep_buffer+0x71c>)
 8007770:	f893 9004 	ldrb.w	r9, [r3, #4]
 8007774:	9b02      	ldr	r3, [sp, #8]
 8007776:	8698      	strh	r0, [r3, #52]	; 0x34
 8007778:	e74a      	b.n	8007610 <st_prep_buffer+0x41c>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 800777a:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 800777e:	f080 80d3 	bcs.w	8007928 <st_prep_buffer+0x734>
 8007782:	2302      	movs	r3, #2
 8007784:	4a5e      	ldr	r2, [pc, #376]	; (8007900 <st_prep_buffer+0x70c>)
 8007786:	9907      	ldr	r1, [sp, #28]
 8007788:	440a      	add	r2, r1
 800778a:	7153      	strb	r3, [r2, #5]
 800778c:	e769      	b.n	8007662 <st_prep_buffer+0x46e>
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 800778e:	9b00      	ldr	r3, [sp, #0]
 8007790:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007792:	9b02      	ldr	r3, [sp, #8]
 8007794:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007796:	f7f9 f87d 	bl	8000894 <__aeabi_fmul>
 800779a:	4601      	mov	r1, r0
 800779c:	4638      	mov	r0, r7
 800779e:	f7f9 f879 	bl	8000894 <__aeabi_fmul>
 80077a2:	e7e2      	b.n	800776a <st_prep_buffer+0x576>
      else { pl_block = plan_get_current_block(); }
 80077a4:	f7fc fb14 	bl	8003dd0 <plan_get_current_block>
 80077a8:	e78a      	b.n	80076c0 <st_prep_buffer+0x4cc>
  block_index++;
 80077aa:	780b      	ldrb	r3, [r1, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	b2db      	uxtb	r3, r3
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 80077b0:	2b09      	cmp	r3, #9
 80077b2:	f000 819d 	beq.w	8007af0 <st_prep_buffer+0x8fc>
 80077b6:	4698      	mov	r8, r3
 80077b8:	4606      	mov	r6, r0
 80077ba:	4a58      	ldr	r2, [pc, #352]	; (800791c <st_prep_buffer+0x728>)
 80077bc:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80077c0:	9201      	str	r2, [sp, #4]
 80077c2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 80077c6:	9a02      	ldr	r2, [sp, #8]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 80077c8:	68f0      	ldr	r0, [r6, #12]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 80077ca:	7013      	strb	r3, [r2, #0]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80077cc:	68b3      	ldr	r3, [r6, #8]
 80077ce:	e9d6 1200 	ldrd	r1, r2, [r6]
 80077d2:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80077d6:	9b01      	ldr	r3, [sp, #4]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80077d8:	8a36      	ldrh	r6, [r6, #16]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 80077da:	4f4f      	ldr	r7, [pc, #316]	; (8007918 <st_prep_buffer+0x724>)
        st_prep_block->direction_bits = pl_block->direction_bits;
 80077dc:	eb08 0988 	add.w	r9, r8, r8, lsl #2
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80077e0:	00c9      	lsls	r1, r1, #3
 80077e2:	f843 1029 	str.w	r1, [r3, r9, lsl #2]
 80077e6:	00d2      	lsls	r2, r2, #3
        st_prep_block->direction_bits = pl_block->direction_bits;
 80077e8:	eb03 0989 	add.w	r9, r3, r9, lsl #2
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 80077ec:	00c1      	lsls	r1, r0, #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80077ee:	e9c9 2c01 	strd	r2, ip, [r9, #4]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 80077f2:	603d      	str	r5, [r7, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80077f4:	f8a9 6010 	strh.w	r6, [r9, #16]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 80077f8:	f8c9 100c 	str.w	r1, [r9, #12]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 80077fc:	970d      	str	r7, [sp, #52]	; 0x34
        prep.steps_remaining = (float)pl_block->step_event_count;
 80077fe:	f7f8 fff1 	bl	80007e4 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007802:	9b00      	ldr	r3, [sp, #0]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8007804:	9f02      	ldr	r7, [sp, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007806:	f8d3 a020 	ldr.w	sl, [r3, #32]
        prep.steps_remaining = (float)pl_block->step_event_count;
 800780a:	60b8      	str	r0, [r7, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 800780c:	4651      	mov	r1, sl
 800780e:	f7f9 f8f5 	bl	80009fc <__aeabi_fdiv>
 8007812:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007814:	4842      	ldr	r0, [pc, #264]	; (8007920 <st_prep_buffer+0x72c>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8007816:	60f9      	str	r1, [r7, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8007818:	f7f9 f8f0 	bl	80009fc <__aeabi_fdiv>
 800781c:	6138      	str	r0, [r7, #16]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 800781e:	2000      	movs	r0, #0
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007820:	493b      	ldr	r1, [pc, #236]	; (8007910 <st_prep_buffer+0x71c>)
 8007822:	f004 0308 	and.w	r3, r4, #8
 8007826:	790e      	ldrb	r6, [r1, #4]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8007828:	6078      	str	r0, [r7, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 800782a:	f006 0502 	and.w	r5, r6, #2
 800782e:	432b      	orrs	r3, r5
        st_prep_block->direction_bits = pl_block->direction_bits;
 8007830:	ea4f 0b88 	mov.w	fp, r8, lsl #2
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8007834:	f040 80e1 	bne.w	80079fa <st_prep_buffer+0x806>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8007838:	9303      	str	r3, [sp, #12]
 800783a:	9b00      	ldr	r3, [sp, #0]
 800783c:	6958      	ldr	r0, [r3, #20]
 800783e:	f002 f889 	bl	8009954 <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007842:	4a38      	ldr	r2, [pc, #224]	; (8007924 <st_prep_buffer+0x730>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8007844:	9b02      	ldr	r3, [sp, #8]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007846:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 800784a:	61d8      	str	r0, [r3, #28]
        st_prep_block->is_pwm_rate_adjusted = false;
 800784c:	9b03      	ldr	r3, [sp, #12]
        if (settings.flags & BITFLAG_LASER_MODE) {
 800784e:	0794      	lsls	r4, r2, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8007850:	f889 3012 	strb.w	r3, [r9, #18]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007854:	f100 8179 	bmi.w	8007b4a <st_prep_buffer+0x956>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007858:	2200      	movs	r2, #0
 800785a:	9b02      	ldr	r3, [sp, #8]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 800785c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8007860:	619a      	str	r2, [r3, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8007862:	9b00      	ldr	r3, [sp, #0]
 8007864:	69d9      	ldr	r1, [r3, #28]
 8007866:	f7f9 f8c9 	bl	80009fc <__aeabi_fdiv>
 800786a:	4604      	mov	r4, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 800786c:	2300      	movs	r3, #0
				prep.accelerate_until = pl_block->millimeters;
 800786e:	9a02      	ldr	r2, [sp, #8]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007870:	0771      	lsls	r1, r6, #29
				prep.accelerate_until = pl_block->millimeters;
 8007872:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8007876:	7513      	strb	r3, [r2, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8007878:	f140 80e6 	bpl.w	8007a48 <st_prep_buffer+0x854>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 800787c:	2300      	movs	r3, #0
 800787e:	4698      	mov	r8, r3
 8007880:	6253      	str	r3, [r2, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8007882:	9800      	ldr	r0, [sp, #0]
 8007884:	f7fc fade 	bl	8003e44 <plan_compute_profile_nominal_speed>
 8007888:	4601      	mov	r1, r0
 800788a:	9001      	str	r0, [sp, #4]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 800788c:	f7f9 f802 	bl	8000894 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007890:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <st_prep_buffer+0x710>)
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8007892:	4606      	mov	r6, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007894:	681b      	ldr	r3, [r3, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8007896:	4601      	mov	r1, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007898:	695d      	ldr	r5, [r3, #20]
 800789a:	f8d3 a020 	ldr.w	sl, [r3, #32]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 800789e:	4628      	mov	r0, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80078a0:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 80078a2:	f7f9 f9b3 	bl	8000c0c <__aeabi_fcmpgt>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d045      	beq.n	8007936 <st_prep_buffer+0x742>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 80078aa:	4629      	mov	r1, r5
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7f8 fee7 	bl	8000680 <__aeabi_fsub>
 80078b2:	4621      	mov	r1, r4
 80078b4:	f7f8 ffee 	bl	8000894 <__aeabi_fmul>
 80078b8:	4607      	mov	r7, r0
 80078ba:	4650      	mov	r0, sl
 80078bc:	4639      	mov	r1, r7
 80078be:	f7f8 fee1 	bl	8000684 <__addsf3>
 80078c2:	9a02      	ldr	r2, [sp, #8]
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80078c4:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 80078c6:	6290      	str	r0, [r2, #40]	; 0x28
 80078c8:	9003      	str	r0, [sp, #12]
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80078ca:	f7f9 f98b 	bl	8000be4 <__aeabi_fcmple>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f040 80d9 	bne.w	8007a86 <st_prep_buffer+0x892>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80078d4:	4641      	mov	r1, r8
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7f8 fed2 	bl	8000680 <__aeabi_fsub>
 80078dc:	4621      	mov	r1, r4
 80078de:	f7f8 ffd9 	bl	8000894 <__aeabi_fmul>
						prep.maximum_speed = nominal_speed;
 80078e2:	9b02      	ldr	r3, [sp, #8]
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	4a0a      	ldr	r2, [pc, #40]	; (8007910 <st_prep_buffer+0x71c>)
 80078e8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80078ec:	6219      	str	r1, [r3, #32]
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80078ee:	62d8      	str	r0, [r3, #44]	; 0x2c
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						prep.maximum_speed = nominal_speed;
 80078f2:	2503      	movs	r5, #3
 80078f4:	7916      	ldrb	r6, [r2, #4]
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80078f6:	9005      	str	r0, [sp, #20]
 80078f8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80078fc:	9308      	str	r3, [sp, #32]
 80078fe:	e727      	b.n	8007750 <st_prep_buffer+0x55c>
 8007900:	20000d44 	.word	0x20000d44
 8007904:	20000d08 	.word	0x20000d08
 8007908:	20000d96 	.word	0x20000d96
 800790c:	20000d95 	.word	0x20000d95
 8007910:	20001314 	.word	0x20001314
 8007914:	20000d0c 	.word	0x20000d0c
 8007918:	20000e78 	.word	0x20000e78
 800791c:	20000dc4 	.word	0x20000dc4
 8007920:	3fa00000 	.word	0x3fa00000
 8007924:	200014c8 	.word	0x200014c8
        else { prep_segment->amass_level = 3; }
 8007928:	2203      	movs	r2, #3
 800792a:	499c      	ldr	r1, [pc, #624]	; (8007b9c <st_prep_buffer+0x9a8>)
 800792c:	9f07      	ldr	r7, [sp, #28]
 800792e:	4613      	mov	r3, r2
 8007930:	4439      	add	r1, r7
 8007932:	714a      	strb	r2, [r1, #5]
 8007934:	e695      	b.n	8007662 <st_prep_buffer+0x46e>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8007936:	4641      	mov	r1, r8
 8007938:	4628      	mov	r0, r5
 800793a:	f7f8 fea1 	bl	8000680 <__aeabi_fsub>
 800793e:	4621      	mov	r1, r4
 8007940:	f7f8 ffa8 	bl	8000894 <__aeabi_fmul>
 8007944:	4651      	mov	r1, sl
 8007946:	f7f8 fe9d 	bl	8000684 <__addsf3>
				float intersect_distance =
 800794a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800794e:	f7f8 ffa1 	bl	8000894 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 8007952:	2100      	movs	r1, #0
				float intersect_distance =
 8007954:	4607      	mov	r7, r0
 8007956:	9003      	str	r0, [sp, #12]
				} else if (intersect_distance > 0.0f) {
 8007958:	f7f9 f958 	bl	8000c0c <__aeabi_fcmpgt>
 800795c:	2800      	cmp	r0, #0
 800795e:	f000 80b4 	beq.w	8007aca <st_prep_buffer+0x8d6>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 8007962:	4639      	mov	r1, r7
 8007964:	4650      	mov	r0, sl
 8007966:	f7f9 f951 	bl	8000c0c <__aeabi_fcmpgt>
 800796a:	2800      	cmp	r0, #0
 800796c:	d077      	beq.n	8007a5e <st_prep_buffer+0x86a>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 800796e:	4641      	mov	r1, r8
 8007970:	4630      	mov	r0, r6
 8007972:	f7f8 fe85 	bl	8000680 <__aeabi_fsub>
 8007976:	4621      	mov	r1, r4
 8007978:	f7f8 ff8c 	bl	8000894 <__aeabi_fmul>
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 800797c:	4639      	mov	r1, r7
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 800797e:	9f02      	ldr	r7, [sp, #8]
 8007980:	9005      	str	r0, [sp, #20]
 8007982:	62f8      	str	r0, [r7, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8007984:	f7f9 f924 	bl	8000bd0 <__aeabi_fcmplt>
 8007988:	2800      	cmp	r0, #0
 800798a:	f000 80b8 	beq.w	8007afe <st_prep_buffer+0x90a>
							prep.maximum_speed = nominal_speed;
 800798e:	9b01      	ldr	r3, [sp, #4]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8007990:	4631      	mov	r1, r6
 8007992:	4628      	mov	r0, r5
							prep.maximum_speed = nominal_speed;
 8007994:	623b      	str	r3, [r7, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8007996:	f7f9 f911 	bl	8000bbc <__aeabi_fcmpeq>
 800799a:	2800      	cmp	r0, #0
 800799c:	f000 80e3 	beq.w	8007b66 <st_prep_buffer+0x972>
								prep.ramp_type = RAMP_CRUISE;
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	463c      	mov	r4, r7
 80079a4:	4619      	mov	r1, r3
 80079a6:	4650      	mov	r0, sl
 80079a8:	9303      	str	r3, [sp, #12]
 80079aa:	f7f8 fe69 	bl	8000680 <__aeabi_fsub>
 80079ae:	4b7c      	ldr	r3, [pc, #496]	; (8007ba0 <st_prep_buffer+0x9ac>)
 80079b0:	4607      	mov	r7, r0
 80079b2:	791e      	ldrb	r6, [r3, #4]
 80079b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079b6:	2501      	movs	r5, #1
 80079b8:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80079bc:	9308      	str	r3, [sp, #32]
 80079be:	e6c7      	b.n	8007750 <st_prep_buffer+0x55c>
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 80079c0:	4639      	mov	r1, r7
 80079c2:	4638      	mov	r0, r7
 80079c4:	f7f8 fe5e 	bl	8000684 <__addsf3>
 80079c8:	4651      	mov	r1, sl
 80079ca:	f7f8 ff63 	bl	8000894 <__aeabi_fmul>
 80079ce:	4601      	mov	r1, r0
 80079d0:	4620      	mov	r0, r4
 80079d2:	f7f8 fe55 	bl	8000680 <__aeabi_fsub>
 80079d6:	f001 ffbd 	bl	8009954 <sqrtf>
 80079da:	9c02      	ldr	r4, [sp, #8]
 80079dc:	9008      	str	r0, [sp, #32]
 80079de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80079e0:	6260      	str	r0, [r4, #36]	; 0x24
 80079e2:	4650      	mov	r0, sl
 80079e4:	9103      	str	r1, [sp, #12]
 80079e6:	f7f8 fe4b 	bl	8000680 <__aeabi_fsub>
 80079ea:	6a23      	ldr	r3, [r4, #32]
 80079ec:	4607      	mov	r7, r0
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80079f2:	f04f 0800 	mov.w	r8, #0
 80079f6:	9305      	str	r3, [sp, #20]
 80079f8:	e6aa      	b.n	8007750 <st_prep_buffer+0x55c>
          prep.current_speed = prep.exit_speed;
 80079fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 80079fc:	f024 0408 	bic.w	r4, r4, #8
          prep.current_speed = prep.exit_speed;
 8007a00:	61f9      	str	r1, [r7, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8007a02:	4608      	mov	r0, r1
 8007a04:	f7f8 ff46 	bl	8000894 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 8007a08:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8007a0a:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007a0c:	4b65      	ldr	r3, [pc, #404]	; (8007ba4 <st_prep_buffer+0x9b0>)
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8007a0e:	6148      	str	r0, [r1, #20]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007a10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8007a14:	707c      	strb	r4, [r7, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007a16:	079f      	lsls	r7, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8007a18:	f889 2012 	strb.w	r2, [r9, #18]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8007a1c:	f57f ae65 	bpl.w	80076ea <st_prep_buffer+0x4f6>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8007a20:	9b00      	ldr	r3, [sp, #0]
 8007a22:	7c9b      	ldrb	r3, [r3, #18]
 8007a24:	0698      	lsls	r0, r3, #26
 8007a26:	f57f ae60 	bpl.w	80076ea <st_prep_buffer+0x4f6>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8007a2a:	9b00      	ldr	r3, [sp, #0]
 8007a2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a32:	f7f8 ffe3 	bl	80009fc <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 8007a36:	2301      	movs	r3, #1
 8007a38:	9a01      	ldr	r2, [sp, #4]
 8007a3a:	44d8      	add	r8, fp
 8007a3c:	eb02 0788 	add.w	r7, r2, r8, lsl #2
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8007a40:	9a02      	ldr	r2, [sp, #8]
            st_prep_block->is_pwm_rate_adjusted = true;
 8007a42:	74bb      	strb	r3, [r7, #18]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8007a44:	6310      	str	r0, [r2, #48]	; 0x30
            st_prep_block->is_pwm_rate_adjusted = true;
 8007a46:	e650      	b.n	80076ea <st_prep_buffer+0x4f6>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 8007a48:	f7fc f9d4 	bl	8003df4 <plan_get_exec_block_exit_speed_sqr>
 8007a4c:	4680      	mov	r8, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 8007a4e:	f001 ff81 	bl	8009954 <sqrtf>
 8007a52:	4b55      	ldr	r3, [pc, #340]	; (8007ba8 <st_prep_buffer+0x9b4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	6258      	str	r0, [r3, #36]	; 0x24
 8007a5c:	e711      	b.n	8007882 <st_prep_buffer+0x68e>
            prep.ramp_type = RAMP_DECEL;
 8007a5e:	9c02      	ldr	r4, [sp, #8]
 8007a60:	4650      	mov	r0, sl
 8007a62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 8007a64:	2502      	movs	r5, #2
 8007a66:	4619      	mov	r1, r3
 8007a68:	9303      	str	r3, [sp, #12]
 8007a6a:	f7f8 fe09 	bl	8000680 <__aeabi_fsub>
 8007a6e:	4b4c      	ldr	r3, [pc, #304]	; (8007ba0 <st_prep_buffer+0x9ac>)
 8007a70:	6a22      	ldr	r2, [r4, #32]
 8007a72:	791e      	ldrb	r6, [r3, #4]
 8007a74:	9201      	str	r2, [sp, #4]
 8007a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a7a:	4607      	mov	r7, r0
 8007a7c:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8007a80:	9205      	str	r2, [sp, #20]
 8007a82:	9308      	str	r3, [sp, #32]
 8007a84:	e664      	b.n	8007750 <st_prep_buffer+0x55c>
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8007a86:	9b00      	ldr	r3, [sp, #0]
 8007a88:	4650      	mov	r0, sl
 8007a8a:	69d9      	ldr	r1, [r3, #28]
 8007a8c:	f7f8 ff02 	bl	8000894 <__aeabi_fmul>
 8007a90:	4601      	mov	r1, r0
 8007a92:	f7f8 fdf7 	bl	8000684 <__addsf3>
 8007a96:	4601      	mov	r1, r0
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f7f8 fdf1 	bl	8000680 <__aeabi_fsub>
 8007a9e:	f001 ff59 	bl	8009954 <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8007aa2:	9a02      	ldr	r2, [sp, #8]
 8007aa4:	2502      	movs	r5, #2
 8007aa6:	7853      	ldrb	r3, [r2, #1]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8007aa8:	6250      	str	r0, [r2, #36]	; 0x24
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8007aaa:	f043 0308 	orr.w	r3, r3, #8
 8007aae:	7053      	strb	r3, [r2, #1]
 8007ab0:	4b3b      	ldr	r3, [pc, #236]	; (8007ba0 <st_prep_buffer+0x9ac>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8007ab2:	9008      	str	r0, [sp, #32]
 8007ab4:	791e      	ldrb	r6, [r3, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	6a12      	ldr	r2, [r2, #32]
 8007aba:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8007abe:	9201      	str	r2, [sp, #4]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007ac6:	9205      	str	r2, [sp, #20]
 8007ac8:	e642      	b.n	8007750 <st_prep_buffer+0x55c>
					prep.maximum_speed = prep.exit_speed;
 8007aca:	2200      	movs	r2, #0
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	9203      	str	r2, [sp, #12]
 8007ad0:	4a33      	ldr	r2, [pc, #204]	; (8007ba0 <st_prep_buffer+0x9ac>)
 8007ad2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007ad4:	7916      	ldrb	r6, [r2, #4]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4657      	mov	r7, sl
 8007ada:	9205      	str	r2, [sp, #20]
					prep.accelerate_until = 0.0f;
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8007ae2:	7d1d      	ldrb	r5, [r3, #20]
					prep.maximum_speed = prep.exit_speed;
 8007ae4:	9101      	str	r1, [sp, #4]
 8007ae6:	9108      	str	r1, [sp, #32]
					prep.accelerate_until = 0.0f;
 8007ae8:	629a      	str	r2, [r3, #40]	; 0x28
					prep.maximum_speed = prep.exit_speed;
 8007aea:	6219      	str	r1, [r3, #32]
 8007aec:	e630      	b.n	8007750 <st_prep_buffer+0x55c>
 8007aee:	4770      	bx	lr
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8007af0:	4613      	mov	r3, r2
 8007af2:	4a2e      	ldr	r2, [pc, #184]	; (8007bac <st_prep_buffer+0x9b8>)
 8007af4:	4698      	mov	r8, r3
 8007af6:	4615      	mov	r5, r2
 8007af8:	4606      	mov	r6, r0
 8007afa:	9201      	str	r2, [sp, #4]
 8007afc:	e663      	b.n	80077c6 <st_prep_buffer+0x5d2>
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8007afe:	9b00      	ldr	r3, [sp, #0]
							prep.accelerate_until = intersect_distance;
 8007b00:	f8dd 900c 	ldr.w	r9, [sp, #12]
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8007b04:	69d9      	ldr	r1, [r3, #28]
							prep.accelerate_until = intersect_distance;
 8007b06:	9b02      	ldr	r3, [sp, #8]
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8007b08:	4608      	mov	r0, r1
							prep.accelerate_until = intersect_distance;
 8007b0a:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
							prep.decelerate_after = intersect_distance;
 8007b0e:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
							prep.accelerate_until = intersect_distance;
 8007b12:	461c      	mov	r4, r3
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8007b14:	f7f8 fdb6 	bl	8000684 <__addsf3>
 8007b18:	4649      	mov	r1, r9
 8007b1a:	f7f8 febb 	bl	8000894 <__aeabi_fmul>
 8007b1e:	4641      	mov	r1, r8
 8007b20:	f7f8 fdb0 	bl	8000684 <__addsf3>
 8007b24:	f001 ff16 	bl	8009954 <sqrtf>
 8007b28:	4649      	mov	r1, r9
 8007b2a:	9001      	str	r0, [sp, #4]
 8007b2c:	6220      	str	r0, [r4, #32]
 8007b2e:	4650      	mov	r0, sl
 8007b30:	f7f8 fda6 	bl	8000680 <__aeabi_fsub>
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <st_prep_buffer+0x9ac>)
 8007b36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b38:	4607      	mov	r7, r0
 8007b3a:	791e      	ldrb	r6, [r3, #4]
 8007b3c:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8007b40:	7d25      	ldrb	r5, [r4, #20]
 8007b42:	9208      	str	r2, [sp, #32]
 8007b44:	f8cd 9014 	str.w	r9, [sp, #20]
 8007b48:	e602      	b.n	8007750 <st_prep_buffer+0x55c>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8007b4a:	9b00      	ldr	r3, [sp, #0]
 8007b4c:	7c9b      	ldrb	r3, [r3, #18]
 8007b4e:	069b      	lsls	r3, r3, #26
 8007b50:	f53f af6b 	bmi.w	8007a2a <st_prep_buffer+0x836>
 8007b54:	e680      	b.n	8007858 <st_prep_buffer+0x664>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8007b56:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <st_prep_buffer+0x9ac>)
 8007b58:	f049 0a01 	orr.w	sl, r9, #1
 8007b5c:	f883 a004 	strb.w	sl, [r3, #4]
}
 8007b60:	b00f      	add	sp, #60	; 0x3c
 8007b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8007b66:	4631      	mov	r1, r6
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7f8 fd89 	bl	8000680 <__aeabi_fsub>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	f7f8 fe90 	bl	8000894 <__aeabi_fmul>
 8007b74:	9c02      	ldr	r4, [sp, #8]
 8007b76:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007b78:	f7f8 fd84 	bl	8000684 <__addsf3>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	9003      	str	r0, [sp, #12]
 8007b80:	4611      	mov	r1, r2
 8007b82:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b84:	4650      	mov	r0, sl
 8007b86:	f7f8 fd7b 	bl	8000680 <__aeabi_fsub>
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <st_prep_buffer+0x9ac>)
 8007b8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b8e:	4607      	mov	r7, r0
 8007b90:	791e      	ldrb	r6, [r3, #4]
 8007b92:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8007b96:	7d25      	ldrb	r5, [r4, #20]
 8007b98:	9208      	str	r2, [sp, #32]
 8007b9a:	e5d9      	b.n	8007750 <st_prep_buffer+0x55c>
 8007b9c:	20000d44 	.word	0x20000d44
 8007ba0:	20001314 	.word	0x20001314
 8007ba4:	200014c8 	.word	0x200014c8
 8007ba8:	20000d08 	.word	0x20000d08
 8007bac:	20000dc4 	.word	0x20000dc4

08007bb0 <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <st_get_realtime_rate+0x14>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 8007bb8:	bf1a      	itte	ne
 8007bba:	4b03      	ldrne	r3, [pc, #12]	; (8007bc8 <st_get_realtime_rate+0x18>)
 8007bbc:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 8007bbe:	2000      	moveq	r0, #0
}
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20001314 	.word	0x20001314
 8007bc8:	20000d0c 	.word	0x20000d0c

08007bcc <system_init>:

#include "grbl.h"


void system_init()
{
 8007bcc:	b500      	push	{lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8007bce:	2101      	movs	r1, #1
{
 8007bd0:	b085      	sub	sp, #20
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8007bd2:	2009      	movs	r0, #9
 8007bd4:	f7f9 fbd4 	bl	8001380 <RCC_APB2PeriphClockCmd>
#ifdef ABC_AXIS
  // Full SWJ Disabled (JTAG-DP + SW-DP)
  // SWD will work only with "flash under reset" option
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // to enable PA15, PB3, PB4, PA13, PA14 pins
#else
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 8007bd8:	2101      	movs	r1, #1
 8007bda:	4817      	ldr	r0, [pc, #92]	; (8007c38 <system_init+0x6c>)
 8007bdc:	f7f9 fb7c 	bl	80012d8 <GPIO_PinRemapConfig>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8007be0:	4b16      	ldr	r3, [pc, #88]	; (8007c3c <system_init+0x70>)
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8007be2:	4669      	mov	r1, sp
 8007be4:	4816      	ldr	r0, [pc, #88]	; (8007c40 <system_init+0x74>)
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8007be6:	9300      	str	r3, [sp, #0]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8007be8:	f7f9 f9de 	bl	8000fa8 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 8007bec:	2105      	movs	r1, #5
 8007bee:	2001      	movs	r0, #1
 8007bf0:	f7f9 fba8 	bl	8001344 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 8007bf4:	2106      	movs	r1, #6
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	f7f9 fba4 	bl	8001344 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 8007bfc:	2107      	movs	r1, #7
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f7f9 fba0 	bl	8001344 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 8007c04:	2108      	movs	r1, #8
 8007c06:	2001      	movs	r0, #1
 8007c08:	f7f9 fb9c 	bl	8001344 <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 8007c0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8007c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8007c14:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 8007c16:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 8007c18:	9102      	str	r1, [sp, #8]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8007c1a:	f8ad 200c 	strh.w	r2, [sp, #12]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8007c1e:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_Init(&EXTI_InitStructure);
 8007c22:	f7f9 f895 	bl	8000d50 <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8007c26:	4b07      	ldr	r3, [pc, #28]	; (8007c44 <system_init+0x78>)
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 8007c28:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8007c2a:	9301      	str	r3, [sp, #4]
  NVIC_Init(&NVIC_InitStructure);
 8007c2c:	f7f9 f85e 	bl	8000cec <NVIC_Init>
#endif
}
 8007c30:	b005      	add	sp, #20
 8007c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c36:	bf00      	nop
 8007c38:	00300200 	.word	0x00300200
 8007c3c:	480301e0 	.word	0x480301e0
 8007c40:	40010c00 	.word	0x40010c00
 8007c44:	01020217 	.word	0x01020217

08007c48 <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 8007c48:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 8007c4a:	4809      	ldr	r0, [pc, #36]	; (8007c70 <system_control_get_state+0x28>)
 8007c4c:	f7f9 fb32 	bl	80012b4 <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 8007c50:	4603      	mov	r3, r0
 8007c52:	b158      	cbz	r0, 8007c6c <system_control_get_state+0x24>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8007c54:	f080 0020 	eor.w	r0, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8007c58:	065a      	lsls	r2, r3, #25
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8007c5a:	f3c0 1040 	ubfx	r0, r0, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8007c5e:	bf58      	it	pl
 8007c60:	f040 0002 	orrpl.w	r0, r0, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8007c64:	061b      	lsls	r3, r3, #24
 8007c66:	d401      	bmi.n	8007c6c <system_control_get_state+0x24>
 8007c68:	f040 0004 	orr.w	r0, r0, #4
  }
  return(control_state);
}
 8007c6c:	bd08      	pop	{r3, pc}
 8007c6e:	bf00      	nop
 8007c70:	40010c00 	.word	0x40010c00

08007c74 <EXTI9_5_IRQHandler>:
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 8007c74:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
{
 8007c78:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 8007c7a:	f7f9 f8b7 	bl	8000dec <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 8007c7e:	4810      	ldr	r0, [pc, #64]	; (8007cc0 <EXTI9_5_IRQHandler+0x4c>)
 8007c80:	f7f9 fb18 	bl	80012b4 <GPIO_ReadInputData>
  if (pin) {
 8007c84:	b140      	cbz	r0, 8007c98 <EXTI9_5_IRQHandler+0x24>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8007c86:	0683      	lsls	r3, r0, #26
 8007c88:	d407      	bmi.n	8007c9a <EXTI9_5_IRQHandler+0x26>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
		{
			mc_reset();
 8007c8a:	f7fb fdad 	bl	80037e8 <mc_reset>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8007c8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007c92:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <EXTI9_5_IRQHandler+0x50>)
 8007c94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 8007c98:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8007c9a:	0641      	lsls	r1, r0, #25
 8007c9c:	d407      	bmi.n	8007cae <EXTI9_5_IRQHandler+0x3a>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8007c9e:	0603      	lsls	r3, r0, #24
 8007ca0:	d507      	bpl.n	8007cb2 <EXTI9_5_IRQHandler+0x3e>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 8007ca2:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <EXTI9_5_IRQHandler+0x54>)
 8007ca4:	7813      	ldrb	r3, [r2, #0]
 8007ca6:	f043 0308 	orr.w	r3, r3, #8
 8007caa:	7013      	strb	r3, [r2, #0]
 8007cac:	e7ef      	b.n	8007c8e <EXTI9_5_IRQHandler+0x1a>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8007cae:	0602      	lsls	r2, r0, #24
 8007cb0:	d4f2      	bmi.n	8007c98 <EXTI9_5_IRQHandler+0x24>
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 8007cb2:	4a05      	ldr	r2, [pc, #20]	; (8007cc8 <EXTI9_5_IRQHandler+0x54>)
 8007cb4:	7813      	ldrb	r3, [r2, #0]
 8007cb6:	f043 0302 	orr.w	r3, r3, #2
 8007cba:	7013      	strb	r3, [r2, #0]
 8007cbc:	e7e7      	b.n	8007c8e <EXTI9_5_IRQHandler+0x1a>
 8007cbe:	bf00      	nop
 8007cc0:	40010c00 	.word	0x40010c00
 8007cc4:	e000e100 	.word	0xe000e100
 8007cc8:	20001329 	.word	0x20001329

08007ccc <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8007ccc:	2000      	movs	r0, #0
 8007cce:	4770      	bx	lr

08007cd0 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	2500      	movs	r5, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f7fe fb95 	bl	8006408 <settings_read_startup_line>
 8007cde:	b150      	cbz	r0, 8007cf6 <system_execute_startup+0x26>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 8007ce0:	7823      	ldrb	r3, [r4, #0]
 8007ce2:	b973      	cbnz	r3, 8007d02 <system_execute_startup+0x32>
  for (n=0; n < N_STARTUP_LINE; n++) {
 8007ce4:	b105      	cbz	r5, 8007ce8 <system_execute_startup+0x18>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	2501      	movs	r5, #1
    if (!(settings_read_startup_line(n, line))) {
 8007cea:	4621      	mov	r1, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	f7fe fb8b 	bl	8006408 <settings_read_startup_line>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d1f4      	bne.n	8007ce0 <system_execute_startup+0x10>
      line[0] = 0;
 8007cf6:	7020      	strb	r0, [r4, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8007cf8:	2107      	movs	r1, #7
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7fd ff60 	bl	8005bc0 <report_execute_startup_message>
 8007d00:	e7f0      	b.n	8007ce4 <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7f9 fd80 	bl	8001808 <gc_execute_line>
 8007d08:	4601      	mov	r1, r0
        report_execute_startup_message(line,status_code);
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f7fd ff58 	bl	8005bc0 <report_execute_startup_message>
 8007d10:	e7e8      	b.n	8007ce4 <system_execute_startup+0x14>
 8007d12:	bf00      	nop

08007d14 <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 8007d14:	2301      	movs	r3, #1
{
 8007d16:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 8007d18:	7844      	ldrb	r4, [r0, #1]
{
 8007d1a:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 8007d1c:	2c58      	cmp	r4, #88	; 0x58
{
 8007d1e:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 8007d20:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 8007d24:	d825      	bhi.n	8007d72 <system_execute_line+0x5e>
 8007d26:	2c42      	cmp	r4, #66	; 0x42
 8007d28:	d805      	bhi.n	8007d36 <system_execute_line+0x22>
 8007d2a:	bb04      	cbnz	r4, 8007d6e <system_execute_line+0x5a>
    case 0 : report_grbl_help(); break;
 8007d2c:	f7fd fb7c 	bl	8005428 <report_grbl_help>
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 8007d30:	4620      	mov	r0, r4
 8007d32:	b004      	add	sp, #16
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
 8007d36:	f1a4 0343 	sub.w	r3, r4, #67	; 0x43
 8007d3a:	2b15      	cmp	r3, #21
 8007d3c:	d819      	bhi.n	8007d72 <system_execute_line+0x5e>
 8007d3e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007d42:	010a      	.short	0x010a
 8007d44:	00180018 	.word	0x00180018
 8007d48:	010a0018 	.word	0x010a0018
 8007d4c:	00180018 	.word	0x00180018
 8007d50:	0018002d 	.word	0x0018002d
 8007d54:	00180018 	.word	0x00180018
 8007d58:	00180018 	.word	0x00180018
 8007d5c:	00180018 	.word	0x00180018
 8007d60:	00180018 	.word	0x00180018
 8007d64:	00180018 	.word	0x00180018
 8007d68:	00180018 	.word	0x00180018
 8007d6c:	010a      	.short	0x010a
  switch( line[char_counter] ) {
 8007d6e:	2c24      	cmp	r4, #36	; 0x24
 8007d70:	d024      	beq.n	8007dbc <system_execute_line+0xa8>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 8007d72:	4ea1      	ldr	r6, [pc, #644]	; (8007ff8 <system_execute_line+0x2e4>)
 8007d74:	7833      	ldrb	r3, [r6, #0]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d815      	bhi.n	8007da6 <system_execute_line+0x92>
      switch( line[1] ) {
 8007d7a:	2c23      	cmp	r4, #35	; 0x23
 8007d7c:	f000 811a 	beq.w	8007fb4 <system_execute_line+0x2a0>
 8007d80:	3c48      	subs	r4, #72	; 0x48
 8007d82:	b2e2      	uxtb	r2, r4
 8007d84:	2a0b      	cmp	r2, #11
 8007d86:	d824      	bhi.n	8007dd2 <system_execute_line+0xbe>
 8007d88:	2c0b      	cmp	r4, #11
 8007d8a:	d822      	bhi.n	8007dd2 <system_execute_line+0xbe>
 8007d8c:	e8df f004 	tbb	[pc, r4]
 8007d90:	2121a6bf 	.word	0x2121a6bf
 8007d94:	21842121 	.word	0x21842121
 8007d98:	55662121 	.word	0x55662121
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 8007d9c:	4b96      	ldr	r3, [pc, #600]	; (8007ff8 <system_execute_line+0x2e4>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8007da4:	d003      	beq.n	8007dae <system_execute_line+0x9a>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8007da6:	2408      	movs	r4, #8
}
 8007da8:	4620      	mov	r0, r4
 8007daa:	b004      	add	sp, #16
 8007dac:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 8007dae:	7883      	ldrb	r3, [r0, #2]
 8007db0:	2b3d      	cmp	r3, #61	; 0x3d
 8007db2:	d03e      	beq.n	8007e32 <system_execute_line+0x11e>
 8007db4:	2403      	movs	r4, #3
}
 8007db6:	4620      	mov	r0, r4
 8007db8:	b004      	add	sp, #16
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8007dbc:	7883      	ldrb	r3, [r0, #2]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1f8      	bne.n	8007db4 <system_execute_line+0xa0>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 8007dc2:	4b8d      	ldr	r3, [pc, #564]	; (8007ff8 <system_execute_line+0x2e4>)
 8007dc4:	781c      	ldrb	r4, [r3, #0]
 8007dc6:	f014 0418 	ands.w	r4, r4, #24
 8007dca:	d1ec      	bne.n	8007da6 <system_execute_line+0x92>
          else { report_grbl_settings(); }
 8007dcc:	f7fd fb32 	bl	8005434 <report_grbl_settings>
          break;
 8007dd0:	e7ae      	b.n	8007d30 <system_execute_line+0x1c>
 8007dd2:	2400      	movs	r4, #0
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f10d 0107 	add.w	r1, sp, #7
 8007dda:	aa02      	add	r2, sp, #8
 8007ddc:	f7fb fd34 	bl	8003848 <read_float>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f000 80cb 	beq.w	8007f7c <system_execute_line+0x268>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8007de6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007dea:	1c53      	adds	r3, r2, #1
 8007dec:	5caa      	ldrb	r2, [r5, r2]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2a3d      	cmp	r2, #61	; 0x3d
 8007df2:	f88d 3007 	strb.w	r3, [sp, #7]
 8007df6:	d1dd      	bne.n	8007db4 <system_execute_line+0xa0>
          if (helper_var) { // Store startup line
 8007df8:	2c00      	cmp	r4, #0
 8007dfa:	f000 8103 	beq.w	8008004 <system_execute_line+0x2f0>
 8007dfe:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 8007e00:	5ce9      	ldrb	r1, [r5, r3]
 8007e02:	1a1a      	subs	r2, r3, r0
 8007e04:	54a9      	strb	r1, [r5, r2]
 8007e06:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	d1f6      	bne.n	8007e00 <system_execute_line+0xec>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 8007e12:	4628      	mov	r0, r5
 8007e14:	f88d 3007 	strb.w	r3, [sp, #7]
 8007e18:	f7f9 fcf6 	bl	8001808 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d186      	bne.n	8007d30 <system_execute_line+0x1c>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 8007e22:	9802      	ldr	r0, [sp, #8]
 8007e24:	f7f8 ff38 	bl	8000c98 <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 8007e28:	4629      	mov	r1, r5
 8007e2a:	b2c0      	uxtb	r0, r0
 8007e2c:	f7fe fa30 	bl	8006290 <settings_store_startup_line>
 8007e30:	e77e      	b.n	8007d30 <system_execute_line+0x1c>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8007e32:	f7f9 fce9 	bl	8001808 <gc_execute_line>
 8007e36:	4604      	mov	r4, r0
 8007e38:	e77a      	b.n	8007d30 <system_execute_line+0x1c>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8007e3a:	78ab      	ldrb	r3, [r5, #2]
 8007e3c:	2b4c      	cmp	r3, #76	; 0x4c
 8007e3e:	d1b9      	bne.n	8007db4 <system_execute_line+0xa0>
 8007e40:	78eb      	ldrb	r3, [r5, #3]
 8007e42:	2b50      	cmp	r3, #80	; 0x50
 8007e44:	d1b6      	bne.n	8007db4 <system_execute_line+0xa0>
 8007e46:	792c      	ldrb	r4, [r5, #4]
 8007e48:	2c00      	cmp	r4, #0
 8007e4a:	d1b3      	bne.n	8007db4 <system_execute_line+0xa0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8007e4c:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 8007e4e:	4a6b      	ldr	r2, [pc, #428]	; (8007ffc <system_execute_line+0x2e8>)
 8007e50:	7813      	ldrb	r3, [r2, #0]
 8007e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e56:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 8007e58:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8007e5a:	e769      	b.n	8007d30 <system_execute_line+0x1c>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8007e5c:	78ab      	ldrb	r3, [r5, #2]
 8007e5e:	2b53      	cmp	r3, #83	; 0x53
 8007e60:	d1a8      	bne.n	8007db4 <system_execute_line+0xa0>
 8007e62:	78eb      	ldrb	r3, [r5, #3]
 8007e64:	2b54      	cmp	r3, #84	; 0x54
 8007e66:	d1a5      	bne.n	8007db4 <system_execute_line+0xa0>
 8007e68:	792b      	ldrb	r3, [r5, #4]
 8007e6a:	2b3d      	cmp	r3, #61	; 0x3d
 8007e6c:	d1a2      	bne.n	8007db4 <system_execute_line+0xa0>
 8007e6e:	79ac      	ldrb	r4, [r5, #6]
 8007e70:	2c00      	cmp	r4, #0
 8007e72:	d19f      	bne.n	8007db4 <system_execute_line+0xa0>
          switch (line[5]) {
 8007e74:	796b      	ldrb	r3, [r5, #5]
 8007e76:	2b24      	cmp	r3, #36	; 0x24
 8007e78:	f000 80ea 	beq.w	8008050 <system_execute_line+0x33c>
 8007e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7e:	f000 80e3 	beq.w	8008048 <system_execute_line+0x334>
 8007e82:	2b23      	cmp	r3, #35	; 0x23
 8007e84:	d196      	bne.n	8007db4 <system_execute_line+0xa0>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 8007e86:	2002      	movs	r0, #2
 8007e88:	f7fe fa2c 	bl	80062e4 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 8007e8c:	2009      	movs	r0, #9
 8007e8e:	f7fd fa67 	bl	8005360 <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 8007e92:	f7fb fca9 	bl	80037e8 <mc_reset>
          break;
 8007e96:	e74b      	b.n	8007d30 <system_execute_line+0x1c>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 8007e98:	2202      	movs	r2, #2
 8007e9a:	78ac      	ldrb	r4, [r5, #2]
 8007e9c:	f88d 2007 	strb.w	r2, [sp, #7]
 8007ea0:	2c00      	cmp	r4, #0
 8007ea2:	f040 808e 	bne.w	8007fc2 <system_execute_line+0x2ae>
              if (!(settings_read_startup_line(helper_var, line))) {
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f7fe faad 	bl	8006408 <settings_read_startup_line>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f000 809e 	beq.w	8007ff0 <system_execute_line+0x2dc>
                report_startup_line(helper_var,line);
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7fd fe6a 	bl	8005b90 <report_startup_line>
              if (!(settings_read_startup_line(helper_var, line))) {
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	f7fe faa2 	bl	8006408 <settings_read_startup_line>
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f000 808e 	beq.w	8007fe8 <system_execute_line+0x2d4>
                report_startup_line(helper_var,line);
 8007ecc:	4629      	mov	r1, r5
 8007ece:	2001      	movs	r0, #1
 8007ed0:	f7fd fe5e 	bl	8005b90 <report_startup_line>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8007ed4:	2400      	movs	r4, #0
}
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	b004      	add	sp, #16
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
          if ( line[++char_counter] == 0 ) {
 8007edc:	2302      	movs	r3, #2
 8007ede:	78ac      	ldrb	r4, [r5, #2]
 8007ee0:	f88d 3007 	strb.w	r3, [sp, #7]
 8007ee4:	2c00      	cmp	r4, #0
 8007ee6:	d071      	beq.n	8007fcc <system_execute_line+0x2b8>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8007ee8:	2c3d      	cmp	r4, #61	; 0x3d
 8007eea:	f04f 0303 	mov.w	r3, #3
 8007eee:	f47f af61 	bne.w	8007db4 <system_execute_line+0xa0>
                line[char_counter-helper_var] = line[char_counter];
 8007ef2:	5cec      	ldrb	r4, [r5, r3]
 8007ef4:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 8007ef6:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 8007ef8:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	d1f7      	bne.n	8007ef2 <system_execute_line+0x1de>
              settings_store_build_info(line);
 8007f02:	4628      	mov	r0, r5
 8007f04:	f88d 3007 	strb.w	r3, [sp, #7]
 8007f08:	f7fe f9d4 	bl	80062b4 <settings_store_build_info>
 8007f0c:	e710      	b.n	8007d30 <system_execute_line+0x1c>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8007f0e:	4b3c      	ldr	r3, [pc, #240]	; (8008000 <system_execute_line+0x2ec>)
 8007f10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007f14:	06db      	lsls	r3, r3, #27
 8007f16:	f140 8095 	bpl.w	8008044 <system_execute_line+0x330>
          sys.state = STATE_HOMING; // Set system state variable
 8007f1a:	2304      	movs	r3, #4
          if (line[2] == 0) {
 8007f1c:	78a8      	ldrb	r0, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 8007f1e:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 8007f20:	2800      	cmp	r0, #0
 8007f22:	f47f af47 	bne.w	8007db4 <system_execute_line+0xa0>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 8007f26:	f7fb fbd5 	bl	80036d4 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 8007f2a:	7873      	ldrb	r3, [r6, #1]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1d1      	bne.n	8007ed4 <system_execute_line+0x1c0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8007f30:	7033      	strb	r3, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 8007f32:	f7fe fe9f 	bl	8006c74 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 8007f36:	78ac      	ldrb	r4, [r5, #2]
 8007f38:	2c00      	cmp	r4, #0
 8007f3a:	d1cb      	bne.n	8007ed4 <system_execute_line+0x1c0>
    if (!(settings_read_startup_line(n, line))) {
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f7fe fa62 	bl	8006408 <settings_read_startup_line>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f000 8087 	beq.w	8008058 <system_execute_line+0x344>
      if (line[0] != 0) {
 8007f4a:	782b      	ldrb	r3, [r5, #0]
 8007f4c:	b9c3      	cbnz	r3, 8007f80 <system_execute_line+0x26c>
  for (n=0; n < N_STARTUP_LINE; n++) {
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d1c0      	bne.n	8007ed4 <system_execute_line+0x1c0>
 8007f52:	2401      	movs	r4, #1
 8007f54:	e7f2      	b.n	8007f3c <system_execute_line+0x228>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8007f56:	7885      	ldrb	r5, [r0, #2]
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	f47f af2b 	bne.w	8007db4 <system_execute_line+0xa0>
      switch( line[1] ) {
 8007f5e:	2c47      	cmp	r4, #71	; 0x47
 8007f60:	d025      	beq.n	8007fae <system_execute_line+0x29a>
 8007f62:	d915      	bls.n	8007f90 <system_execute_line+0x27c>
 8007f64:	2c58      	cmp	r4, #88	; 0x58
 8007f66:	d1b5      	bne.n	8007ed4 <system_execute_line+0x1c0>
          if (sys.state == STATE_ALARM) {
 8007f68:	4e23      	ldr	r6, [pc, #140]	; (8007ff8 <system_execute_line+0x2e4>)
 8007f6a:	7833      	ldrb	r3, [r6, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d1b1      	bne.n	8007ed4 <system_execute_line+0x1c0>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 8007f70:	2003      	movs	r0, #3
 8007f72:	f7fd f9f5 	bl	8005360 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8007f76:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 8007f78:	7035      	strb	r5, [r6, #0]
 8007f7a:	e6d9      	b.n	8007d30 <system_execute_line+0x1c>
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8007f7c:	2402      	movs	r4, #2
 8007f7e:	e6d7      	b.n	8007d30 <system_execute_line+0x1c>
        uint8_t status_code = gc_execute_line(line);
 8007f80:	4628      	mov	r0, r5
 8007f82:	f7f9 fc41 	bl	8001808 <gc_execute_line>
 8007f86:	4601      	mov	r1, r0
        report_execute_startup_message(line,status_code);
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f7fd fe19 	bl	8005bc0 <report_execute_startup_message>
 8007f8e:	e7de      	b.n	8007f4e <system_execute_line+0x23a>
 8007f90:	2c43      	cmp	r4, #67	; 0x43
 8007f92:	d19f      	bne.n	8007ed4 <system_execute_line+0x1c0>
          if ( sys.state == STATE_CHECK_MODE ) {
 8007f94:	4b18      	ldr	r3, [pc, #96]	; (8007ff8 <system_execute_line+0x2e4>)
 8007f96:	781c      	ldrb	r4, [r3, #0]
 8007f98:	2c02      	cmp	r4, #2
 8007f9a:	d01e      	beq.n	8007fda <system_execute_line+0x2c6>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8007f9c:	2c00      	cmp	r4, #0
 8007f9e:	f47f af02 	bne.w	8007da6 <system_execute_line+0x92>
            sys.state = STATE_CHECK_MODE;
 8007fa2:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 8007fa4:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 8007fa6:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 8007fa8:	f7fd f9da 	bl	8005360 <report_feedback_message>
 8007fac:	e6c0      	b.n	8007d30 <system_execute_line+0x1c>
          report_gcode_modes();
 8007fae:	f7fd fd37 	bl	8005a20 <report_gcode_modes>
          break;
 8007fb2:	e78f      	b.n	8007ed4 <system_execute_line+0x1c0>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8007fb4:	78ac      	ldrb	r4, [r5, #2]
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	f47f aefc 	bne.w	8007db4 <system_execute_line+0xa0>
          else { report_ngc_parameters(); }
 8007fbc:	f7fd fc66 	bl	800588c <report_ngc_parameters>
          break;
 8007fc0:	e6b6      	b.n	8007d30 <system_execute_line+0x1c>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f47f aeef 	bne.w	8007da6 <system_execute_line+0x92>
            helper_var = true;  // Set helper_var to flag storing method.
 8007fc8:	2401      	movs	r4, #1
 8007fca:	e703      	b.n	8007dd4 <system_execute_line+0xc0>
            settings_read_build_info(line);
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f7fe fa37 	bl	8006440 <settings_read_build_info>
            report_build_info(line);
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f7fd fe18 	bl	8005c08 <report_build_info>
 8007fd8:	e6aa      	b.n	8007d30 <system_execute_line+0x1c>
            mc_reset();
 8007fda:	f7fb fc05 	bl	80037e8 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8007fde:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8007fe0:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 8007fe2:	f7fd f9bd 	bl	8005360 <report_feedback_message>
 8007fe6:	e6a3      	b.n	8007d30 <system_execute_line+0x1c>
                report_status_message(STATUS_SETTING_READ_FAIL);
 8007fe8:	2007      	movs	r0, #7
 8007fea:	f7fd f98b 	bl	8005304 <report_status_message>
 8007fee:	e69f      	b.n	8007d30 <system_execute_line+0x1c>
 8007ff0:	2007      	movs	r0, #7
 8007ff2:	f7fd f987 	bl	8005304 <report_status_message>
 8007ff6:	e761      	b.n	8007ebc <system_execute_line+0x1a8>
 8007ff8:	20001314 	.word	0x20001314
 8007ffc:	20001329 	.word	0x20001329
 8008000:	200014c8 	.word	0x200014c8
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8008004:	4628      	mov	r0, r5
 8008006:	f10d 0107 	add.w	r1, sp, #7
 800800a:	aa03      	add	r2, sp, #12
 800800c:	f7fb fc1c 	bl	8003848 <read_float>
 8008010:	2800      	cmp	r0, #0
 8008012:	d0b3      	beq.n	8007f7c <system_execute_line+0x268>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 8008014:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008018:	5ceb      	ldrb	r3, [r5, r3]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f47f aeca 	bne.w	8007db4 <system_execute_line+0xa0>
 8008020:	9c02      	ldr	r4, [sp, #8]
 8008022:	4910      	ldr	r1, [pc, #64]	; (8008064 <system_execute_line+0x350>)
 8008024:	4620      	mov	r0, r4
 8008026:	f7f8 fdf1 	bl	8000c0c <__aeabi_fcmpgt>
 800802a:	2800      	cmp	r0, #0
 800802c:	f47f aec2 	bne.w	8007db4 <system_execute_line+0xa0>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8008030:	4620      	mov	r0, r4
 8008032:	f7f8 fe31 	bl	8000c98 <__aeabi_f2uiz>
 8008036:	9c03      	ldr	r4, [sp, #12]
 8008038:	b2c0      	uxtb	r0, r0
 800803a:	4621      	mov	r1, r4
 800803c:	f7fe fa32 	bl	80064a4 <settings_store_global_setting>
 8008040:	4604      	mov	r4, r0
 8008042:	e675      	b.n	8007d30 <system_execute_line+0x1c>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8008044:	2405      	movs	r4, #5
 8008046:	e673      	b.n	8007d30 <system_execute_line+0x1c>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8008048:	20ff      	movs	r0, #255	; 0xff
 800804a:	f7fe f94b 	bl	80062e4 <settings_restore>
 800804e:	e71d      	b.n	8007e8c <system_execute_line+0x178>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 8008050:	2001      	movs	r0, #1
 8008052:	f7fe f947 	bl	80062e4 <settings_restore>
 8008056:	e719      	b.n	8007e8c <system_execute_line+0x178>
      line[0] = 0;
 8008058:	7028      	strb	r0, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 800805a:	2107      	movs	r1, #7
 800805c:	4628      	mov	r0, r5
 800805e:	f7fd fdaf 	bl	8005bc0 <report_execute_startup_message>
 8008062:	e774      	b.n	8007f4e <system_execute_line+0x23a>
 8008064:	437f0000 	.word	0x437f0000

08008068 <system_flag_wco_change>:
{
 8008068:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 800806a:	f7fd f92f 	bl	80052cc <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 800806e:	2200      	movs	r2, #0
 8008070:	4b01      	ldr	r3, [pc, #4]	; (8008078 <system_flag_wco_change+0x10>)
 8008072:	735a      	strb	r2, [r3, #13]
}
 8008074:	bd08      	pop	{r3, pc}
 8008076:	bf00      	nop
 8008078:	20001314 	.word	0x20001314

0800807c <system_convert_array_steps_to_mpos>:
{
 800807c:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 800807e:	4e0d      	ldr	r6, [pc, #52]	; (80080b4 <system_convert_array_steps_to_mpos+0x38>)
{
 8008080:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 8008082:	6808      	ldr	r0, [r1, #0]
{
 8008084:	460d      	mov	r5, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 8008086:	f7f8 fbb1 	bl	80007ec <__aeabi_i2f>
 800808a:	6831      	ldr	r1, [r6, #0]
 800808c:	f7f8 fcb6 	bl	80009fc <__aeabi_fdiv>
 8008090:	4603      	mov	r3, r0
 8008092:	6868      	ldr	r0, [r5, #4]
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8008094:	6023      	str	r3, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8008096:	f7f8 fba9 	bl	80007ec <__aeabi_i2f>
 800809a:	6871      	ldr	r1, [r6, #4]
 800809c:	f7f8 fcae 	bl	80009fc <__aeabi_fdiv>
 80080a0:	4603      	mov	r3, r0
 80080a2:	68a8      	ldr	r0, [r5, #8]
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80080a4:	6063      	str	r3, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 80080a6:	f7f8 fba1 	bl	80007ec <__aeabi_i2f>
 80080aa:	68b1      	ldr	r1, [r6, #8]
 80080ac:	f7f8 fca6 	bl	80009fc <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 80080b0:	60a0      	str	r0, [r4, #8]
}
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	200014c8 	.word	0x200014c8

080080b8 <system_check_travel_limits>:
{
 80080b8:	b570      	push	{r4, r5, r6, lr}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80080ba:	6806      	ldr	r6, [r0, #0]
{
 80080bc:	4604      	mov	r4, r0
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80080be:	2100      	movs	r1, #0
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7f8 fda3 	bl	8000c0c <__aeabi_fcmpgt>
 80080c6:	b9f0      	cbnz	r0, 8008106 <system_check_travel_limits+0x4e>
 80080c8:	4d10      	ldr	r5, [pc, #64]	; (800810c <system_check_travel_limits+0x54>)
 80080ca:	4630      	mov	r0, r6
 80080cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80080ce:	f7f8 fd7f 	bl	8000bd0 <__aeabi_fcmplt>
 80080d2:	b9c0      	cbnz	r0, 8008106 <system_check_travel_limits+0x4e>
 80080d4:	6866      	ldr	r6, [r4, #4]
 80080d6:	2100      	movs	r1, #0
 80080d8:	4630      	mov	r0, r6
 80080da:	f7f8 fd97 	bl	8000c0c <__aeabi_fcmpgt>
 80080de:	b990      	cbnz	r0, 8008106 <system_check_travel_limits+0x4e>
 80080e0:	4630      	mov	r0, r6
 80080e2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80080e4:	f7f8 fd74 	bl	8000bd0 <__aeabi_fcmplt>
 80080e8:	b968      	cbnz	r0, 8008106 <system_check_travel_limits+0x4e>
 80080ea:	68a4      	ldr	r4, [r4, #8]
 80080ec:	2100      	movs	r1, #0
 80080ee:	4620      	mov	r0, r4
 80080f0:	f7f8 fd8c 	bl	8000c0c <__aeabi_fcmpgt>
 80080f4:	b938      	cbnz	r0, 8008106 <system_check_travel_limits+0x4e>
 80080f6:	4620      	mov	r0, r4
 80080f8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80080fa:	f7f8 fd69 	bl	8000bd0 <__aeabi_fcmplt>
 80080fe:	3800      	subs	r0, #0
 8008100:	bf18      	it	ne
 8008102:	2001      	movne	r0, #1
}
 8008104:	bd70      	pop	{r4, r5, r6, pc}
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8008106:	2001      	movs	r0, #1
}
 8008108:	bd70      	pop	{r4, r5, r6, pc}
 800810a:	bf00      	nop
 800810c:	200014c8 	.word	0x200014c8

08008110 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8008110:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 8008112:	4a03      	ldr	r2, [pc, #12]	; (8008120 <system_set_exec_state_flag+0x10>)
 8008114:	7813      	ldrb	r3, [r2, #0]
 8008116:	4318      	orrs	r0, r3
 8008118:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 800811a:	b662      	cpsie	i
}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	20001329 	.word	0x20001329

08008124 <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8008124:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 8008126:	4a03      	ldr	r2, [pc, #12]	; (8008134 <system_clear_exec_state_flag+0x10>)
 8008128:	7813      	ldrb	r3, [r2, #0]
 800812a:	ea23 0000 	bic.w	r0, r3, r0
 800812e:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8008130:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8008132:	4770      	bx	lr
 8008134:	20001329 	.word	0x20001329

08008138 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 8008138:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 800813a:	4b02      	ldr	r3, [pc, #8]	; (8008144 <system_set_exec_alarm+0xc>)
 800813c:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 800813e:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20001344 	.word	0x20001344

08008148 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 8008148:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 800814a:	2200      	movs	r2, #0
 800814c:	4b01      	ldr	r3, [pc, #4]	; (8008154 <system_clear_exec_alarm+0xc>)
 800814e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8008150:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8008152:	4770      	bx	lr
 8008154:	20001344 	.word	0x20001344

08008158 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 8008158:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 800815a:	4a03      	ldr	r2, [pc, #12]	; (8008168 <system_set_exec_motion_override_flag+0x10>)
 800815c:	7813      	ldrb	r3, [r2, #0]
 800815e:	4318      	orrs	r0, r3
 8008160:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8008162:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	20001310 	.word	0x20001310

0800816c <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 800816c:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 800816e:	4a03      	ldr	r2, [pc, #12]	; (800817c <system_set_exec_accessory_override_flag+0x10>)
 8008170:	7813      	ldrb	r3, [r2, #0]
 8008172:	4318      	orrs	r0, r3
 8008174:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8008176:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20001328 	.word	0x20001328

08008180 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 8008180:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 8008182:	2200      	movs	r2, #0
 8008184:	4b01      	ldr	r3, [pc, #4]	; (800818c <system_clear_exec_motion_overrides+0xc>)
 8008186:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8008188:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800818a:	4770      	bx	lr
 800818c:	20001310 	.word	0x20001310

08008190 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 8008190:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 8008192:	2200      	movs	r2, #0
 8008194:	4b01      	ldr	r3, [pc, #4]	; (800819c <system_clear_exec_accessory_overrides+0xc>)
 8008196:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8008198:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800819a:	4770      	bx	lr
 800819c:	20001328 	.word	0x20001328

080081a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80081a0:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80081a2:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 80081a4:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 80081a8:	4b3a      	ldr	r3, [pc, #232]	; (8008294 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80081aa:	4a3b      	ldr	r2, [pc, #236]	; (8008298 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 80081ac:	6819      	ldr	r1, [r3, #0]
{
 80081ae:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 80081b0:	f041 0101 	orr.w	r1, r1, #1
 80081b4:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80081b6:	6859      	ldr	r1, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80081b8:	4618      	mov	r0, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80081ba:	400a      	ands	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80081c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081c8:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081d0:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80081d8:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000;
 80081da:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80081dc:	9400      	str	r4, [sp, #0]
 80081de:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e003      	b.n	80081f2 <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80081ea:	9b00      	ldr	r3, [sp, #0]
 80081ec:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80081f0:	d009      	beq.n	8008206 <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80081f2:	6803      	ldr	r3, [r0, #0]
 80081f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f8:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	3301      	adds	r3, #1
 80081fe:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f1      	beq.n	80081ea <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8008206:	4b23      	ldr	r3, [pc, #140]	; (8008294 <SystemInit+0xf4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800820e:	bf18      	it	ne
 8008210:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8008212:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d006      	beq.n	8008228 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800821a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800821e:	4b1f      	ldr	r3, [pc, #124]	; (800829c <SystemInit+0xfc>)
 8008220:	609a      	str	r2, [r3, #8]
}
 8008222:	b002      	add	sp, #8
 8008224:	bc30      	pop	{r4, r5}
 8008226:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8008228:	491d      	ldr	r1, [pc, #116]	; (80082a0 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800822c:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800822e:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8008230:	f040 0010 	orr.w	r0, r0, #16
 8008234:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8008236:	6808      	ldr	r0, [r1, #0]
 8008238:	f020 0003 	bic.w	r0, r0, #3
 800823c:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800823e:	6808      	ldr	r0, [r1, #0]
 8008240:	f040 0002 	orr.w	r0, r0, #2
 8008244:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8008246:	6859      	ldr	r1, [r3, #4]
 8008248:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800824a:	6859      	ldr	r1, [r3, #4]
 800824c:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800824e:	6859      	ldr	r1, [r3, #4]
 8008250:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008254:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8008256:	6859      	ldr	r1, [r3, #4]
 8008258:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 800825c:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800825e:	6859      	ldr	r1, [r3, #4]
 8008260:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8008264:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8008266:	6819      	ldr	r1, [r3, #0]
 8008268:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800826c:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	019b      	lsls	r3, r3, #6
 8008272:	d5fc      	bpl.n	800826e <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8008274:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8008276:	4907      	ldr	r1, [pc, #28]	; (8008294 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8008278:	f023 0303 	bic.w	r3, r3, #3
 800827c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800827e:	6853      	ldr	r3, [r2, #4]
 8008280:	f043 0302 	orr.w	r3, r3, #2
 8008284:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8008286:	684b      	ldr	r3, [r1, #4]
 8008288:	f003 030c 	and.w	r3, r3, #12
 800828c:	2b08      	cmp	r3, #8
 800828e:	d1fa      	bne.n	8008286 <SystemInit+0xe6>
 8008290:	e7c3      	b.n	800821a <SystemInit+0x7a>
 8008292:	bf00      	nop
 8008294:	40021000 	.word	0x40021000
 8008298:	f8ff0000 	.word	0xf8ff0000
 800829c:	e000ed00 	.word	0xe000ed00
 80082a0:	40022000 	.word	0x40022000

080082a4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80082a4:	b508      	push	{r3, lr}
  if (Length == 0)
 80082a6:	b138      	cbz	r0, 80082b8 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <Standard_GetConfiguration+0x20>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 80082b0:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <Standard_GetConfiguration+0x24>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	300a      	adds	r0, #10
}
 80082b6:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 80082b8:	2201      	movs	r2, #1
 80082ba:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <Standard_GetConfiguration+0x24>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	821a      	strh	r2, [r3, #16]
}
 80082c0:	bd08      	pop	{r3, pc}
 80082c2:	bf00      	nop
 80082c4:	20001550 	.word	0x20001550
 80082c8:	20001554 	.word	0x20001554

080082cc <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 80082cc:	b508      	push	{r3, lr}
  if (Length == 0)
 80082ce:	b138      	cbz	r0, 80082e0 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <Standard_GetInterface+0x20>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 80082d8:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <Standard_GetInterface+0x24>)
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	300c      	adds	r0, #12
}
 80082de:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 80082e0:	2201      	movs	r2, #1
 80082e2:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <Standard_GetInterface+0x24>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	821a      	strh	r2, [r3, #16]
}
 80082e8:	bd08      	pop	{r3, pc}
 80082ea:	bf00      	nop
 80082ec:	20001550 	.word	0x20001550
 80082f0:	20001554 	.word	0x20001554

080082f4 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 80082f4:	b508      	push	{r3, lr}
  if (Length == 0)
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d036      	beq.n	8008368 <Standard_GetStatus+0x74>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80082fa:	2000      	movs	r0, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80082fc:	4b1e      	ldr	r3, [pc, #120]	; (8008378 <Standard_GetStatus+0x84>)
  StatusInfo.w = 0;
 80082fe:	491f      	ldr	r1, [pc, #124]	; (800837c <Standard_GetStatus+0x88>)
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008300:	681a      	ldr	r2, [r3, #0]
  StatusInfo.w = 0;
 8008302:	8008      	strh	r0, [r1, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8008304:	7813      	ldrb	r3, [r2, #0]
 8008306:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800830a:	d016      	beq.n	800833a <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800830c:	2b01      	cmp	r3, #1
 800830e:	d030      	beq.n	8008372 <Standard_GetStatus+0x7e>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008310:	2b02      	cmp	r3, #2
 8008312:	d123      	bne.n	800835c <Standard_GetStatus+0x68>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8008314:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8008316:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008320:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 8008324:	0612      	lsls	r2, r2, #24
      if (_GetTxStallStatus(Related_Endpoint))
 8008326:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 8008328:	d419      	bmi.n	800835e <Standard_GetStatus+0x6a>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800832a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800832e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008332:	d10e      	bne.n	8008352 <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8008334:	2301      	movs	r3, #1
 8008336:	700b      	strb	r3, [r1, #0]
 8008338:	e00b      	b.n	8008352 <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 800833a:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 800833c:	f012 0320 	ands.w	r3, r2, #32
 8008340:	bf1a      	itte	ne
 8008342:	2003      	movne	r0, #3
 8008344:	2302      	movne	r3, #2
 8008346:	2001      	moveq	r0, #1
      SetBit(StatusInfo0, 0);
 8008348:	f012 0f40 	tst.w	r2, #64	; 0x40
 800834c:	bf18      	it	ne
 800834e:	4603      	movne	r3, r0
 8008350:	700b      	strb	r3, [r1, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <Standard_GetStatus+0x8c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800835a:	4808      	ldr	r0, [pc, #32]	; (800837c <Standard_GetStatus+0x88>)
}
 800835c:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 800835e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008362:	2b10      	cmp	r3, #16
 8008364:	d1f5      	bne.n	8008352 <Standard_GetStatus+0x5e>
 8008366:	e7e5      	b.n	8008334 <Standard_GetStatus+0x40>
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8008368:	2202      	movs	r2, #2
 800836a:	4b03      	ldr	r3, [pc, #12]	; (8008378 <Standard_GetStatus+0x84>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	821a      	strh	r2, [r3, #16]
}
 8008370:	bd08      	pop	{r3, pc}
    return (uint8_t *)&StatusInfo;
 8008372:	4608      	mov	r0, r1
}
 8008374:	bd08      	pop	{r3, pc}
 8008376:	bf00      	nop
 8008378:	20001554 	.word	0x20001554
 800837c:	20001524 	.word	0x20001524
 8008380:	20001550 	.word	0x20001550

08008384 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8008384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8008388:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008434 <DataStageIn+0xb0>
 800838c:	f8d8 5000 	ldr.w	r5, [r8]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8008390:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8008392:	b92c      	cbnz	r4, 80083a0 <DataStageIn+0x1c>
  uint32_t ControlState = pInformation->ControlState;
 8008394:	7a2f      	ldrb	r7, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8008396:	2f04      	cmp	r7, #4
 8008398:	d02c      	beq.n	80083f4 <DataStageIn+0x70>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800839a:	2704      	movs	r7, #4
 800839c:	8aaa      	ldrh	r2, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800839e:	e004      	b.n	80083aa <DataStageIn+0x26>
  Length = pEPinfo->PacketSize;
 80083a0:	8aaa      	ldrh	r2, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80083a2:	4294      	cmp	r4, r2
 80083a4:	bf94      	ite	ls
 80083a6:	2704      	movls	r7, #4
 80083a8:	2702      	movhi	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80083aa:	4294      	cmp	r4, r2
 80083ac:	bf28      	it	cs
 80083ae:	4614      	movcs	r4, r2
 80083b0:	69ab      	ldr	r3, [r5, #24]
 80083b2:	4620      	mov	r0, r4
 80083b4:	4798      	blx	r3
 80083b6:	4606      	mov	r6, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80083b8:	2000      	movs	r0, #0
 80083ba:	f000 fdd1 	bl	8008f60 <GetEPTxAddr>
 80083be:	4622      	mov	r2, r4
 80083c0:	4601      	mov	r1, r0
 80083c2:	4630      	mov	r0, r6
 80083c4:	f000 fce4 	bl	8008d90 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 80083c8:	4621      	mov	r1, r4
 80083ca:	2000      	movs	r0, #0
 80083cc:	f000 fde4 	bl	8008f98 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 80083d0:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80083d2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 80083d6:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 80083d8:	8a6a      	ldrh	r2, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 80083da:	1b1b      	subs	r3, r3, r4
 80083dc:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 80083de:	4414      	add	r4, r2
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80083e0:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 80083e2:	4a10      	ldr	r2, [pc, #64]	; (8008424 <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 80083e4:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 80083e6:	f8d8 5000 	ldr.w	r5, [r8]
 80083ea:	8010      	strh	r0, [r2, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80083ec:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80083ee:	722f      	strb	r7, [r5, #8]
}
 80083f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <DataStageIn+0xa4>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	2a01      	cmp	r2, #1
 80083fa:	d004      	beq.n	8008406 <DataStageIn+0x82>
      vSetEPTxStatus(EP_TX_STALL);
 80083fc:	2210      	movs	r2, #16
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <DataStageIn+0xa0>)
 8008400:	2707      	movs	r7, #7
 8008402:	801a      	strh	r2, [r3, #0]
 8008404:	e7f3      	b.n	80083ee <DataStageIn+0x6a>
      Send0LengthData();
 8008406:	2030      	movs	r0, #48	; 0x30
 8008408:	4908      	ldr	r1, [pc, #32]	; (800842c <DataStageIn+0xa8>)
 800840a:	4a09      	ldr	r2, [pc, #36]	; (8008430 <DataStageIn+0xac>)
 800840c:	6809      	ldr	r1, [r1, #0]
 800840e:	b289      	uxth	r1, r1
 8008410:	440a      	add	r2, r1
 8008412:	4904      	ldr	r1, [pc, #16]	; (8008424 <DataStageIn+0xa0>)
 8008414:	0052      	lsls	r2, r2, #1
 8008416:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8008418:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 800841a:	8008      	strh	r0, [r1, #0]
      Data_Mul_MaxPacketSize = FALSE;
 800841c:	e7e7      	b.n	80083ee <DataStageIn+0x6a>
 800841e:	bf00      	nop
 8008420:	2000155a 	.word	0x2000155a
 8008424:	2000155c 	.word	0x2000155c
 8008428:	20000e80 	.word	0x20000e80
 800842c:	40005c50 	.word	0x40005c50
 8008430:	20003002 	.word	0x20003002
 8008434:	20001554 	.word	0x20001554

08008438 <Standard_SetInterface>:
{
 8008438:	b538      	push	{r3, r4, r5, lr}
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800843a:	4a0f      	ldr	r2, [pc, #60]	; (8008478 <Standard_SetInterface+0x40>)
 800843c:	4c0f      	ldr	r4, [pc, #60]	; (800847c <Standard_SetInterface+0x44>)
 800843e:	6812      	ldr	r2, [r2, #0]
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	78d9      	ldrb	r1, [r3, #3]
 8008444:	7958      	ldrb	r0, [r3, #5]
 8008446:	6993      	ldr	r3, [r2, #24]
 8008448:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	7a9a      	ldrb	r2, [r3, #10]
 800844e:	b17a      	cbz	r2, 8008470 <Standard_SetInterface+0x38>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8008450:	b970      	cbnz	r0, 8008470 <Standard_SetInterface+0x38>
 8008452:	791a      	ldrb	r2, [r3, #4]
 8008454:	b962      	cbnz	r2, 8008470 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 8008456:	789d      	ldrb	r5, [r3, #2]
 8008458:	b955      	cbnz	r5, 8008470 <Standard_SetInterface+0x38>
      pUser_Standard_Requests->User_SetInterface();
 800845a:	4b09      	ldr	r3, [pc, #36]	; (8008480 <Standard_SetInterface+0x48>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8008462:	6823      	ldr	r3, [r4, #0]
}
 8008464:	4628      	mov	r0, r5
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8008466:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8008468:	78da      	ldrb	r2, [r3, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800846a:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800846c:	731a      	strb	r2, [r3, #12]
}
 800846e:	bd38      	pop	{r3, r4, r5, pc}
  return USB_UNSUPPORT;
 8008470:	2502      	movs	r5, #2
}
 8008472:	4628      	mov	r0, r5
 8008474:	bd38      	pop	{r3, r4, r5, pc}
 8008476:	bf00      	nop
 8008478:	2000152c 	.word	0x2000152c
 800847c:	20001554 	.word	0x20001554
 8008480:	20001550 	.word	0x20001550

08008484 <Standard_ClearFeature>:
  uint32_t     Type_Rec = Type_Recipient;
 8008484:	4b2f      	ldr	r3, [pc, #188]	; (8008544 <Standard_ClearFeature+0xc0>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800848a:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800848e:	d02e      	beq.n	80084ee <Standard_ClearFeature+0x6a>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008490:	2802      	cmp	r0, #2
 8008492:	d001      	beq.n	8008498 <Standard_ClearFeature+0x14>
  return USB_UNSUPPORT;
 8008494:	2002      	movs	r0, #2
 8008496:	4770      	bx	lr
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8008498:	885a      	ldrh	r2, [r3, #2]
 800849a:	bb3a      	cbnz	r2, 80084ec <Standard_ClearFeature+0x68>
        || (pInformation->USBwIndex1 != 0))
 800849c:	791a      	ldrb	r2, [r3, #4]
 800849e:	bb2a      	cbnz	r2, 80084ec <Standard_ClearFeature+0x68>
    wIndex0 = pInformation->USBwIndex0;
 80084a0:	795a      	ldrb	r2, [r3, #5]
{
 80084a2:	b570      	push	{r4, r5, r6, lr}
    if (ValBit(pInformation->USBwIndex0, 7))
 80084a4:	b255      	sxtb	r5, r2
    rEP = wIndex0 & ~0x80;
 80084a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 80084aa:	0094      	lsls	r4, r2, #2
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80084ac:	4e26      	ldr	r6, [pc, #152]	; (8008548 <Standard_ClearFeature+0xc4>)
      Status = _GetEPTxStatus(Related_Endpoint);
 80084ae:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80084b2:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80084b6:	6821      	ldr	r1, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80084b8:	7836      	ldrb	r6, [r6, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 80084ba:	2d00      	cmp	r5, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 80084bc:	bfb4      	ite	lt
 80084be:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 80084c2:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80084c6:	4296      	cmp	r6, r2
 80084c8:	d90f      	bls.n	80084ea <Standard_ClearFeature+0x66>
 80084ca:	b171      	cbz	r1, 80084ea <Standard_ClearFeature+0x66>
        || (pInformation->Current_Configuration == 0))
 80084cc:	7a9b      	ldrb	r3, [r3, #10]
 80084ce:	b163      	cbz	r3, 80084ea <Standard_ClearFeature+0x66>
    if (wIndex0 & 0x80)
 80084d0:	2d00      	cmp	r5, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 80084d2:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 80084d4:	db10      	blt.n	80084f8 <Standard_ClearFeature+0x74>
      if (_GetRxStallStatus(Related_Endpoint))
 80084d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084de:	d018      	beq.n	8008512 <Standard_ClearFeature+0x8e>
    pUser_Standard_Requests->User_ClearFeature();
 80084e0:	4b1a      	ldr	r3, [pc, #104]	; (800854c <Standard_ClearFeature+0xc8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	4798      	blx	r3
    return USB_SUCCESS;
 80084e8:	2000      	movs	r0, #0
}
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	4770      	bx	lr
    ClrBit(pInformation->Current_Feature, 5);
 80084ee:	7a5a      	ldrb	r2, [r3, #9]
 80084f0:	f022 0220 	bic.w	r2, r2, #32
 80084f4:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80084f6:	4770      	bx	lr
      if (_GetTxStallStatus(Related_Endpoint ))
 80084f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084fc:	2b10      	cmp	r3, #16
 80084fe:	d1ef      	bne.n	80084e0 <Standard_ClearFeature+0x5c>
        ClearDTOG_TX(Related_Endpoint);
 8008500:	b2d4      	uxtb	r4, r2
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fcfa 	bl	8008efc <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8008508:	4620      	mov	r0, r4
 800850a:	2130      	movs	r1, #48	; 0x30
 800850c:	f000 fc78 	bl	8008e00 <SetEPTxStatus>
 8008510:	e7e6      	b.n	80084e0 <Standard_ClearFeature+0x5c>
        if (Related_Endpoint == ENDP0)
 8008512:	b99a      	cbnz	r2, 800853c <Standard_ClearFeature+0xb8>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8008514:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <Standard_ClearFeature+0xcc>)
 8008516:	4610      	mov	r0, r2
 8008518:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800851c:	f000 fd4a 	bl	8008fb4 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852a:	b29b      	uxth	r3, r3
 800852c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	e7d1      	b.n	80084e0 <Standard_ClearFeature+0x5c>
          ClearDTOG_RX(Related_Endpoint);
 800853c:	4610      	mov	r0, r2
 800853e:	f000 fccb 	bl	8008ed8 <ClearDTOG_RX>
 8008542:	e7ed      	b.n	8008520 <Standard_ClearFeature+0x9c>
 8008544:	20001554 	.word	0x20001554
 8008548:	2000009c 	.word	0x2000009c
 800854c:	20001550 	.word	0x20001550
 8008550:	2000006c 	.word	0x2000006c

08008554 <Standard_SetEndPointFeature>:
{
 8008554:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 8008556:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <Standard_SetEndPointFeature+0x80>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8008558:	4d1f      	ldr	r5, [pc, #124]	; (80085d8 <Standard_SetEndPointFeature+0x84>)
  wIndex0 = pInformation->USBwIndex0;
 800855a:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800855c:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 800855e:	7942      	ldrb	r2, [r0, #5]
  if (ValBit(pInformation->USBwIndex0, 7))
 8008560:	b254      	sxtb	r4, r2
  rEP = wIndex0 & ~0x80;
 8008562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 8008566:	0093      	lsls	r3, r2, #2
 8008568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800856c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8008570:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 8008572:	2c00      	cmp	r4, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 8008574:	bfb4      	ite	lt
 8008576:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 800857a:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800857e:	4295      	cmp	r5, r2
 8008580:	d919      	bls.n	80085b6 <Standard_SetEndPointFeature+0x62>
      || pInformation->USBwValue != 0 || Status == 0
 8008582:	8842      	ldrh	r2, [r0, #2]
 8008584:	b9ba      	cbnz	r2, 80085b6 <Standard_SetEndPointFeature+0x62>
 8008586:	b1b1      	cbz	r1, 80085b6 <Standard_SetEndPointFeature+0x62>
      || pInformation->Current_Configuration == 0)
 8008588:	7a82      	ldrb	r2, [r0, #10]
 800858a:	b1a2      	cbz	r2, 80085b6 <Standard_SetEndPointFeature+0x62>
    if (wIndex0 & 0x80)
 800858c:	2c00      	cmp	r4, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800858e:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 8008590:	db13      	blt.n	80085ba <Standard_SetEndPointFeature+0x66>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8008592:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008596:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800859a:	b292      	uxth	r2, r2
 800859c:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80085a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085a8:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 80085aa:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <Standard_SetEndPointFeature+0x88>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	4798      	blx	r3
  return USB_SUCCESS;
 80085b2:	2000      	movs	r0, #0
}
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
    return USB_UNSUPPORT;
 80085b6:	2002      	movs	r0, #2
}
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80085ba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80085be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c2:	b292      	uxth	r2, r2
 80085c4:	f082 0210 	eor.w	r2, r2, #16
 80085c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e7ea      	b.n	80085aa <Standard_SetEndPointFeature+0x56>
 80085d4:	20001554 	.word	0x20001554
 80085d8:	2000009c 	.word	0x2000009c
 80085dc:	20001550 	.word	0x20001550

080085e0 <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <Standard_GetDescriptorData+0x18>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 80085e6:	b110      	cbz	r0, 80085ee <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 80085e8:	6808      	ldr	r0, [r1, #0]
 80085ea:	4410      	add	r0, r2
}
 80085ec:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80085ee:	8889      	ldrh	r1, [r1, #4]
 80085f0:	1a8a      	subs	r2, r1, r2
 80085f2:	821a      	strh	r2, [r3, #16]
    return 0;
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	20001554 	.word	0x20001554

080085fc <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80085fc:	b570      	push	{r4, r5, r6, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 80085fe:	4ea4      	ldr	r6, [pc, #656]	; (8008890 <Setup0_Process+0x294>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008600:	4ba4      	ldr	r3, [pc, #656]	; (8008894 <Setup0_Process+0x298>)
  if (pInformation->ControlState != PAUSE)
 8008602:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008604:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 8008606:	7a23      	ldrb	r3, [r4, #8]
{
 8008608:	b082      	sub	sp, #8
  if (pInformation->ControlState != PAUSE)
 800860a:	2b09      	cmp	r3, #9
 800860c:	f040 8081 	bne.w	8008712 <Setup0_Process+0x116>
 8008610:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8008612:	2201      	movs	r2, #1
 8008614:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8008616:	2b00      	cmp	r3, #0
 8008618:	d150      	bne.n	80086bc <Setup0_Process+0xc0>
  uint32_t RequestNo = pInformation->USBbRequest;
 800861a:	7823      	ldrb	r3, [r4, #0]
 800861c:	7865      	ldrb	r5, [r4, #1]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800861e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8008622:	d13c      	bne.n	800869e <Setup0_Process+0xa2>
    if (RequestNo == SET_CONFIGURATION)
 8008624:	2d09      	cmp	r5, #9
 8008626:	f000 80ab 	beq.w	8008780 <Setup0_Process+0x184>
    else if (RequestNo == SET_ADDRESS)
 800862a:	2d05      	cmp	r5, #5
 800862c:	f000 80bd 	beq.w	80087aa <Setup0_Process+0x1ae>
    else if (RequestNo == SET_FEATURE)
 8008630:	2d03      	cmp	r5, #3
 8008632:	f000 8145 	beq.w	80088c0 <Setup0_Process+0x2c4>
    else if (RequestNo == CLEAR_FEATURE)
 8008636:	2d01      	cmp	r5, #1
 8008638:	f000 811b 	beq.w	8008872 <Setup0_Process+0x276>
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800863c:	4b96      	ldr	r3, [pc, #600]	; (8008898 <Setup0_Process+0x29c>)
 800863e:	4628      	mov	r0, r5
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8008646:	2803      	cmp	r0, #3
 8008648:	6834      	ldr	r4, [r6, #0]
 800864a:	f000 80d3 	beq.w	80087f4 <Setup0_Process+0x1f8>
  if (Result != USB_SUCCESS)
 800864e:	2800      	cmp	r0, #0
 8008650:	f040 80b7 	bne.w	80087c2 <Setup0_Process+0x1c6>
  USB_StatusIn();
 8008654:	2000      	movs	r0, #0
 8008656:	4a8f      	ldr	r2, [pc, #572]	; (8008894 <Setup0_Process+0x298>)
 8008658:	4b90      	ldr	r3, [pc, #576]	; (800889c <Setup0_Process+0x2a0>)
 800865a:	6812      	ldr	r2, [r2, #0]
 800865c:	2130      	movs	r1, #48	; 0x30
 800865e:	b292      	uxth	r2, r2
 8008660:	4413      	add	r3, r2
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	6018      	str	r0, [r3, #0]
 8008666:	2306      	movs	r3, #6
 8008668:	4a8d      	ldr	r2, [pc, #564]	; (80088a0 <Setup0_Process+0x2a4>)
 800866a:	8011      	strh	r1, [r2, #0]
  pInformation->ControlState = ControlState;
 800866c:	7223      	strb	r3, [r4, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800866e:	4b8d      	ldr	r3, [pc, #564]	; (80088a4 <Setup0_Process+0x2a8>)
 8008670:	2000      	movs	r0, #0
 8008672:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8008676:	f000 fc9d 	bl	8008fb4 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800867a:	6833      	ldr	r3, [r6, #0]
 800867c:	7a18      	ldrb	r0, [r3, #8]
 800867e:	2808      	cmp	r0, #8
 8008680:	d106      	bne.n	8008690 <Setup0_Process+0x94>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8008682:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8008686:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8008688:	4987      	ldr	r1, [pc, #540]	; (80088a8 <Setup0_Process+0x2ac>)
    vSetEPTxStatus(EP_TX_STALL);
 800868a:	4b85      	ldr	r3, [pc, #532]	; (80088a0 <Setup0_Process+0x2a4>)
    vSetEPRxStatus(EP_RX_STALL);
 800868c:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800868e:	801a      	strh	r2, [r3, #0]
}
 8008690:	f1a0 0009 	sub.w	r0, r0, #9
 8008694:	fab0 f080 	clz	r0, r0
 8008698:	0940      	lsrs	r0, r0, #5
 800869a:	b002      	add	sp, #8
 800869c:	bd70      	pop	{r4, r5, r6, pc}
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d065      	beq.n	800876e <Setup0_Process+0x172>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d1ca      	bne.n	800863c <Setup0_Process+0x40>
    if (RequestNo == CLEAR_FEATURE)
 80086a6:	2d01      	cmp	r5, #1
 80086a8:	f000 80ef 	beq.w	800888a <Setup0_Process+0x28e>
    else if (RequestNo == SET_FEATURE)
 80086ac:	2d03      	cmp	r5, #3
 80086ae:	d1c5      	bne.n	800863c <Setup0_Process+0x40>
      Result = Standard_SetEndPointFeature();
 80086b0:	f7ff ff50 	bl	8008554 <Standard_SetEndPointFeature>
  if (Result != USB_SUCCESS)
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d1c1      	bne.n	800863c <Setup0_Process+0x40>
 80086b8:	6834      	ldr	r4, [r6, #0]
 80086ba:	e7cb      	b.n	8008654 <Setup0_Process+0x58>
  uint32_t Request_No = pInformation->USBbRequest;
 80086bc:	7860      	ldrb	r0, [r4, #1]
  if (Request_No == GET_DESCRIPTOR)
 80086be:	2806      	cmp	r0, #6
 80086c0:	f000 8081 	beq.w	80087c6 <Setup0_Process+0x1ca>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d13f      	bne.n	8008748 <Setup0_Process+0x14c>
 80086c8:	8861      	ldrh	r1, [r4, #2]
 80086ca:	b931      	cbnz	r1, 80086da <Setup0_Process+0xde>
           && (pInformation->USBwIndex1 == 0))
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086d6:	f000 810c 	beq.w	80088f2 <Setup0_Process+0x2f6>
 80086da:	4b6f      	ldr	r3, [pc, #444]	; (8008898 <Setup0_Process+0x29c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80086e2:	2803      	cmp	r0, #3
 80086e4:	f000 8082 	beq.w	80087ec <Setup0_Process+0x1f0>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80086e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80086ec:	6833      	ldr	r3, [r6, #0]
 80086ee:	8a1a      	ldrh	r2, [r3, #16]
 80086f0:	428a      	cmp	r2, r1
 80086f2:	d039      	beq.n	8008768 <Setup0_Process+0x16c>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80086f4:	2802      	cmp	r0, #2
 80086f6:	d040      	beq.n	800877a <Setup0_Process+0x17e>
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	d03e      	beq.n	800877a <Setup0_Process+0x17e>
  if (ValBit(pInformation->USBbmRequestType, 7))
 80086fc:	f993 1000 	ldrsb.w	r1, [r3]
 8008700:	2900      	cmp	r1, #0
 8008702:	db79      	blt.n	80087f8 <Setup0_Process+0x1fc>
    pInformation->ControlState = OUT_DATA;
 8008704:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8008706:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800870a:	4a67      	ldr	r2, [pc, #412]	; (80088a8 <Setup0_Process+0x2ac>)
    pInformation->ControlState = OUT_DATA;
 800870c:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800870e:	8011      	strh	r1, [r2, #0]
 8008710:	e7ad      	b.n	800866e <Setup0_Process+0x72>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8008712:	4b66      	ldr	r3, [pc, #408]	; (80088ac <Setup0_Process+0x2b0>)
 8008714:	b292      	uxth	r2, r2
 8008716:	4413      	add	r3, r2
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	881d      	ldrh	r5, [r3, #0]
 800871c:	006d      	lsls	r5, r5, #1
 800871e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008722:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8008726:	782b      	ldrb	r3, [r5, #0]
 8008728:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800872a:	786b      	ldrb	r3, [r5, #1]
 800872c:	7063      	strb	r3, [r4, #1]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800872e:	88a8      	ldrh	r0, [r5, #4]
 8008730:	f000 fc72 	bl	8009018 <ByteSwap>
 8008734:	8060      	strh	r0, [r4, #2]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8008736:	8928      	ldrh	r0, [r5, #8]
 8008738:	6834      	ldr	r4, [r6, #0]
 800873a:	f000 fc6d 	bl	8009018 <ByteSwap>
 800873e:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8008740:	89ab      	ldrh	r3, [r5, #12]
 8008742:	6834      	ldr	r4, [r6, #0]
 8008744:	80e3      	strh	r3, [r4, #6]
 8008746:	e764      	b.n	8008612 <Setup0_Process+0x16>
  else if (Request_No == GET_CONFIGURATION)
 8008748:	2808      	cmp	r0, #8
 800874a:	d164      	bne.n	8008816 <Setup0_Process+0x21a>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800874c:	7823      	ldrb	r3, [r4, #0]
 800874e:	065b      	lsls	r3, r3, #25
 8008750:	d1c3      	bne.n	80086da <Setup0_Process+0xde>
      CopyRoutine = Standard_GetConfiguration;
 8008752:	4a57      	ldr	r2, [pc, #348]	; (80088b0 <Setup0_Process+0x2b4>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8008754:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8008756:	61a2      	str	r2, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8008758:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 800875a:	4790      	blx	r2
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800875c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008760:	6833      	ldr	r3, [r6, #0]
 8008762:	8a1a      	ldrh	r2, [r3, #16]
 8008764:	428a      	cmp	r2, r1
 8008766:	d1c7      	bne.n	80086f8 <Setup0_Process+0xfc>
    pInformation->ControlState = PAUSE;
 8008768:	2209      	movs	r2, #9
 800876a:	721a      	strb	r2, [r3, #8]
    return;
 800876c:	e77f      	b.n	800866e <Setup0_Process+0x72>
    if (RequestNo == SET_INTERFACE)
 800876e:	2d0b      	cmp	r5, #11
 8008770:	f47f af64 	bne.w	800863c <Setup0_Process+0x40>
      Result = Standard_SetInterface();
 8008774:	f7ff fe60 	bl	8008438 <Standard_SetInterface>
 8008778:	e79c      	b.n	80086b4 <Setup0_Process+0xb8>
    pInformation->ControlState = STALLED;
 800877a:	2208      	movs	r2, #8
 800877c:	721a      	strb	r2, [r3, #8]
    return;
 800877e:	e776      	b.n	800866e <Setup0_Process+0x72>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8008780:	4a4c      	ldr	r2, [pc, #304]	; (80088b4 <Setup0_Process+0x2b8>)
  if ((pInformation->USBwValue0 <=
 8008782:	78e3      	ldrb	r3, [r4, #3]
 8008784:	7852      	ldrb	r2, [r2, #1]
 8008786:	429a      	cmp	r2, r3
 8008788:	f4ff af58 	bcc.w	800863c <Setup0_Process+0x40>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800878c:	78a2      	ldrb	r2, [r4, #2]
 800878e:	2a00      	cmp	r2, #0
 8008790:	f47f af54 	bne.w	800863c <Setup0_Process+0x40>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8008794:	88a2      	ldrh	r2, [r4, #4]
 8008796:	2a00      	cmp	r2, #0
 8008798:	f47f af50 	bne.w	800863c <Setup0_Process+0x40>
    pUser_Standard_Requests->User_SetConfiguration();
 800879c:	4a46      	ldr	r2, [pc, #280]	; (80088b8 <Setup0_Process+0x2bc>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800879e:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80087a0:	6813      	ldr	r3, [r2, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4798      	blx	r3
  if (Result != USB_SUCCESS)
 80087a6:	6834      	ldr	r4, [r6, #0]
 80087a8:	e754      	b.n	8008654 <Setup0_Process+0x58>
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80087aa:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	db07      	blt.n	80087c2 <Setup0_Process+0x1c6>
 80087b2:	78a3      	ldrb	r3, [r4, #2]
 80087b4:	b92b      	cbnz	r3, 80087c2 <Setup0_Process+0x1c6>
          || (pInformation->USBwIndex != 0)
 80087b6:	88a3      	ldrh	r3, [r4, #4]
 80087b8:	b91b      	cbnz	r3, 80087c2 <Setup0_Process+0x1c6>
          || (pInformation->Current_Configuration != 0))
 80087ba:	7aa3      	ldrb	r3, [r4, #10]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f43f af49 	beq.w	8008654 <Setup0_Process+0x58>
 80087c2:	2308      	movs	r3, #8
 80087c4:	e752      	b.n	800866c <Setup0_Process+0x70>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80087c6:	7823      	ldrb	r3, [r4, #0]
 80087c8:	065d      	lsls	r5, r3, #25
 80087ca:	d186      	bne.n	80086da <Setup0_Process+0xde>
      uint8_t wValue1 = pInformation->USBwValue1;
 80087cc:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	f000 808b 	beq.w	80088ea <Setup0_Process+0x2ee>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d048      	beq.n	800886a <Setup0_Process+0x26e>
      else if (wValue1 == STRING_DESCRIPTOR)
 80087d8:	2b03      	cmp	r3, #3
        CopyRoutine = pProperty->GetStringDescriptor;
 80087da:	4b2f      	ldr	r3, [pc, #188]	; (8008898 <Setup0_Process+0x29c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
      else if (wValue1 == STRING_DESCRIPTOR)
 80087de:	f47f af7e 	bne.w	80086de <Setup0_Process+0xe2>
        CopyRoutine = pProperty->GetStringDescriptor;
 80087e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (CopyRoutine)
 80087e4:	2a00      	cmp	r2, #0
 80087e6:	d1b5      	bne.n	8008754 <Setup0_Process+0x158>
 80087e8:	2006      	movs	r0, #6
 80087ea:	e778      	b.n	80086de <Setup0_Process+0xe2>
      pInformation->ControlState = PAUSE;
 80087ec:	2209      	movs	r2, #9
 80087ee:	6833      	ldr	r3, [r6, #0]
 80087f0:	721a      	strb	r2, [r3, #8]
      return;
 80087f2:	e73c      	b.n	800866e <Setup0_Process+0x72>
    if (Result == USB_NOT_READY)
 80087f4:	2309      	movs	r3, #9
 80087f6:	e739      	b.n	800866c <Setup0_Process+0x70>
    __IO uint32_t wLength = pInformation->USBwLength;
 80087f8:	88d9      	ldrh	r1, [r3, #6]
 80087fa:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 80087fc:	9801      	ldr	r0, [sp, #4]
 80087fe:	4282      	cmp	r2, r0
 8008800:	d92c      	bls.n	800885c <Setup0_Process+0x260>
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8008802:	4a25      	ldr	r2, [pc, #148]	; (8008898 <Setup0_Process+0x29c>)
 8008804:	9901      	ldr	r1, [sp, #4]
 8008806:	6812      	ldr	r2, [r2, #0]
 8008808:	8219      	strh	r1, [r3, #16]
 800880a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800880e:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8008810:	f7ff fdb8 	bl	8008384 <DataStageIn>
 8008814:	e72b      	b.n	800866e <Setup0_Process+0x72>
  else if (Request_No == GET_INTERFACE)
 8008816:	280a      	cmp	r0, #10
 8008818:	f47f af5f 	bne.w	80086da <Setup0_Process+0xde>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800881c:	7823      	ldrb	r3, [r4, #0]
 800881e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008822:	2b01      	cmp	r3, #1
 8008824:	f47f af59 	bne.w	80086da <Setup0_Process+0xde>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8008828:	7aa3      	ldrb	r3, [r4, #10]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f43f af55 	beq.w	80086da <Setup0_Process+0xde>
 8008830:	8861      	ldrh	r1, [r4, #2]
 8008832:	2900      	cmp	r1, #0
 8008834:	f47f af51 	bne.w	80086da <Setup0_Process+0xde>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800883e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008842:	f47f af4a 	bne.w	80086da <Setup0_Process+0xde>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8008846:	4d14      	ldr	r5, [pc, #80]	; (8008898 <Setup0_Process+0x29c>)
 8008848:	7960      	ldrb	r0, [r4, #5]
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	4798      	blx	r3
 8008850:	2800      	cmp	r0, #0
 8008852:	f040 809d 	bne.w	8008990 <Setup0_Process+0x394>
 8008856:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 8008858:	4a18      	ldr	r2, [pc, #96]	; (80088bc <Setup0_Process+0x2c0>)
 800885a:	e77b      	b.n	8008754 <Setup0_Process+0x158>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800885c:	4291      	cmp	r1, r2
 800885e:	d852      	bhi.n	8008906 <Setup0_Process+0x30a>
 8008860:	4a0d      	ldr	r2, [pc, #52]	; (8008898 <Setup0_Process+0x29c>)
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8008868:	e7d1      	b.n	800880e <Setup0_Process+0x212>
        CopyRoutine = pProperty->GetConfigDescriptor;
 800886a:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <Setup0_Process+0x29c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6a1a      	ldr	r2, [r3, #32]
 8008870:	e7b8      	b.n	80087e4 <Setup0_Process+0x1e8>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8008872:	78e3      	ldrb	r3, [r4, #3]
 8008874:	2b01      	cmp	r3, #1
 8008876:	f47f aee1 	bne.w	800863c <Setup0_Process+0x40>
          && pInformation->USBwIndex == 0
 800887a:	88a3      	ldrh	r3, [r4, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f aedd 	bne.w	800863c <Setup0_Process+0x40>
          && ValBit(pInformation->Current_Feature, 5))
 8008882:	7a63      	ldrb	r3, [r4, #9]
 8008884:	069b      	lsls	r3, r3, #26
 8008886:	f57f aed9 	bpl.w	800863c <Setup0_Process+0x40>
        Result = Standard_ClearFeature();
 800888a:	f7ff fdfb 	bl	8008484 <Standard_ClearFeature>
 800888e:	e711      	b.n	80086b4 <Setup0_Process+0xb8>
 8008890:	20001554 	.word	0x20001554
 8008894:	40005c50 	.word	0x40005c50
 8008898:	2000152c 	.word	0x2000152c
 800889c:	20003002 	.word	0x20003002
 80088a0:	2000155c 	.word	0x2000155c
 80088a4:	2000006c 	.word	0x2000006c
 80088a8:	2000155a 	.word	0x2000155a
 80088ac:	20003004 	.word	0x20003004
 80088b0:	080082a5 	.word	0x080082a5
 80088b4:	2000009c 	.word	0x2000009c
 80088b8:	20001550 	.word	0x20001550
 80088bc:	080082cd 	.word	0x080082cd
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 80088c0:	78e3      	ldrb	r3, [r4, #3]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	f47f aeba 	bne.w	800863c <Setup0_Process+0x40>
          && (pInformation->USBwIndex == 0)
 80088c8:	88a3      	ldrh	r3, [r4, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f47f aeb6 	bne.w	800863c <Setup0_Process+0x40>
          && (ValBit(pInformation->Current_Feature, 5)))
 80088d0:	7a63      	ldrb	r3, [r4, #9]
 80088d2:	069a      	lsls	r2, r3, #26
 80088d4:	f57f aeb2 	bpl.w	800863c <Setup0_Process+0x40>
  pUser_Standard_Requests->User_SetDeviceFeature();
 80088d8:	4a2f      	ldr	r2, [pc, #188]	; (8008998 <Setup0_Process+0x39c>)
  SetBit(pInformation->Current_Feature, 5);
 80088da:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 80088de:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 80088e0:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80088e2:	69d3      	ldr	r3, [r2, #28]
 80088e4:	4798      	blx	r3
  if (Result != USB_SUCCESS)
 80088e6:	6834      	ldr	r4, [r6, #0]
 80088e8:	e6b4      	b.n	8008654 <Setup0_Process+0x58>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80088ea:	4b2c      	ldr	r3, [pc, #176]	; (800899c <Setup0_Process+0x3a0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69da      	ldr	r2, [r3, #28]
 80088f0:	e778      	b.n	80087e4 <Setup0_Process+0x1e8>
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80088f2:	7820      	ldrb	r0, [r4, #0]
 80088f4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80088f8:	d110      	bne.n	800891c <Setup0_Process+0x320>
        && (pInformation->USBwIndex == 0))
 80088fa:	88a3      	ldrh	r3, [r4, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f47f aeec 	bne.w	80086da <Setup0_Process+0xde>
        CopyRoutine = Standard_GetStatus;
 8008902:	4a27      	ldr	r2, [pc, #156]	; (80089a0 <Setup0_Process+0x3a4>)
 8008904:	e726      	b.n	8008754 <Setup0_Process+0x158>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8008906:	4925      	ldr	r1, [pc, #148]	; (800899c <Setup0_Process+0x3a0>)
 8008908:	6809      	ldr	r1, [r1, #0]
 800890a:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 800890e:	4290      	cmp	r0, r2
 8008910:	b281      	uxth	r1, r0
 8008912:	d913      	bls.n	800893c <Setup0_Process+0x340>
        Data_Mul_MaxPacketSize = FALSE;
 8008914:	2000      	movs	r0, #0
 8008916:	4a23      	ldr	r2, [pc, #140]	; (80089a4 <Setup0_Process+0x3a8>)
 8008918:	6010      	str	r0, [r2, #0]
 800891a:	e778      	b.n	800880e <Setup0_Process+0x212>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800891c:	2801      	cmp	r0, #1
 800891e:	d118      	bne.n	8008952 <Setup0_Process+0x356>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8008920:	4d1e      	ldr	r5, [pc, #120]	; (800899c <Setup0_Process+0x3a0>)
 8008922:	7960      	ldrb	r0, [r4, #5]
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	4798      	blx	r3
 800892a:	2800      	cmp	r0, #0
 800892c:	d130      	bne.n	8008990 <Setup0_Process+0x394>
          && (pInformation->Current_Configuration != 0))
 800892e:	6834      	ldr	r4, [r6, #0]
 8008930:	7aa3      	ldrb	r3, [r4, #10]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e5      	bne.n	8008902 <Setup0_Process+0x306>
 8008936:	7860      	ldrb	r0, [r4, #1]
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	e6d0      	b.n	80086de <Setup0_Process+0xe2>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800893c:	fbb2 f4f0 	udiv	r4, r2, r0
 8008940:	fb00 2214 	mls	r2, r0, r4, r2
 8008944:	2a00      	cmp	r2, #0
 8008946:	f47f af62 	bne.w	800880e <Setup0_Process+0x212>
        Data_Mul_MaxPacketSize = TRUE;
 800894a:	2001      	movs	r0, #1
 800894c:	4a15      	ldr	r2, [pc, #84]	; (80089a4 <Setup0_Process+0x3a8>)
 800894e:	6010      	str	r0, [r2, #0]
 8008950:	e75d      	b.n	800880e <Setup0_Process+0x212>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8008952:	2802      	cmp	r0, #2
 8008954:	d118      	bne.n	8008988 <Setup0_Process+0x38c>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8008956:	7960      	ldrb	r0, [r4, #5]
 8008958:	f000 020f 	and.w	r2, r0, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 800895c:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 800895e:	0601      	lsls	r1, r0, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 8008960:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8008964:	4910      	ldr	r1, [pc, #64]	; (80089a8 <Setup0_Process+0x3ac>)
        Status = _GetEPTxStatus(Related_Endpoint);
 8008966:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800896a:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800896c:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 800896e:	bf4c      	ite	mi
 8008970:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 8008974:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8008978:	4291      	cmp	r1, r2
 800897a:	d905      	bls.n	8008988 <Setup0_Process+0x38c>
 800897c:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 8008980:	d102      	bne.n	8008988 <Setup0_Process+0x38c>
          && (Status != 0))
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1bd      	bne.n	8008902 <Setup0_Process+0x306>
 8008986:	e6a8      	b.n	80086da <Setup0_Process+0xde>
 8008988:	4b04      	ldr	r3, [pc, #16]	; (800899c <Setup0_Process+0x3a0>)
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800898a:	2000      	movs	r0, #0
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	e6a6      	b.n	80086de <Setup0_Process+0xe2>
 8008990:	6832      	ldr	r2, [r6, #0]
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	7850      	ldrb	r0, [r2, #1]
 8008996:	e6a2      	b.n	80086de <Setup0_Process+0xe2>
 8008998:	20001550 	.word	0x20001550
 800899c:	2000152c 	.word	0x2000152c
 80089a0:	080082f5 	.word	0x080082f5
 80089a4:	20000e80 	.word	0x20000e80
 80089a8:	2000009c 	.word	0x2000009c

080089ac <In0_Process>:
{
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 80089ae:	4c28      	ldr	r4, [pc, #160]	; (8008a50 <In0_Process+0xa4>)
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80089b4:	2a02      	cmp	r2, #2
 80089b6:	d01c      	beq.n	80089f2 <In0_Process+0x46>
 80089b8:	2a04      	cmp	r2, #4
 80089ba:	d01a      	beq.n	80089f2 <In0_Process+0x46>
  else if (ControlState == WAIT_STATUS_IN)
 80089bc:	2a06      	cmp	r2, #6
 80089be:	d01d      	beq.n	80089fc <In0_Process+0x50>
 80089c0:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80089c2:	4a24      	ldr	r2, [pc, #144]	; (8008a54 <In0_Process+0xa8>)
  pInformation->ControlState = ControlState;
 80089c4:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80089c6:	2000      	movs	r0, #0
 80089c8:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80089cc:	f000 faf2 	bl	8008fb4 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	7a18      	ldrb	r0, [r3, #8]
 80089d4:	2808      	cmp	r0, #8
 80089d6:	d106      	bne.n	80089e6 <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 80089d8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 80089dc:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 80089de:	491e      	ldr	r1, [pc, #120]	; (8008a58 <In0_Process+0xac>)
    vSetEPTxStatus(EP_TX_STALL);
 80089e0:	4b1e      	ldr	r3, [pc, #120]	; (8008a5c <In0_Process+0xb0>)
    vSetEPRxStatus(EP_RX_STALL);
 80089e2:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80089e4:	801a      	strh	r2, [r3, #0]
}
 80089e6:	f1a0 0009 	sub.w	r0, r0, #9
 80089ea:	fab0 f080 	clz	r0, r0
 80089ee:	0940      	lsrs	r0, r0, #5
 80089f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    DataStageIn();
 80089f2:	f7ff fcc7 	bl	8008384 <DataStageIn>
    ControlState = pInformation->ControlState;
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	7a19      	ldrb	r1, [r3, #8]
 80089fa:	e7e2      	b.n	80089c2 <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80089fc:	785a      	ldrb	r2, [r3, #1]
 80089fe:	2a05      	cmp	r2, #5
 8008a00:	d006      	beq.n	8008a10 <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 8008a02:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <In0_Process+0xb4>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	4798      	blx	r3
    ControlState = STALLED;
 8008a0a:	2108      	movs	r1, #8
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	e7d8      	b.n	80089c2 <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8008a10:	781a      	ldrb	r2, [r3, #0]
 8008a12:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8008a16:	d1f4      	bne.n	8008a02 <In0_Process+0x56>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8008a18:	4912      	ldr	r1, [pc, #72]	; (8008a64 <In0_Process+0xb8>)
      SetDeviceAddress(pInformation->USBwValue0);
 8008a1a:	78df      	ldrb	r7, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 8008a1c:	7808      	ldrb	r0, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8008a1e:	b168      	cbz	r0, 8008a3c <In0_Process+0x90>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008a20:	f640 760f 	movw	r6, #3855	; 0xf0f
 8008a24:	f248 0580 	movw	r5, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 8008a28:	490f      	ldr	r1, [pc, #60]	; (8008a68 <In0_Process+0xbc>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008a2a:	680b      	ldr	r3, [r1, #0]
 8008a2c:	4033      	ands	r3, r6
 8008a2e:	4313      	orrs	r3, r2
  for (i = 0; i < nEP; i++)
 8008a30:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008a32:	432b      	orrs	r3, r5
  for (i = 0; i < nEP; i++)
 8008a34:	4290      	cmp	r0, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008a36:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 8008a3a:	d1f6      	bne.n	8008a2a <In0_Process+0x7e>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8008a3c:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <In0_Process+0xc0>)
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8008a3e:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 8008a40:	681b      	ldr	r3, [r3, #0]
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8008a42:	f047 0780 	orr.w	r7, r7, #128	; 0x80
      pUser_Standard_Requests->User_SetDeviceAddress();
 8008a46:	6a1b      	ldr	r3, [r3, #32]
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8008a48:	6017      	str	r7, [r2, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 8008a4a:	4798      	blx	r3
 8008a4c:	e7d9      	b.n	8008a02 <In0_Process+0x56>
 8008a4e:	bf00      	nop
 8008a50:	20001554 	.word	0x20001554
 8008a54:	2000006c 	.word	0x2000006c
 8008a58:	2000155a 	.word	0x2000155a
 8008a5c:	2000155c 	.word	0x2000155c
 8008a60:	2000152c 	.word	0x2000152c
 8008a64:	2000009c 	.word	0x2000009c
 8008a68:	40005c00 	.word	0x40005c00
 8008a6c:	20001550 	.word	0x20001550
 8008a70:	40005c4c 	.word	0x40005c4c

08008a74 <Out0_Process>:
{
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8008a76:	4d3c      	ldr	r5, [pc, #240]	; (8008b68 <Out0_Process+0xf4>)
 8008a78:	682c      	ldr	r4, [r5, #0]
 8008a7a:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d007      	beq.n	8008a90 <Out0_Process+0x1c>
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d005      	beq.n	8008a90 <Out0_Process+0x1c>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d01c      	beq.n	8008ac2 <Out0_Process+0x4e>
 8008a88:	2b05      	cmp	r3, #5
 8008a8a:	d01a      	beq.n	8008ac2 <Out0_Process+0x4e>
  else if (ControlState == WAIT_STATUS_OUT)
 8008a8c:	2b07      	cmp	r3, #7
 8008a8e:	d03a      	beq.n	8008b06 <Out0_Process+0x92>
 8008a90:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8008a92:	4a36      	ldr	r2, [pc, #216]	; (8008b6c <Out0_Process+0xf8>)
  pInformation->ControlState = ControlState;
 8008a94:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8008a96:	2000      	movs	r0, #0
 8008a98:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8008a9c:	f000 fa8a 	bl	8008fb4 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	7a18      	ldrb	r0, [r3, #8]
 8008aa4:	2808      	cmp	r0, #8
 8008aa6:	d106      	bne.n	8008ab6 <Out0_Process+0x42>
    vSetEPRxStatus(EP_RX_STALL);
 8008aa8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8008aac:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 8008aae:	4930      	ldr	r1, [pc, #192]	; (8008b70 <Out0_Process+0xfc>)
    vSetEPTxStatus(EP_TX_STALL);
 8008ab0:	4b30      	ldr	r3, [pc, #192]	; (8008b74 <Out0_Process+0x100>)
    vSetEPRxStatus(EP_RX_STALL);
 8008ab2:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8008ab4:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 8008ab6:	f1a0 0009 	sub.w	r0, r0, #9
 8008aba:	fab0 f080 	clz	r0, r0
 8008abe:	0940      	lsrs	r0, r0, #5
}
 8008ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 8008ac2:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 8008ac4:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 8008ac6:	b1b3      	cbz	r3, 8008af6 <Out0_Process+0x82>
 8008ac8:	b322      	cbz	r2, 8008b14 <Out0_Process+0xa0>
    Length = pEPinfo->PacketSize;
 8008aca:	8aa6      	ldrh	r6, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 8008acc:	4296      	cmp	r6, r2
 8008ace:	bf28      	it	cs
 8008ad0:	4616      	movcs	r6, r2
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8008ad6:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8008ad8:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 8008ada:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 8008adc:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 8008ade:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8008ae0:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8008ae2:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f000 fa49 	bl	8008f7c <GetEPRxAddr>
 8008aea:	4632      	mov	r2, r6
 8008aec:	4601      	mov	r1, r0
 8008aee:	4638      	mov	r0, r7
 8008af0:	f000 f95e 	bl	8008db0 <PMAToUserBufferCopy>
 8008af4:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 8008af6:	b97a      	cbnz	r2, 8008b18 <Out0_Process+0xa4>
 8008af8:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8008afa:	8aa3      	ldrh	r3, [r4, #20]
 8008afc:	bb0b      	cbnz	r3, 8008b42 <Out0_Process+0xce>
    pInformation->ControlState = OUT_DATA;
 8008afe:	2303      	movs	r3, #3
 8008b00:	4614      	mov	r4, r2
 8008b02:	7213      	strb	r3, [r2, #8]
 8008b04:	e7c5      	b.n	8008a92 <Out0_Process+0x1e>
    (*pProperty->Process_Status_OUT)();
 8008b06:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <Out0_Process+0x104>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	4798      	blx	r3
    ControlState = STALLED;
 8008b0e:	2308      	movs	r3, #8
 8008b10:	682c      	ldr	r4, [r5, #0]
 8008b12:	e7be      	b.n	8008a92 <Out0_Process+0x1e>
 8008b14:	4622      	mov	r2, r4
 8008b16:	e7f0      	b.n	8008afa <Out0_Process+0x86>
    SetEPTxCount(ENDP0, 0);
 8008b18:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8008b1a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008b1e:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <Out0_Process+0xfc>)
    SetEPTxCount(ENDP0, 0);
 8008b20:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8008b22:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8008b24:	f000 fa38 	bl	8008f98 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8008b28:	2130      	movs	r1, #48	; 0x30
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8008b2a:	8a23      	ldrh	r3, [r4, #16]
 8008b2c:	8aa2      	ldrh	r2, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8008b2e:	4811      	ldr	r0, [pc, #68]	; (8008b74 <Out0_Process+0x100>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8008b30:	429a      	cmp	r2, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8008b32:	8001      	strh	r1, [r0, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8008b34:	d914      	bls.n	8008b60 <Out0_Process+0xec>
    if (pEPinfo->Usb_rLength > 0)
 8008b36:	b1ab      	cbz	r3, 8008b64 <Out0_Process+0xf0>
      pInformation->ControlState = LAST_OUT_DATA;
 8008b38:	2205      	movs	r2, #5
 8008b3a:	682c      	ldr	r4, [r5, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	7222      	strb	r2, [r4, #8]
 8008b40:	e7a7      	b.n	8008a92 <Out0_Process+0x1e>
 8008b42:	480c      	ldr	r0, [pc, #48]	; (8008b74 <Out0_Process+0x100>)
      pInformation->ControlState = WAIT_STATUS_IN;
 8008b44:	2306      	movs	r3, #6
      USB_StatusIn();
 8008b46:	2700      	movs	r7, #0
 8008b48:	2630      	movs	r6, #48	; 0x30
 8008b4a:	490c      	ldr	r1, [pc, #48]	; (8008b7c <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 8008b4c:	7213      	strb	r3, [r2, #8]
      USB_StatusIn();
 8008b4e:	680c      	ldr	r4, [r1, #0]
 8008b50:	490b      	ldr	r1, [pc, #44]	; (8008b80 <Out0_Process+0x10c>)
 8008b52:	b2a4      	uxth	r4, r4
 8008b54:	4421      	add	r1, r4
 8008b56:	0049      	lsls	r1, r1, #1
 8008b58:	600f      	str	r7, [r1, #0]
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	8006      	strh	r6, [r0, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8008b5e:	e798      	b.n	8008a92 <Out0_Process+0x1e>
 8008b60:	682a      	ldr	r2, [r5, #0]
 8008b62:	e7cc      	b.n	8008afe <Out0_Process+0x8a>
 8008b64:	682a      	ldr	r2, [r5, #0]
 8008b66:	e7ed      	b.n	8008b44 <Out0_Process+0xd0>
 8008b68:	20001554 	.word	0x20001554
 8008b6c:	2000006c 	.word	0x2000006c
 8008b70:	2000155a 	.word	0x2000155a
 8008b74:	2000155c 	.word	0x2000155c
 8008b78:	2000152c 	.word	0x2000152c
 8008b7c:	40005c50 	.word	0x40005c50
 8008b80:	20003002 	.word	0x20003002

08008b84 <SetDeviceAddress>:
{
 8008b84:	b470      	push	{r4, r5, r6}
  uint32_t nEP = Device_Table.Total_Endpoint;
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <SetDeviceAddress+0x34>)
 8008b88:	781c      	ldrb	r4, [r3, #0]
  for (i = 0; i < nEP; i++)
 8008b8a:	b174      	cbz	r4, 8008baa <SetDeviceAddress+0x26>
 8008b8c:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008b8e:	f640 760f 	movw	r6, #3855	; 0xf0f
 8008b92:	f248 0580 	movw	r5, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 8008b96:	4909      	ldr	r1, [pc, #36]	; (8008bbc <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008b98:	680b      	ldr	r3, [r1, #0]
 8008b9a:	4033      	ands	r3, r6
 8008b9c:	4313      	orrs	r3, r2
  for (i = 0; i < nEP; i++)
 8008b9e:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008ba0:	432b      	orrs	r3, r5
  for (i = 0; i < nEP; i++)
 8008ba2:	4294      	cmp	r4, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8008ba4:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 8008ba8:	d1f6      	bne.n	8008b98 <SetDeviceAddress+0x14>
#endif  /* STM32F10X_CL */  
}
 8008baa:	bc70      	pop	{r4, r5, r6}
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <SetDeviceAddress+0x3c>)
 8008bae:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8008bb2:	6018      	str	r0, [r3, #0]
}
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	2000009c 	.word	0x2000009c
 8008bbc:	40005c00 	.word	0x40005c00
 8008bc0:	40005c4c 	.word	0x40005c4c

08008bc4 <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop

08008bc8 <USB_Init>:
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 8008bc8:	2002      	movs	r0, #2
{
 8008bca:	b430      	push	{r4, r5}
  pInformation = &Device_Info;
 8008bcc:	4a06      	ldr	r2, [pc, #24]	; (8008be8 <USB_Init+0x20>)
 8008bce:	4d07      	ldr	r5, [pc, #28]	; (8008bec <USB_Init+0x24>)
  pProperty = &Device_Property;
 8008bd0:	4c07      	ldr	r4, [pc, #28]	; (8008bf0 <USB_Init+0x28>)
 8008bd2:	4b08      	ldr	r3, [pc, #32]	; (8008bf4 <USB_Init+0x2c>)
  pInformation->ControlState = 2;
 8008bd4:	7210      	strb	r0, [r2, #8]
  pUser_Standard_Requests = &User_Standard_Requests;
 8008bd6:	4908      	ldr	r1, [pc, #32]	; (8008bf8 <USB_Init+0x30>)
 8008bd8:	4808      	ldr	r0, [pc, #32]	; (8008bfc <USB_Init+0x34>)
  pProperty = &Device_Property;
 8008bda:	6023      	str	r3, [r4, #0]
  pInformation = &Device_Info;
 8008bdc:	602a      	str	r2, [r5, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8008bde:	681b      	ldr	r3, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8008be0:	6008      	str	r0, [r1, #0]
}
 8008be2:	bc30      	pop	{r4, r5}
  pProperty->Init();
 8008be4:	4718      	bx	r3
 8008be6:	bf00      	nop
 8008be8:	20001534 	.word	0x20001534
 8008bec:	20001554 	.word	0x20001554
 8008bf0:	2000152c 	.word	0x2000152c
 8008bf4:	2000006c 	.word	0x2000006c
 8008bf8:	20001550 	.word	0x20001550
 8008bfc:	200000c0 	.word	0x200000c0

08008c00 <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8008c00:	2300      	movs	r3, #0
{
 8008c02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8008c06:	4a5a      	ldr	r2, [pc, #360]	; (8008d70 <CTR_LP+0x170>)
{
 8008c08:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
 8008c0a:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8008c0e:	6813      	ldr	r3, [r2, #0]
 8008c10:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8008d88 <CTR_LP+0x188>
 8008c14:	b299      	uxth	r1, r3
 8008c16:	0418      	lsls	r0, r3, #16
 8008c18:	f8a8 1000 	strh.w	r1, [r8]
 8008c1c:	f140 8094 	bpl.w	8008d48 <CTR_LP+0x148>
 8008c20:	4692      	mov	sl, r2
 8008c22:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8008d8c <CTR_LP+0x18c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8008c26:	4e53      	ldr	r6, [pc, #332]	; (8008d74 <CTR_LP+0x174>)
        (*pEpInt_OUT[EPindex-1])();
 8008c28:	4f53      	ldr	r7, [pc, #332]	; (8008d78 <CTR_LP+0x178>)
 8008c2a:	e02f      	b.n	8008c8c <CTR_LP+0x8c>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8008c2c:	f64b 7bbf 	movw	fp, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8008c36:	882b      	ldrh	r3, [r5, #0]
 8008c38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c3c:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 8008c3e:	882b      	ldrh	r3, [r5, #0]
 8008c40:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c44:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	ea03 030b 	and.w	r3, r3, fp
 8008c4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c50:	f083 0320 	eor.w	r3, r3, #32
 8008c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c5c:	6023      	str	r3, [r4, #0]
      if ((wIstr & ISTR_DIR) == 0)
 8008c5e:	f8b8 3000 	ldrh.w	r3, [r8]
 8008c62:	06d9      	lsls	r1, r3, #27
 8008c64:	d548      	bpl.n	8008cf8 <CTR_LP+0xf8>
        wEPVal = _GetENDPOINT(ENDP0);
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal &EP_SETUP) != 0)
 8008c6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008c72:	051a      	lsls	r2, r3, #20
 8008c74:	d46b      	bmi.n	8008d4e <CTR_LP+0x14e>
        else if ((wEPVal & EP_CTR_RX) != 0)
 8008c76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008c7a:	041b      	lsls	r3, r3, #16
 8008c7c:	d46f      	bmi.n	8008d5e <CTR_LP+0x15e>
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8008c7e:	f8da 3000 	ldr.w	r3, [sl]
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	041b      	lsls	r3, r3, #16
 8008c86:	f8a8 2000 	strh.w	r2, [r8]
 8008c8a:	d55d      	bpl.n	8008d48 <CTR_LP+0x148>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8008c8c:	f8b8 3000 	ldrh.w	r3, [r8]
	    SaveRState = _GetENDPOINT(ENDP0);
 8008c90:	4c3a      	ldr	r4, [pc, #232]	; (8008d7c <CTR_LP+0x17c>)
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8008c92:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 8008c96:	0099      	lsls	r1, r3, #2
 8008c98:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
	    SaveRState = _GetENDPOINT(ENDP0);
 8008c9c:	4d38      	ldr	r5, [pc, #224]	; (8008d80 <CTR_LP+0x180>)
	    SaveTState = SaveRState & EPTX_STAT;
 8008c9e:	4a39      	ldr	r2, [pc, #228]	; (8008d84 <CTR_LP+0x184>)
      wEPVal = _GetENDPOINT(EPindex);
 8008ca0:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8008ca4:	f889 3000 	strb.w	r3, [r9]
    if (EPindex == 0)
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0bf      	beq.n	8008c2c <CTR_LP+0x2c>
      wEPVal = _GetENDPOINT(EPindex);
 8008cac:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 8008cae:	3b01      	subs	r3, #1
      wEPVal = _GetENDPOINT(EPindex);
 8008cb0:	b292      	uxth	r2, r2
 8008cb2:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8008cb6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008cba:	0410      	lsls	r0, r2, #16
 8008cbc:	d507      	bpl.n	8008cce <CTR_LP+0xce>
        _ClearEP_CTR_RX(EPindex);
 8008cbe:	f640 748f 	movw	r4, #3983	; 0xf8f
 8008cc2:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 8008cc4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 8008cc8:	4022      	ands	r2, r4
 8008cca:	600a      	str	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 8008ccc:	4780      	blx	r0
      if ((wEPVal & EP_CTR_TX) != 0)
 8008cce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008cd2:	061a      	lsls	r2, r3, #24
 8008cd4:	d5d3      	bpl.n	8008c7e <CTR_LP+0x7e>
        _ClearEP_CTR_TX(EPindex);
 8008cd6:	f648 700f 	movw	r0, #36623	; 0x8f0f
 8008cda:	f899 2000 	ldrb.w	r2, [r9]
 8008cde:	0093      	lsls	r3, r2, #2
 8008ce0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ce4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8008ce8:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 8008cea:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 8008cec:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 8008cee:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 8008cf2:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 8008cf4:	4790      	blx	r2
 8008cf6:	e7c2      	b.n	8008c7e <CTR_LP+0x7e>
        _ClearEP_CTR_TX(ENDP0);
 8008cf8:	f648 710f 	movw	r1, #36623	; 0x8f0f
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	400b      	ands	r3, r1
 8008d00:	6023      	str	r3, [r4, #0]
        In0_Process();
 8008d02:	f7ff fe53 	bl	80089ac <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	8829      	ldrh	r1, [r5, #0]
 8008d0a:	ea03 0b0b 	and.w	fp, r3, fp
 8008d0e:	4a1d      	ldr	r2, [pc, #116]	; (8008d84 <CTR_LP+0x184>)
 8008d10:	882b      	ldrh	r3, [r5, #0]
 8008d12:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8008d16:	bf18      	it	ne
 8008d18:	f48b 5b80 	eorne.w	fp, fp, #4096	; 0x1000
 8008d1c:	049e      	lsls	r6, r3, #18
 8008d1e:	8813      	ldrh	r3, [r2, #0]
 8008d20:	bf48      	it	mi
 8008d22:	f48b 5b00 	eormi.w	fp, fp, #8192	; 0x2000
 8008d26:	06dd      	lsls	r5, r3, #27
 8008d28:	8813      	ldrh	r3, [r2, #0]
 8008d2a:	bf48      	it	mi
 8008d2c:	f08b 0b10 	eormi.w	fp, fp, #16
 8008d30:	069c      	lsls	r4, r3, #26
 8008d32:	bf48      	it	mi
 8008d34:	f08b 0b20 	eormi.w	fp, fp, #32
 8008d38:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8008d3c:	4a0f      	ldr	r2, [pc, #60]	; (8008d7c <CTR_LP+0x17c>)
 8008d3e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008d42:	fa1f f38b 	uxth.w	r3, fp
 8008d46:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8008d48:	b003      	add	sp, #12
 8008d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8008d4e:	f640 718f 	movw	r1, #3983	; 0xf8f
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	400b      	ands	r3, r1
 8008d56:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8008d58:	f7ff fc50 	bl	80085fc <Setup0_Process>
		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8008d5c:	e7d3      	b.n	8008d06 <CTR_LP+0x106>
          _ClearEP_CTR_RX(ENDP0);
 8008d5e:	f640 718f 	movw	r1, #3983	; 0xf8f
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	400b      	ands	r3, r1
 8008d66:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8008d68:	f7ff fe84 	bl	8008a74 <Out0_Process>
 8008d6c:	e7cb      	b.n	8008d06 <CTR_LP+0x106>
 8008d6e:	bf00      	nop
 8008d70:	40005c44 	.word	0x40005c44
 8008d74:	20000024 	.word	0x20000024
 8008d78:	20000040 	.word	0x20000040
 8008d7c:	40005c00 	.word	0x40005c00
 8008d80:	2000155a 	.word	0x2000155a
 8008d84:	2000155c 	.word	0x2000155c
 8008d88:	200015a0 	.word	0x200015a0
 8008d8c:	20001530 	.word	0x20001530

08008d90 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8008d90:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8008d94:	3201      	adds	r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8008d96:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 8008d9a:	1052      	asrs	r2, r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8008d9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 8008da0:	d005      	beq.n	8008dae <UserToPMABufferCopy+0x1e>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8008da2:	f830 3b02 	ldrh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 8008da6:	3a01      	subs	r2, #1
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8008da8:	f821 3b04 	strh.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 8008dac:	d1f9      	bne.n	8008da2 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8008dae:	4770      	bx	lr

08008db0 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8008db0:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8008db4:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8008db6:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 8008dba:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8008dbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 8008dc0:	d006      	beq.n	8008dd0 <PMAToUserBufferCopy+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8008dc2:	680b      	ldr	r3, [r1, #0]
  for (i = n; i != 0; i--)
 8008dc4:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8008dc6:	f101 0104 	add.w	r1, r1, #4
 8008dca:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 8008dce:	d1f8      	bne.n	8008dc2 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop

08008dd4 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8008dd4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8008dd8:	4a01      	ldr	r2, [pc, #4]	; (8008de0 <SetBTABLE+0xc>)
 8008dda:	4003      	ands	r3, r0
 8008ddc:	6013      	str	r3, [r2, #0]
}
 8008dde:	4770      	bx	lr
 8008de0:	40005c50 	.word	0x40005c50

08008de4 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8008de4:	0080      	lsls	r0, r0, #2
 8008de6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008dea:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8008dee:	6803      	ldr	r3, [r0, #0]
 8008df0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	6003      	str	r3, [r0, #0]
}
 8008dfe:	4770      	bx	lr

08008e00 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8008e00:	0080      	lsls	r0, r0, #2
 8008e02:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008e06:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8008e0a:	6803      	ldr	r3, [r0, #0]
 8008e0c:	06ca      	lsls	r2, r1, #27
 8008e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	bf48      	it	mi
 8008e1a:	f083 0310 	eormi.w	r3, r3, #16
 8008e1e:	068a      	lsls	r2, r1, #26
 8008e20:	bf48      	it	mi
 8008e22:	f083 0320 	eormi.w	r3, r3, #32
 8008e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e2e:	6003      	str	r3, [r0, #0]
}
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop

08008e34 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8008e34:	0080      	lsls	r0, r0, #2
 8008e36:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008e3a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8008e3e:	6803      	ldr	r3, [r0, #0]
 8008e40:	04ca      	lsls	r2, r1, #19
 8008e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	bf48      	it	mi
 8008e4e:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8008e52:	048a      	lsls	r2, r1, #18
 8008e54:	bf48      	it	mi
 8008e56:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8008e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e62:	6003      	str	r3, [r0, #0]
}
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop

08008e68 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8008e68:	0080      	lsls	r0, r0, #2
 8008e6a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008e6e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8008e72:	6803      	ldr	r3, [r0, #0]
 8008e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8a:	6003      	str	r3, [r0, #0]
}
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop

08008e90 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8008e90:	0080      	lsls	r0, r0, #2
 8008e92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008e96:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8008e9a:	6803      	ldr	r3, [r0, #0]
 8008e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb2:	6003      	str	r3, [r0, #0]
}
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop

08008eb8 <Clear_Status_Out>:
 8008eb8:	f640 630f 	movw	r3, #3599	; 0xe0f
 8008ebc:	0080      	lsls	r0, r0, #2
 8008ebe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008ec2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8008ec6:	6802      	ldr	r2, [r0, #0]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed2:	6003      	str	r3, [r0, #0]
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop

08008ed8 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8008ed8:	0080      	lsls	r0, r0, #2
 8008eda:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008ede:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8008ee2:	6803      	ldr	r3, [r0, #0]
 8008ee4:	045b      	lsls	r3, r3, #17
 8008ee6:	d508      	bpl.n	8008efa <ClearDTOG_RX+0x22>
 8008ee8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8008eec:	6803      	ldr	r3, [r0, #0]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef8:	6003      	str	r3, [r0, #0]
}
 8008efa:	4770      	bx	lr

08008efc <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8008efc:	0080      	lsls	r0, r0, #2
 8008efe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008f02:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8008f06:	6803      	ldr	r3, [r0, #0]
 8008f08:	065b      	lsls	r3, r3, #25
 8008f0a:	d508      	bpl.n	8008f1e <ClearDTOG_TX+0x22>
 8008f0c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8008f10:	6803      	ldr	r3, [r0, #0]
 8008f12:	4013      	ands	r3, r2
 8008f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f1c:	6003      	str	r3, [r0, #0]
}
 8008f1e:	4770      	bx	lr

08008f20 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <SetEPTxAddr+0x1c>)
 8008f22:	0849      	lsrs	r1, r1, #1
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	0049      	lsls	r1, r1, #1
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008f2e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8008f32:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8008f36:	0040      	lsls	r0, r0, #1
 8008f38:	6001      	str	r1, [r0, #0]
}
 8008f3a:	4770      	bx	lr
 8008f3c:	40005c50 	.word	0x40005c50

08008f40 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8008f40:	4a05      	ldr	r2, [pc, #20]	; (8008f58 <SetEPRxAddr+0x18>)
 8008f42:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <SetEPRxAddr+0x1c>)
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	0849      	lsrs	r1, r1, #1
 8008f48:	b292      	uxth	r2, r2
 8008f4a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008f4e:	4413      	add	r3, r2
 8008f50:	0049      	lsls	r1, r1, #1
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	6019      	str	r1, [r3, #0]
}
 8008f56:	4770      	bx	lr
 8008f58:	40005c50 	.word	0x40005c50
 8008f5c:	20003004 	.word	0x20003004

08008f60 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8008f60:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <GetEPTxAddr+0x18>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008f6a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8008f6e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8008f72:	0040      	lsls	r0, r0, #1
}
 8008f74:	8800      	ldrh	r0, [r0, #0]
 8008f76:	4770      	bx	lr
 8008f78:	40005c50 	.word	0x40005c50

08008f7c <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8008f7c:	4a04      	ldr	r2, [pc, #16]	; (8008f90 <GetEPRxAddr+0x14>)
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <GetEPRxAddr+0x18>)
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	b292      	uxth	r2, r2
 8008f84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008f88:	4413      	add	r3, r2
 8008f8a:	005b      	lsls	r3, r3, #1
}
 8008f8c:	8818      	ldrh	r0, [r3, #0]
 8008f8e:	4770      	bx	lr
 8008f90:	40005c50 	.word	0x40005c50
 8008f94:	20003004 	.word	0x20003004

08008f98 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8008f98:	4a04      	ldr	r2, [pc, #16]	; (8008fac <SetEPTxCount+0x14>)
 8008f9a:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <SetEPTxCount+0x18>)
 8008f9c:	6812      	ldr	r2, [r2, #0]
 8008f9e:	b292      	uxth	r2, r2
 8008fa0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	6019      	str	r1, [r3, #0]
}
 8008faa:	4770      	bx	lr
 8008fac:	40005c50 	.word	0x40005c50
 8008fb0:	20003002 	.word	0x20003002

08008fb4 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8008fb4:	4a0e      	ldr	r2, [pc, #56]	; (8008ff0 <SetEPRxCount+0x3c>)
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <SetEPRxCount+0x40>)
 8008fb8:	6812      	ldr	r2, [r2, #0]
 8008fba:	293e      	cmp	r1, #62	; 0x3e
 8008fbc:	b292      	uxth	r2, r2
 8008fbe:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008fc2:	4413      	add	r3, r2
 8008fc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008fc8:	d90a      	bls.n	8008fe0 <SetEPRxCount+0x2c>
 8008fca:	094a      	lsrs	r2, r1, #5
 8008fcc:	06c8      	lsls	r0, r1, #27
 8008fce:	bf04      	itt	eq
 8008fd0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8008fd4:	b292      	uxtheq	r2, r2
 8008fd6:	0292      	lsls	r2, r2, #10
 8008fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	4770      	bx	lr
 8008fe0:	084a      	lsrs	r2, r1, #1
 8008fe2:	07c9      	lsls	r1, r1, #31
 8008fe4:	bf48      	it	mi
 8008fe6:	3201      	addmi	r2, #1
 8008fe8:	0292      	lsls	r2, r2, #10
 8008fea:	601a      	str	r2, [r3, #0]
}
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40005c50 	.word	0x40005c50
 8008ff4:	20003006 	.word	0x20003006

08008ff8 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8008ff8:	4a05      	ldr	r2, [pc, #20]	; (8009010 <GetEPRxCount+0x18>)
 8008ffa:	4b06      	ldr	r3, [pc, #24]	; (8009014 <GetEPRxCount+0x1c>)
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	b292      	uxth	r2, r2
 8009000:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009004:	4413      	add	r3, r2
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	6818      	ldr	r0, [r3, #0]
}
 800900a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800900e:	4770      	bx	lr
 8009010:	40005c50 	.word	0x40005c50
 8009014:	20003006 	.word	0x20003006

08009018 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8009018:	b2c3      	uxtb	r3, r0
 800901a:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800901c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop

08009024 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8009024:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 8009026:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800902a:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800902c:	4903      	ldr	r1, [pc, #12]	; (800903c <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800902e:	4c04      	ldr	r4, [pc, #16]	; (8009040 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8009030:	4a04      	ldr	r2, [pc, #16]	; (8009044 <USB_SIL_Init+0x20>)
  _SetISTR(0);
 8009032:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8009034:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 8009036:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 8009038:	6013      	str	r3, [r2, #0]
}
 800903a:	4770      	bx	lr
 800903c:	20001558 	.word	0x20001558
 8009040:	40005c44 	.word	0x40005c44
 8009044:	40005c40 	.word	0x40005c40

08009048 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8009048:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800904a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800904e:	4628      	mov	r0, r5
{
 8009050:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8009052:	f7ff ffd1 	bl	8008ff8 <GetEPRxCount>
 8009056:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8009058:	4628      	mov	r0, r5
 800905a:	f7ff ff8f 	bl	8008f7c <GetEPRxAddr>
 800905e:	4622      	mov	r2, r4
 8009060:	4601      	mov	r1, r0
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff fea4 	bl	8008db0 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 8009068:	4620      	mov	r0, r4
 800906a:	bd70      	pop	{r4, r5, r6, pc}

0800906c <Set_USBClock>:

/*******************************************************************************
 * Description    : Configures USB Clock input (48MHz)
 *******************************************************************************/
void Set_USBClock(void)
{
 800906c:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800906e:	2000      	movs	r0, #0
 8009070:	f7f8 f980 	bl	8001374 <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
}
 8009074:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8009078:	2101      	movs	r1, #1
 800907a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800907e:	f7f8 b98b 	b.w	8001398 <RCC_APB1PeriphClockCmd>
 8009082:	bf00      	nop

08009084 <USB_Interrupts_Config>:

/*******************************************************************************
 * Description    : Configures the USB interrupts
 *******************************************************************************/
void USB_Interrupts_Config(void)
{
 8009084:	b500      	push	{lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8009086:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 800908a:	b083      	sub	sp, #12
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800908c:	f7f7 fe24 	bl	8000cd8 <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8009090:	4b03      	ldr	r3, [pc, #12]	; (80090a0 <USB_Interrupts_Config+0x1c>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8009092:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8009094:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 8009096:	f7f7 fe29 	bl	8000cec <NVIC_Init>
}
 800909a:	b003      	add	sp, #12
 800909c:	f85d fb04 	ldr.w	pc, [sp], #4
 80090a0:	01000114 	.word	0x01000114

080090a4 <USB_Cable_Config>:
/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
}
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop

080090a8 <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 80090a8:	4b3c      	ldr	r3, [pc, #240]	; (800919c <Get_SerialNum+0xf4>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 80090aa:	493d      	ldr	r1, [pc, #244]	; (80091a0 <Get_SerialNum+0xf8>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 80090ac:	4a3d      	ldr	r2, [pc, #244]	; (80091a4 <Get_SerialNum+0xfc>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 80090ae:	681b      	ldr	r3, [r3, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 80090b0:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 80090b2:	6812      	ldr	r2, [r2, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 80090b4:	189b      	adds	r3, r3, r2
 80090b6:	d100      	bne.n	80090ba <Get_SerialNum+0x12>
 80090b8:	4770      	bx	lr
{
 80090ba:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 80090bc:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + '0';
 80090be:	4a3a      	ldr	r2, [pc, #232]	; (80091a8 <Get_SerialNum+0x100>)
		if (((value >> 28)) < 0xA)
 80090c0:	0f18      	lsrs	r0, r3, #28
 80090c2:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090c6:	bf2c      	ite	cs
 80090c8:	3037      	addcs	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80090ca:	3030      	addcc	r0, #48	; 0x30
 80090cc:	7090      	strb	r0, [r2, #2]
		if (((value >> 28)) < 0xA)
 80090ce:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80090d2:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090d4:	bf8c      	ite	hi
 80090d6:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80090d8:	3030      	addls	r0, #48	; 0x30
 80090da:	7110      	strb	r0, [r2, #4]
		if (((value >> 28)) < 0xA)
 80090dc:	f3c3 5003 	ubfx	r0, r3, #20, #4
 80090e0:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090e2:	bf8c      	ite	hi
 80090e4:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80090e6:	3030      	addls	r0, #48	; 0x30
 80090e8:	7190      	strb	r0, [r2, #6]
		if (((value >> 28)) < 0xA)
 80090ea:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80090ee:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090f0:	bf8c      	ite	hi
 80090f2:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 80090f4:	3030      	addls	r0, #48	; 0x30
 80090f6:	7210      	strb	r0, [r2, #8]
		if (((value >> 28)) < 0xA)
 80090f8:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80090fc:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090fe:	bf8c      	ite	hi
 8009100:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009102:	3030      	addls	r0, #48	; 0x30
 8009104:	7290      	strb	r0, [r2, #10]
		if (((value >> 28)) < 0xA)
 8009106:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800910a:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800910c:	bf8c      	ite	hi
 800910e:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009110:	3030      	addls	r0, #48	; 0x30
 8009112:	7310      	strb	r0, [r2, #12]
		if (((value >> 28)) < 0xA)
 8009114:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8009118:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800911a:	bf8c      	ite	hi
 800911c:	3037      	addhi	r0, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 800911e:	3030      	addls	r0, #48	; 0x30
		pbuf[2 * idx + 1] = 0;
 8009120:	70d4      	strb	r4, [r2, #3]
			pbuf[2 * idx] = (value >> 28) + '0';
 8009122:	7390      	strb	r0, [r2, #14]
		pbuf[2 * idx + 1] = 0;
 8009124:	2400      	movs	r4, #0
 8009126:	2000      	movs	r0, #0
 8009128:	7154      	strb	r4, [r2, #5]
 800912a:	73d0      	strb	r0, [r2, #15]
 800912c:	2400      	movs	r4, #0
 800912e:	2000      	movs	r0, #0
 8009130:	71d4      	strb	r4, [r2, #7]
 8009132:	7450      	strb	r0, [r2, #17]
 8009134:	2400      	movs	r4, #0
 8009136:	2000      	movs	r0, #0
 8009138:	7254      	strb	r4, [r2, #9]
 800913a:	74d0      	strb	r0, [r2, #19]
 800913c:	2400      	movs	r4, #0
 800913e:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 8009146:	bf94      	ite	ls
 8009148:	3330      	addls	r3, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800914a:	3337      	addhi	r3, #55	; 0x37
 800914c:	7413      	strb	r3, [r2, #16]
		if (((value >> 28)) < 0xA)
 800914e:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 8009152:	ea4f 7311 	mov.w	r3, r1, lsr #28
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009156:	bf2c      	ite	cs
 8009158:	3337      	addcs	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 800915a:	3330      	addcc	r3, #48	; 0x30
 800915c:	7493      	strb	r3, [r2, #18]
		if (((value >> 28)) < 0xA)
 800915e:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8009162:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009164:	bf8c      	ite	hi
 8009166:	3337      	addhi	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009168:	3330      	addls	r3, #48	; 0x30
 800916a:	7513      	strb	r3, [r2, #20]
		if (((value >> 28)) < 0xA)
 800916c:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8009170:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009172:	bf8c      	ite	hi
 8009174:	3337      	addhi	r3, #55	; 0x37
			pbuf[2 * idx] = (value >> 28) + '0';
 8009176:	3330      	addls	r3, #48	; 0x30
 8009178:	7593      	strb	r3, [r2, #22]
		if (((value >> 28)) < 0xA)
 800917a:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800917e:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 8009180:	bf94      	ite	ls
 8009182:	3330      	addls	r3, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009184:	3337      	addhi	r3, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 8009186:	72d4      	strb	r4, [r2, #11]
 8009188:	7550      	strb	r0, [r2, #21]
 800918a:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800918c:	7613      	strb	r3, [r2, #24]
		pbuf[2 * idx + 1] = 0;
 800918e:	2000      	movs	r0, #0
 8009190:	2300      	movs	r3, #0
 8009192:	7354      	strb	r4, [r2, #13]
 8009194:	75d0      	strb	r0, [r2, #23]
 8009196:	7653      	strb	r3, [r2, #25]
}
 8009198:	bc10      	pop	{r4}
 800919a:	4770      	bx	lr
 800919c:	1ffff7e8 	.word	0x1ffff7e8
 80091a0:	1ffff7ec 	.word	0x1ffff7ec
 80091a4:	1ffff7f0 	.word	0x1ffff7f0
 80091a8:	20000008 	.word	0x20000008

080091ac <EP1_IN_Callback.part.0>:
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
	head = serial_tx_buffer_head;
	txUsbLock = 0; // this may be removed
 80091ac:	2200      	movs	r2, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 80091ae:	2001      	movs	r0, #1
void EP1_IN_Callback(void)
 80091b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 80091b4:	4b2d      	ldr	r3, [pc, #180]	; (800926c <EP1_IN_Callback.part.0+0xc0>)

	if ((head != serial_tx_buffer_tail)) {
 80091b6:	4e2e      	ldr	r6, [pc, #184]	; (8009270 <EP1_IN_Callback.part.0+0xc4>)
	head = serial_tx_buffer_head;
 80091b8:	492e      	ldr	r1, [pc, #184]	; (8009274 <EP1_IN_Callback.part.0+0xc8>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 80091ba:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 80091bc:	701a      	strb	r2, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 80091be:	7832      	ldrb	r2, [r6, #0]
	head = serial_tx_buffer_head;
 80091c0:	780b      	ldrb	r3, [r1, #0]
	if ((head != serial_tx_buffer_tail)) {
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d044      	beq.n	8009250 <EP1_IN_Callback.part.0+0xa4>
		if (head > serial_tx_buffer_tail)
 80091c6:	7832      	ldrb	r2, [r6, #0]
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d943      	bls.n	8009254 <EP1_IN_Callback.part.0+0xa8>
			USB_Tx_length = head - serial_tx_buffer_tail;
 80091cc:	7831      	ldrb	r1, [r6, #0]
 80091ce:	1a5b      	subs	r3, r3, r1
 80091d0:	b299      	uxth	r1, r3
		else
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;

		if (USB_Tx_length != 0) {
 80091d2:	2900      	cmp	r1, #0
 80091d4:	d03c      	beq.n	8009250 <EP1_IN_Callback.part.0+0xa4>
			if (USB_Tx_length > 64)
 80091d6:	2940      	cmp	r1, #64	; 0x40
 80091d8:	bf28      	it	cs
 80091da:	2140      	movcs	r1, #64	; 0x40
				USB_Tx_length = 64;

			// UserToPMABufferCopy(&serial_tx_buffer[serial_tx_buffer_tail], ENDP1_TXADDR, USB_Tx_length);

			{
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 80091dc:	4f26      	ldr	r7, [pc, #152]	; (8009278 <EP1_IN_Callback.part.0+0xcc>)
 80091de:	7832      	ldrb	r2, [r6, #0]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 80091e0:	f101 0c01 	add.w	ip, r1, #1
				uint32_t i;
				uint16_t temp1;
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);

				for (i = 0; i<n; i++) {
 80091e4:	2400      	movs	r4, #0

					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
					pdwVal++;
					pbUsrBuf++;
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
						pbUsrBuf = serial_tx_buffer;
 80091e6:	46be      	mov	lr, r7
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 80091e8:	4d24      	ldr	r5, [pc, #144]	; (800927c <EP1_IN_Callback.part.0+0xd0>)
 80091ea:	ea4f 0c6c 	mov.w	ip, ip, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 80091ee:	443a      	add	r2, r7
				for (i = 0; i<n; i++) {
 80091f0:	e00f      	b.n	8009212 <EP1_IN_Callback.part.0+0x66>
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 80091f2:	7853      	ldrb	r3, [r2, #1]
					pbUsrBuf++;
 80091f4:	3202      	adds	r2, #2
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 80091f6:	eba2 0807 	sub.w	r8, r2, r7
				for (i = 0; i<n; i++) {
 80091fa:	3401      	adds	r4, #1
						pbUsrBuf = serial_tx_buffer;
 80091fc:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8009200:	bf08      	it	eq
 8009202:	4672      	moveq	r2, lr
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8009204:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
				for (i = 0; i<n; i++) {
 8009208:	45a4      	cmp	ip, r4
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800920a:	8028      	strh	r0, [r5, #0]
				for (i = 0; i<n; i++) {
 800920c:	f105 0504 	add.w	r5, r5, #4
 8009210:	d00f      	beq.n	8009232 <EP1_IN_Callback.part.0+0x86>
					temp1 = (uint16_t) *pbUsrBuf;
 8009212:	4613      	mov	r3, r2
 8009214:	f813 0b01 	ldrb.w	r0, [r3], #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 8009218:	1bdb      	subs	r3, r3, r7
 800921a:	2b80      	cmp	r3, #128	; 0x80
 800921c:	d1e9      	bne.n	80091f2 <EP1_IN_Callback.part.0+0x46>
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800921e:	783b      	ldrb	r3, [r7, #0]
				for (i = 0; i<n; i++) {
 8009220:	3401      	adds	r4, #1
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8009222:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
				for (i = 0; i<n; i++) {
 8009226:	45a4      	cmp	ip, r4
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 8009228:	8028      	strh	r0, [r5, #0]
					pbUsrBuf++;
 800922a:	4a15      	ldr	r2, [pc, #84]	; (8009280 <EP1_IN_Callback.part.0+0xd4>)
				for (i = 0; i<n; i++) {
 800922c:	f105 0504 	add.w	r5, r5, #4
 8009230:	d1ef      	bne.n	8009212 <EP1_IN_Callback.part.0+0x66>
					}
			}

		serial_tx_buffer_tail += USB_Tx_length;
 8009232:	7833      	ldrb	r3, [r6, #0]
 8009234:	440b      	add	r3, r1
 8009236:	b2db      	uxtb	r3, r3
 8009238:	7033      	strb	r3, [r6, #0]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800923a:	7833      	ldrb	r3, [r6, #0]
 800923c:	061b      	lsls	r3, r3, #24
 800923e:	d40f      	bmi.n	8009260 <EP1_IN_Callback.part.0+0xb4>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
 8009240:	2001      	movs	r0, #1
 8009242:	f7ff fea9 	bl	8008f98 <SetEPTxCount>
		SetEPTxValid(ENDP1);
		}
	}
}
 8009246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		SetEPTxValid(ENDP1);
 800924a:	2001      	movs	r0, #1
 800924c:	f7ff be0c 	b.w	8008e68 <SetEPTxValid>
}
 8009250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 8009254:	7832      	ldrb	r2, [r6, #0]
 8009256:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800925a:	1a89      	subs	r1, r1, r2
 800925c:	b289      	uxth	r1, r1
 800925e:	e7b8      	b.n	80091d2 <EP1_IN_Callback.part.0+0x26>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 8009260:	7833      	ldrb	r3, [r6, #0]
 8009262:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8009266:	7033      	strb	r3, [r6, #0]
 8009268:	e7ea      	b.n	8009240 <EP1_IN_Callback.part.0+0x94>
 800926a:	bf00      	nop
 800926c:	20000e84 	.word	0x20000e84
 8009270:	20000cff 	.word	0x20000cff
 8009274:	20000cfe 	.word	0x20000cfe
 8009278:	20001348 	.word	0x20001348
 800927c:	40006180 	.word	0x40006180
 8009280:	20001349 	.word	0x20001349

08009284 <EP3_OUT_Callback>:
{
 8009284:	b510      	push	{r4, lr}
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8009286:	4c07      	ldr	r4, [pc, #28]	; (80092a4 <EP3_OUT_Callback+0x20>)
 8009288:	2003      	movs	r0, #3
 800928a:	4621      	mov	r1, r4
 800928c:	f7ff fedc 	bl	8009048 <USB_SIL_Read>
 8009290:	4601      	mov	r1, r0
	OnUsbDataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8009292:	4620      	mov	r0, r4
 8009294:	b2c9      	uxtb	r1, r1
 8009296:	f7fc ff1d 	bl	80060d4 <OnUsbDataRx>
}
 800929a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SetEPRxValid(ENDP3);
 800929e:	2003      	movs	r0, #3
 80092a0:	f7ff bdf6 	b.w	8008e90 <SetEPRxValid>
 80092a4:	20001560 	.word	0x20001560

080092a8 <EP1_IN_Callback>:
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 80092a8:	4b04      	ldr	r3, [pc, #16]	; (80092bc <EP1_IN_Callback+0x14>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d101      	bne.n	80092b8 <EP1_IN_Callback+0x10>
 80092b4:	f7ff bf7a 	b.w	80091ac <EP1_IN_Callback.part.0>
}
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	40005c04 	.word	0x40005c04

080092c0 <SOF_Callback>:

/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
	if(bDeviceState == CONFIGURED)
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <SOF_Callback+0x1c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b05      	cmp	r3, #5
 80092c6:	d000      	beq.n	80092ca <SOF_Callback+0xa>
	{
		/* Check the data to be sent through IN pipe */
		EP1_IN_Callback();
	}
}
 80092c8:	4770      	bx	lr
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 80092ca:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <SOF_Callback+0x20>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d1f8      	bne.n	80092c8 <SOF_Callback+0x8>
 80092d6:	f7ff bf69 	b.w	80091ac <EP1_IN_Callback.part.0>
 80092da:	bf00      	nop
 80092dc:	20000e88 	.word	0x20000e88
 80092e0:	40005c04 	.word	0x40005c04

080092e4 <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 80092e4:	4916      	ldr	r1, [pc, #88]	; (8009340 <USB_Istr+0x5c>)
{
 80092e6:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 80092e8:	680b      	ldr	r3, [r1, #0]
 80092ea:	4c16      	ldr	r4, [pc, #88]	; (8009344 <USB_Istr+0x60>)
 80092ec:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80092ee:	4d16      	ldr	r5, [pc, #88]	; (8009348 <USB_Istr+0x64>)
  wIstr = _GetISTR();
 80092f0:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80092f2:	8822      	ldrh	r2, [r4, #0]
 80092f4:	882b      	ldrh	r3, [r5, #0]
 80092f6:	401a      	ands	r2, r3
 80092f8:	0590      	lsls	r0, r2, #22
 80092fa:	d415      	bmi.n	8009328 <USB_Istr+0x44>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80092fc:	8822      	ldrh	r2, [r4, #0]
 80092fe:	401a      	ands	r2, r3
 8009300:	0412      	lsls	r2, r2, #16
 8009302:	d40d      	bmi.n	8009320 <USB_Istr+0x3c>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8009304:	8822      	ldrh	r2, [r4, #0]
 8009306:	4013      	ands	r3, r2
 8009308:	055b      	lsls	r3, r3, #21
 800930a:	d508      	bpl.n	800931e <USB_Istr+0x3a>
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800930c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 8009310:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8009314:	4a0a      	ldr	r2, [pc, #40]	; (8009340 <USB_Istr+0x5c>)
    Device_Property.Reset();
 8009316:	4b0d      	ldr	r3, [pc, #52]	; (800934c <USB_Istr+0x68>)
    _SetISTR((uint16_t)CLR_RESET);
 8009318:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	4718      	bx	r3
} /* USB_Istr */
 800931e:	bd70      	pop	{r4, r5, r6, pc}
    CTR_LP();
 8009320:	f7ff fc6e 	bl	8008c00 <CTR_LP>
 8009324:	882b      	ldrh	r3, [r5, #0]
 8009326:	e7ed      	b.n	8009304 <USB_Istr+0x20>
    _SetISTR((uint16_t)CLR_SOF);
 8009328:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 800932c:	4a08      	ldr	r2, [pc, #32]	; (8009350 <USB_Istr+0x6c>)
    _SetISTR((uint16_t)CLR_SOF);
 800932e:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 8009330:	7813      	ldrb	r3, [r2, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	b2db      	uxtb	r3, r3
 8009336:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 8009338:	f7ff ffc2 	bl	80092c0 <SOF_Callback>
 800933c:	882b      	ldrh	r3, [r5, #0]
 800933e:	e7dd      	b.n	80092fc <USB_Istr+0x18>
 8009340:	40005c44 	.word	0x40005c44
 8009344:	200015a0 	.word	0x200015a0
 8009348:	20001558 	.word	0x20001558
 800934c:	2000006c 	.word	0x2000006c
 8009350:	20000e85 	.word	0x20000e85

08009354 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8009354:	4b03      	ldr	r3, [pc, #12]	; (8009364 <Virtual_Com_Port_SetConfiguration+0x10>)
 8009356:	7a9b      	ldrb	r3, [r3, #10]
 8009358:	b113      	cbz	r3, 8009360 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800935a:	2205      	movs	r2, #5
 800935c:	4b02      	ldr	r3, [pc, #8]	; (8009368 <Virtual_Com_Port_SetConfiguration+0x14>)
 800935e:	601a      	str	r2, [r3, #0]
  }
}
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20001534 	.word	0x20001534
 8009368:	20000e88 	.word	0x20000e88

0800936c <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800936c:	2204      	movs	r2, #4
 800936e:	4b01      	ldr	r3, [pc, #4]	; (8009374 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	4770      	bx	lr
 8009374:	20000e88 	.word	0x20000e88

08009378 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8009378:	4b03      	ldr	r3, [pc, #12]	; (8009388 <Virtual_Com_Port_Status_In+0x10>)
 800937a:	781a      	ldrb	r2, [r3, #0]
 800937c:	2a20      	cmp	r2, #32
  {
    Request = 0;
 800937e:	bf04      	itt	eq
 8009380:	2200      	moveq	r2, #0
 8009382:	701a      	strbeq	r2, [r3, #0]
  }
}
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	20000e86 	.word	0x20000e86

0800938c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop

08009390 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8009390:	2821      	cmp	r0, #33	; 0x21
 8009392:	d016      	beq.n	80093c2 <Virtual_Com_Port_Data_Setup+0x32>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8009394:	2820      	cmp	r0, #32
 8009396:	4603      	mov	r3, r0
 8009398:	d111      	bne.n	80093be <Virtual_Com_Port_Data_Setup+0x2e>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800939a:	4a10      	ldr	r2, [pc, #64]	; (80093dc <Virtual_Com_Port_Data_Setup+0x4c>)
 800939c:	6812      	ldr	r2, [r2, #0]
 800939e:	7811      	ldrb	r1, [r2, #0]
 80093a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80093a4:	2921      	cmp	r1, #33	; 0x21
 80093a6:	d115      	bne.n	80093d4 <Virtual_Com_Port_Data_Setup+0x44>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 80093a8:	480d      	ldr	r0, [pc, #52]	; (80093e0 <Virtual_Com_Port_Data_Setup+0x50>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 80093aa:	490e      	ldr	r1, [pc, #56]	; (80093e4 <Virtual_Com_Port_Data_Setup+0x54>)
    Request = SET_LINE_CODING;
 80093ac:	7003      	strb	r3, [r0, #0]
{
 80093ae:	b510      	push	{r4, lr}
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80093b0:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80093b2:	6191      	str	r1, [r2, #24]
  (*CopyRoutine)(0);
 80093b4:	4620      	mov	r0, r4
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80093b6:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 80093b8:	4788      	blx	r1
  return USB_SUCCESS;
 80093ba:	4620      	mov	r0, r4
}
 80093bc:	bd10      	pop	{r4, pc}
    return USB_UNSUPPORT;
 80093be:	2002      	movs	r0, #2
}
 80093c0:	4770      	bx	lr
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80093c2:	4b06      	ldr	r3, [pc, #24]	; (80093dc <Virtual_Com_Port_Data_Setup+0x4c>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	7813      	ldrb	r3, [r2, #0]
 80093c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093cc:	2b21      	cmp	r3, #33	; 0x21
 80093ce:	d1f6      	bne.n	80093be <Virtual_Com_Port_Data_Setup+0x2e>
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 80093d0:	4905      	ldr	r1, [pc, #20]	; (80093e8 <Virtual_Com_Port_Data_Setup+0x58>)
 80093d2:	e7ec      	b.n	80093ae <Virtual_Com_Port_Data_Setup+0x1e>
    Request = SET_LINE_CODING;
 80093d4:	4a02      	ldr	r2, [pc, #8]	; (80093e0 <Virtual_Com_Port_Data_Setup+0x50>)
    return USB_UNSUPPORT;
 80093d6:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 80093d8:	7013      	strb	r3, [r2, #0]
  if (CopyRoutine == NULL)
 80093da:	4770      	bx	lr
 80093dc:	20001554 	.word	0x20001554
 80093e0:	20000e86 	.word	0x20000e86
 80093e4:	08009575 	.word	0x08009575
 80093e8:	080093fd 	.word	0x080093fd

080093ec <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 80093ec:	b921      	cbnz	r1, 80093f8 <Virtual_Com_Port_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
 80093ee:	2801      	cmp	r0, #1
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 80093f0:	bf8c      	ite	hi
 80093f2:	2002      	movhi	r0, #2
 80093f4:	2000      	movls	r0, #0
 80093f6:	4770      	bx	lr
    return USB_UNSUPPORT;
 80093f8:	2002      	movs	r0, #2
}
 80093fa:	4770      	bx	lr

080093fc <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80093fc:	b108      	cbz	r0, 8009402 <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80093fe:	4803      	ldr	r0, [pc, #12]	; (800940c <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8009400:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8009402:	2208      	movs	r2, #8
 8009404:	4b02      	ldr	r3, [pc, #8]	; (8009410 <Virtual_Com_Port_GetLineCoding+0x14>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	821a      	strh	r2, [r3, #16]
    return NULL;
 800940a:	4770      	bx	lr
 800940c:	200000e4 	.word	0x200000e4
 8009410:	20001554 	.word	0x20001554

08009414 <Virtual_Com_Port_init>:
{
 8009414:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 8009416:	2400      	movs	r4, #0
  Get_SerialNum();
 8009418:	f7ff fe46 	bl	80090a8 <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <Virtual_Com_Port_init+0x1c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	729c      	strb	r4, [r3, #10]
  PowerOn();
 8009422:	f000 f8b3 	bl	800958c <PowerOn>
  USB_SIL_Init();
 8009426:	f7ff fdfd 	bl	8009024 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 800942a:	4b02      	ldr	r3, [pc, #8]	; (8009434 <Virtual_Com_Port_init+0x20>)
 800942c:	601c      	str	r4, [r3, #0]
}
 800942e:	bd10      	pop	{r4, pc}
 8009430:	20001554 	.word	0x20001554
 8009434:	20000e88 	.word	0x20000e88

08009438 <Virtual_Com_Port_Reset>:
{
 8009438:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800943a:	2400      	movs	r4, #0
 800943c:	4b32      	ldr	r3, [pc, #200]	; (8009508 <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800943e:	4a33      	ldr	r2, [pc, #204]	; (800950c <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 8009440:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8009442:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 8009444:	815c      	strh	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8009446:	725a      	strb	r2, [r3, #9]
  SetBTABLE(BTABLE_ADDRESS);
 8009448:	4620      	mov	r0, r4
 800944a:	f7ff fcc3 	bl	8008dd4 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 800944e:	4620      	mov	r0, r4
 8009450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009454:	f7ff fcc6 	bl	8008de4 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8009458:	4620      	mov	r0, r4
 800945a:	2110      	movs	r1, #16
 800945c:	f7ff fcd0 	bl	8008e00 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8009460:	4620      	mov	r0, r4
 8009462:	2140      	movs	r1, #64	; 0x40
 8009464:	f7ff fd6c 	bl	8008f40 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8009468:	2180      	movs	r1, #128	; 0x80
 800946a:	4620      	mov	r0, r4
 800946c:	f7ff fd58 	bl	8008f20 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 8009470:	4620      	mov	r0, r4
 8009472:	f7ff fd21 	bl	8008eb8 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8009476:	4b26      	ldr	r3, [pc, #152]	; (8009510 <Virtual_Com_Port_Reset+0xd8>)
 8009478:	4620      	mov	r0, r4
 800947a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800947e:	f7ff fd99 	bl	8008fb4 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 8009482:	4620      	mov	r0, r4
 8009484:	f7ff fd04 	bl	8008e90 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 8009488:	4621      	mov	r1, r4
 800948a:	2001      	movs	r0, #1
 800948c:	f7ff fcaa 	bl	8008de4 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8009490:	21c0      	movs	r1, #192	; 0xc0
 8009492:	2001      	movs	r0, #1
 8009494:	f7ff fd44 	bl	8008f20 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8009498:	2120      	movs	r1, #32
 800949a:	2001      	movs	r0, #1
 800949c:	f7ff fcb0 	bl	8008e00 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80094a0:	4621      	mov	r1, r4
 80094a2:	2001      	movs	r0, #1
 80094a4:	f7ff fcc6 	bl	8008e34 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 80094a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80094ac:	2002      	movs	r0, #2
 80094ae:	f7ff fc99 	bl	8008de4 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80094b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80094b6:	2002      	movs	r0, #2
 80094b8:	f7ff fd32 	bl	8008f20 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 80094bc:	4621      	mov	r1, r4
 80094be:	2002      	movs	r0, #2
 80094c0:	f7ff fcb8 	bl	8008e34 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 80094c4:	2120      	movs	r1, #32
 80094c6:	2002      	movs	r0, #2
 80094c8:	f7ff fc9a 	bl	8008e00 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 80094cc:	4621      	mov	r1, r4
 80094ce:	2003      	movs	r0, #3
 80094d0:	f7ff fc88 	bl	8008de4 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 80094d4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80094d8:	2003      	movs	r0, #3
 80094da:	f7ff fd31 	bl	8008f40 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 80094de:	2140      	movs	r1, #64	; 0x40
 80094e0:	2003      	movs	r0, #3
 80094e2:	f7ff fd67 	bl	8008fb4 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 80094e6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80094ea:	2003      	movs	r0, #3
 80094ec:	f7ff fca2 	bl	8008e34 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 80094f0:	4621      	mov	r1, r4
 80094f2:	2003      	movs	r0, #3
 80094f4:	f7ff fc84 	bl	8008e00 <SetEPTxStatus>
  SetDeviceAddress(0);
 80094f8:	4620      	mov	r0, r4
 80094fa:	f7ff fb43 	bl	8008b84 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 80094fe:	2201      	movs	r2, #1
 8009500:	4b04      	ldr	r3, [pc, #16]	; (8009514 <Virtual_Com_Port_Reset+0xdc>)
 8009502:	601a      	str	r2, [r3, #0]
}
 8009504:	bd10      	pop	{r4, pc}
 8009506:	bf00      	nop
 8009508:	20001554 	.word	0x20001554
 800950c:	0800aa68 	.word	0x0800aa68
 8009510:	2000006c 	.word	0x2000006c
 8009514:	20000e88 	.word	0x20000e88

08009518 <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8009518:	4901      	ldr	r1, [pc, #4]	; (8009520 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 800951a:	f7ff b861 	b.w	80085e0 <Standard_GetDescriptorData>
 800951e:	bf00      	nop
 8009520:	20000064 	.word	0x20000064

08009524 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8009524:	4901      	ldr	r1, [pc, #4]	; (800952c <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 8009526:	f7ff b85b 	b.w	80085e0 <Standard_GetDescriptorData>
 800952a:	bf00      	nop
 800952c:	2000005c 	.word	0x2000005c

08009530 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 8009530:	4b05      	ldr	r3, [pc, #20]	; (8009548 <Virtual_Com_Port_GetStringDescriptor+0x18>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8009536:	2b04      	cmp	r3, #4
 8009538:	d804      	bhi.n	8009544 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800953a:	4904      	ldr	r1, [pc, #16]	; (800954c <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800953c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009540:	f7ff b84e 	b.w	80085e0 <Standard_GetDescriptorData>
}
 8009544:	2000      	movs	r0, #0
 8009546:	4770      	bx	lr
 8009548:	20001554 	.word	0x20001554
 800954c:	200000a0 	.word	0x200000a0

08009550 <Virtual_Com_Port_NoData_Setup>:
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <Virtual_Com_Port_NoData_Setup+0x20>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800955a:	2b21      	cmp	r3, #33	; 0x21
 800955c:	d001      	beq.n	8009562 <Virtual_Com_Port_NoData_Setup+0x12>
  return USB_UNSUPPORT;
 800955e:	2002      	movs	r0, #2
}
 8009560:	4770      	bx	lr
    if (RequestNo == SET_COMM_FEATURE)
 8009562:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009566:	2802      	cmp	r0, #2
      return USB_SUCCESS;
 8009568:	bf14      	ite	ne
 800956a:	2002      	movne	r0, #2
 800956c:	2000      	moveq	r0, #0
 800956e:	4770      	bx	lr
 8009570:	20001554 	.word	0x20001554

08009574 <Virtual_Com_Port_SetLineCoding>:
 8009574:	b108      	cbz	r0, 800957a <Virtual_Com_Port_SetLineCoding+0x6>
 8009576:	4803      	ldr	r0, [pc, #12]	; (8009584 <Virtual_Com_Port_SetLineCoding+0x10>)
 8009578:	4770      	bx	lr
 800957a:	2208      	movs	r2, #8
 800957c:	4b02      	ldr	r3, [pc, #8]	; (8009588 <Virtual_Com_Port_SetLineCoding+0x14>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	821a      	strh	r2, [r3, #16]
 8009582:	4770      	bx	lr
 8009584:	200000e4 	.word	0x200000e4
 8009588:	20001554 	.word	0x20001554

0800958c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800958c:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800958e:	2001      	movs	r0, #1
 8009590:	f7ff fd88 	bl	80090a4 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8009594:	2501      	movs	r5, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8009596:	2000      	movs	r0, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8009598:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 800959c:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <PowerOn+0x24>)
  _SetISTR(0);
 800959e:	4c05      	ldr	r4, [pc, #20]	; (80095b4 <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80095a0:	4905      	ldr	r1, [pc, #20]	; (80095b8 <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 80095a2:	601d      	str	r5, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 80095a4:	6018      	str	r0, [r3, #0]
  _SetISTR(0);
 80095a6:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80095a8:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 80095aa:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
 80095ae:	bf00      	nop
 80095b0:	40005c40 	.word	0x40005c40
 80095b4:	40005c44 	.word	0x40005c44
 80095b8:	20001558 	.word	0x20001558

080095bc <NMI_Handler>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
}
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <HardFault_Handler>:
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80095c0:	e7fe      	b.n	80095c0 <HardFault_Handler>
 80095c2:	bf00      	nop

080095c4 <MemManage_Handler>:
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80095c4:	e7fe      	b.n	80095c4 <MemManage_Handler>
 80095c6:	bf00      	nop

080095c8 <BusFault_Handler>:
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80095c8:	e7fe      	b.n	80095c8 <BusFault_Handler>
 80095ca:	bf00      	nop

080095cc <UsageFault_Handler>:
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80095cc:	e7fe      	b.n	80095cc <UsageFault_Handler>
 80095ce:	bf00      	nop

080095d0 <SVC_Handler>:
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop

080095d4 <DebugMon_Handler>:
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop

080095d8 <PendSV_Handler>:
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop

080095dc <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 80095dc:	f7ff be82 	b.w	80092e4 <USB_Istr>

080095e0 <__libc_init_array>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	2600      	movs	r6, #0
 80095e4:	4d0c      	ldr	r5, [pc, #48]	; (8009618 <__libc_init_array+0x38>)
 80095e6:	4c0d      	ldr	r4, [pc, #52]	; (800961c <__libc_init_array+0x3c>)
 80095e8:	1b64      	subs	r4, r4, r5
 80095ea:	10a4      	asrs	r4, r4, #2
 80095ec:	42a6      	cmp	r6, r4
 80095ee:	d109      	bne.n	8009604 <__libc_init_array+0x24>
 80095f0:	f001 f916 	bl	800a820 <_init>
 80095f4:	2600      	movs	r6, #0
 80095f6:	4d0a      	ldr	r5, [pc, #40]	; (8009620 <__libc_init_array+0x40>)
 80095f8:	4c0a      	ldr	r4, [pc, #40]	; (8009624 <__libc_init_array+0x44>)
 80095fa:	1b64      	subs	r4, r4, r5
 80095fc:	10a4      	asrs	r4, r4, #2
 80095fe:	42a6      	cmp	r6, r4
 8009600:	d105      	bne.n	800960e <__libc_init_array+0x2e>
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	f855 3b04 	ldr.w	r3, [r5], #4
 8009608:	4798      	blx	r3
 800960a:	3601      	adds	r6, #1
 800960c:	e7ee      	b.n	80095ec <__libc_init_array+0xc>
 800960e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009612:	4798      	blx	r3
 8009614:	3601      	adds	r6, #1
 8009616:	e7f2      	b.n	80095fe <__libc_init_array+0x1e>
 8009618:	0800af04 	.word	0x0800af04
 800961c:	0800af04 	.word	0x0800af04
 8009620:	0800af04 	.word	0x0800af04
 8009624:	0800af0c 	.word	0x0800af0c

08009628 <memcmp>:
 8009628:	b530      	push	{r4, r5, lr}
 800962a:	2400      	movs	r4, #0
 800962c:	3901      	subs	r1, #1
 800962e:	42a2      	cmp	r2, r4
 8009630:	d101      	bne.n	8009636 <memcmp+0xe>
 8009632:	2000      	movs	r0, #0
 8009634:	e005      	b.n	8009642 <memcmp+0x1a>
 8009636:	5d03      	ldrb	r3, [r0, r4]
 8009638:	3401      	adds	r4, #1
 800963a:	5d0d      	ldrb	r5, [r1, r4]
 800963c:	42ab      	cmp	r3, r5
 800963e:	d0f6      	beq.n	800962e <memcmp+0x6>
 8009640:	1b58      	subs	r0, r3, r5
 8009642:	bd30      	pop	{r4, r5, pc}

08009644 <memset>:
 8009644:	4603      	mov	r3, r0
 8009646:	4402      	add	r2, r0
 8009648:	4293      	cmp	r3, r2
 800964a:	d100      	bne.n	800964e <memset+0xa>
 800964c:	4770      	bx	lr
 800964e:	f803 1b01 	strb.w	r1, [r3], #1
 8009652:	e7f9      	b.n	8009648 <memset+0x4>

08009654 <register_fini>:
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <register_fini+0xc>)
 8009656:	b113      	cbz	r3, 800965e <register_fini+0xa>
 8009658:	4802      	ldr	r0, [pc, #8]	; (8009664 <register_fini+0x10>)
 800965a:	f000 b805 	b.w	8009668 <atexit>
 800965e:	4770      	bx	lr
 8009660:	00000000 	.word	0x00000000
 8009664:	08009675 	.word	0x08009675

08009668 <atexit>:
 8009668:	2300      	movs	r3, #0
 800966a:	4601      	mov	r1, r0
 800966c:	461a      	mov	r2, r3
 800966e:	4618      	mov	r0, r3
 8009670:	f000 b816 	b.w	80096a0 <__register_exitproc>

08009674 <__libc_fini_array>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d07      	ldr	r5, [pc, #28]	; (8009694 <__libc_fini_array+0x20>)
 8009678:	4c07      	ldr	r4, [pc, #28]	; (8009698 <__libc_fini_array+0x24>)
 800967a:	1b64      	subs	r4, r4, r5
 800967c:	10a4      	asrs	r4, r4, #2
 800967e:	b91c      	cbnz	r4, 8009688 <__libc_fini_array+0x14>
 8009680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009684:	f001 b8d2 	b.w	800a82c <_fini>
 8009688:	3c01      	subs	r4, #1
 800968a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800968e:	4798      	blx	r3
 8009690:	e7f5      	b.n	800967e <__libc_fini_array+0xa>
 8009692:	bf00      	nop
 8009694:	0800af0c 	.word	0x0800af0c
 8009698:	0800af10 	.word	0x0800af10

0800969c <__retarget_lock_acquire_recursive>:
 800969c:	4770      	bx	lr

0800969e <__retarget_lock_release_recursive>:
 800969e:	4770      	bx	lr

080096a0 <__register_exitproc>:
 80096a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a4:	4d1c      	ldr	r5, [pc, #112]	; (8009718 <__register_exitproc+0x78>)
 80096a6:	4606      	mov	r6, r0
 80096a8:	6828      	ldr	r0, [r5, #0]
 80096aa:	4698      	mov	r8, r3
 80096ac:	460f      	mov	r7, r1
 80096ae:	4691      	mov	r9, r2
 80096b0:	f7ff fff4 	bl	800969c <__retarget_lock_acquire_recursive>
 80096b4:	4b19      	ldr	r3, [pc, #100]	; (800971c <__register_exitproc+0x7c>)
 80096b6:	4628      	mov	r0, r5
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80096be:	b91c      	cbnz	r4, 80096c8 <__register_exitproc+0x28>
 80096c0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80096c4:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80096c8:	6865      	ldr	r5, [r4, #4]
 80096ca:	6800      	ldr	r0, [r0, #0]
 80096cc:	2d1f      	cmp	r5, #31
 80096ce:	dd05      	ble.n	80096dc <__register_exitproc+0x3c>
 80096d0:	f7ff ffe5 	bl	800969e <__retarget_lock_release_recursive>
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096dc:	b19e      	cbz	r6, 8009706 <__register_exitproc+0x66>
 80096de:	2201      	movs	r2, #1
 80096e0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80096e4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80096e8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80096ec:	40aa      	lsls	r2, r5
 80096ee:	4313      	orrs	r3, r2
 80096f0:	2e02      	cmp	r6, #2
 80096f2:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80096f6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80096fa:	bf02      	ittt	eq
 80096fc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8009700:	431a      	orreq	r2, r3
 8009702:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8009706:	1c6b      	adds	r3, r5, #1
 8009708:	3502      	adds	r5, #2
 800970a:	6063      	str	r3, [r4, #4]
 800970c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009710:	f7ff ffc5 	bl	800969e <__retarget_lock_release_recursive>
 8009714:	2000      	movs	r0, #0
 8009716:	e7df      	b.n	80096d8 <__register_exitproc+0x38>
 8009718:	20000518 	.word	0x20000518
 800971c:	0800aaf8 	.word	0x0800aaf8

08009720 <ceilf>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009726:	3d7f      	subs	r5, #127	; 0x7f
 8009728:	2d16      	cmp	r5, #22
 800972a:	4601      	mov	r1, r0
 800972c:	4604      	mov	r4, r0
 800972e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009732:	dc26      	bgt.n	8009782 <ceilf+0x62>
 8009734:	2d00      	cmp	r5, #0
 8009736:	da0e      	bge.n	8009756 <ceilf+0x36>
 8009738:	4917      	ldr	r1, [pc, #92]	; (8009798 <ceilf+0x78>)
 800973a:	f7f6 ffa3 	bl	8000684 <__addsf3>
 800973e:	2100      	movs	r1, #0
 8009740:	f7f7 fa64 	bl	8000c0c <__aeabi_fcmpgt>
 8009744:	b128      	cbz	r0, 8009752 <ceilf+0x32>
 8009746:	2c00      	cmp	r4, #0
 8009748:	db23      	blt.n	8009792 <ceilf+0x72>
 800974a:	2e00      	cmp	r6, #0
 800974c:	bf18      	it	ne
 800974e:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8009752:	4621      	mov	r1, r4
 8009754:	e01b      	b.n	800978e <ceilf+0x6e>
 8009756:	4e11      	ldr	r6, [pc, #68]	; (800979c <ceilf+0x7c>)
 8009758:	412e      	asrs	r6, r5
 800975a:	4230      	tst	r0, r6
 800975c:	d017      	beq.n	800978e <ceilf+0x6e>
 800975e:	490e      	ldr	r1, [pc, #56]	; (8009798 <ceilf+0x78>)
 8009760:	f7f6 ff90 	bl	8000684 <__addsf3>
 8009764:	2100      	movs	r1, #0
 8009766:	f7f7 fa51 	bl	8000c0c <__aeabi_fcmpgt>
 800976a:	2800      	cmp	r0, #0
 800976c:	d0f1      	beq.n	8009752 <ceilf+0x32>
 800976e:	2c00      	cmp	r4, #0
 8009770:	bfc2      	ittt	gt
 8009772:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8009776:	fa43 f505 	asrgt.w	r5, r3, r5
 800977a:	1964      	addgt	r4, r4, r5
 800977c:	ea24 0406 	bic.w	r4, r4, r6
 8009780:	e7e7      	b.n	8009752 <ceilf+0x32>
 8009782:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009786:	d302      	bcc.n	800978e <ceilf+0x6e>
 8009788:	f7f6 ff7c 	bl	8000684 <__addsf3>
 800978c:	4601      	mov	r1, r0
 800978e:	4608      	mov	r0, r1
 8009790:	bd70      	pop	{r4, r5, r6, pc}
 8009792:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009796:	e7dc      	b.n	8009752 <ceilf+0x32>
 8009798:	7149f2ca 	.word	0x7149f2ca
 800979c:	007fffff 	.word	0x007fffff

080097a0 <cosf>:
 80097a0:	b507      	push	{r0, r1, r2, lr}
 80097a2:	4a18      	ldr	r2, [pc, #96]	; (8009804 <cosf+0x64>)
 80097a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80097a8:	4293      	cmp	r3, r2
 80097aa:	4601      	mov	r1, r0
 80097ac:	dc03      	bgt.n	80097b6 <cosf+0x16>
 80097ae:	2100      	movs	r1, #0
 80097b0:	f000 fb28 	bl	8009e04 <__kernel_cosf>
 80097b4:	e004      	b.n	80097c0 <cosf+0x20>
 80097b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80097ba:	db04      	blt.n	80097c6 <cosf+0x26>
 80097bc:	f7f6 ff60 	bl	8000680 <__aeabi_fsub>
 80097c0:	b003      	add	sp, #12
 80097c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80097c6:	4669      	mov	r1, sp
 80097c8:	f000 f96c 	bl	8009aa4 <__ieee754_rem_pio2f>
 80097cc:	f000 0203 	and.w	r2, r0, #3
 80097d0:	2a01      	cmp	r2, #1
 80097d2:	d005      	beq.n	80097e0 <cosf+0x40>
 80097d4:	2a02      	cmp	r2, #2
 80097d6:	d00a      	beq.n	80097ee <cosf+0x4e>
 80097d8:	b972      	cbnz	r2, 80097f8 <cosf+0x58>
 80097da:	9901      	ldr	r1, [sp, #4]
 80097dc:	9800      	ldr	r0, [sp, #0]
 80097de:	e7e7      	b.n	80097b0 <cosf+0x10>
 80097e0:	9901      	ldr	r1, [sp, #4]
 80097e2:	9800      	ldr	r0, [sp, #0]
 80097e4:	f000 fe44 	bl	800a470 <__kernel_sinf>
 80097e8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80097ec:	e7e8      	b.n	80097c0 <cosf+0x20>
 80097ee:	9901      	ldr	r1, [sp, #4]
 80097f0:	9800      	ldr	r0, [sp, #0]
 80097f2:	f000 fb07 	bl	8009e04 <__kernel_cosf>
 80097f6:	e7f7      	b.n	80097e8 <cosf+0x48>
 80097f8:	2201      	movs	r2, #1
 80097fa:	9901      	ldr	r1, [sp, #4]
 80097fc:	9800      	ldr	r0, [sp, #0]
 80097fe:	f000 fe37 	bl	800a470 <__kernel_sinf>
 8009802:	e7dd      	b.n	80097c0 <cosf+0x20>
 8009804:	3f490fd8 	.word	0x3f490fd8

08009808 <floorf>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800980e:	3d7f      	subs	r5, #127	; 0x7f
 8009810:	2d16      	cmp	r5, #22
 8009812:	4601      	mov	r1, r0
 8009814:	4604      	mov	r4, r0
 8009816:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800981a:	dc26      	bgt.n	800986a <floorf+0x62>
 800981c:	2d00      	cmp	r5, #0
 800981e:	da0e      	bge.n	800983e <floorf+0x36>
 8009820:	4917      	ldr	r1, [pc, #92]	; (8009880 <floorf+0x78>)
 8009822:	f7f6 ff2f 	bl	8000684 <__addsf3>
 8009826:	2100      	movs	r1, #0
 8009828:	f7f7 f9f0 	bl	8000c0c <__aeabi_fcmpgt>
 800982c:	b128      	cbz	r0, 800983a <floorf+0x32>
 800982e:	2c00      	cmp	r4, #0
 8009830:	da23      	bge.n	800987a <floorf+0x72>
 8009832:	4b14      	ldr	r3, [pc, #80]	; (8009884 <floorf+0x7c>)
 8009834:	2e00      	cmp	r6, #0
 8009836:	bf18      	it	ne
 8009838:	461c      	movne	r4, r3
 800983a:	4621      	mov	r1, r4
 800983c:	e01b      	b.n	8009876 <floorf+0x6e>
 800983e:	4e12      	ldr	r6, [pc, #72]	; (8009888 <floorf+0x80>)
 8009840:	412e      	asrs	r6, r5
 8009842:	4230      	tst	r0, r6
 8009844:	d017      	beq.n	8009876 <floorf+0x6e>
 8009846:	490e      	ldr	r1, [pc, #56]	; (8009880 <floorf+0x78>)
 8009848:	f7f6 ff1c 	bl	8000684 <__addsf3>
 800984c:	2100      	movs	r1, #0
 800984e:	f7f7 f9dd 	bl	8000c0c <__aeabi_fcmpgt>
 8009852:	2800      	cmp	r0, #0
 8009854:	d0f1      	beq.n	800983a <floorf+0x32>
 8009856:	2c00      	cmp	r4, #0
 8009858:	bfbe      	ittt	lt
 800985a:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800985e:	fa43 f505 	asrlt.w	r5, r3, r5
 8009862:	1964      	addlt	r4, r4, r5
 8009864:	ea24 0406 	bic.w	r4, r4, r6
 8009868:	e7e7      	b.n	800983a <floorf+0x32>
 800986a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800986e:	d302      	bcc.n	8009876 <floorf+0x6e>
 8009870:	f7f6 ff08 	bl	8000684 <__addsf3>
 8009874:	4601      	mov	r1, r0
 8009876:	4608      	mov	r0, r1
 8009878:	bd70      	pop	{r4, r5, r6, pc}
 800987a:	2400      	movs	r4, #0
 800987c:	e7dd      	b.n	800983a <floorf+0x32>
 800987e:	bf00      	nop
 8009880:	7149f2ca 	.word	0x7149f2ca
 8009884:	bf800000 	.word	0xbf800000
 8009888:	007fffff 	.word	0x007fffff

0800988c <lroundf>:
 800988c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009890:	2800      	cmp	r0, #0
 8009892:	b510      	push	{r4, lr}
 8009894:	f1a3 047f 	sub.w	r4, r3, #127	; 0x7f
 8009898:	bfb4      	ite	lt
 800989a:	f04f 31ff 	movlt.w	r1, #4294967295
 800989e:	2101      	movge	r1, #1
 80098a0:	2c1e      	cmp	r4, #30
 80098a2:	dc1b      	bgt.n	80098dc <lroundf+0x50>
 80098a4:	2c00      	cmp	r4, #0
 80098a6:	da04      	bge.n	80098b2 <lroundf+0x26>
 80098a8:	3401      	adds	r4, #1
 80098aa:	bf18      	it	ne
 80098ac:	2100      	movne	r1, #0
 80098ae:	4608      	mov	r0, r1
 80098b0:	bd10      	pop	{r4, pc}
 80098b2:	2c16      	cmp	r4, #22
 80098b4:	bfd8      	it	le
 80098b6:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 80098ba:	f3c0 0216 	ubfx	r2, r0, #0, #23
 80098be:	bfd8      	it	le
 80098c0:	4123      	asrle	r3, r4
 80098c2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80098c6:	bfcd      	iteet	gt
 80098c8:	3b96      	subgt	r3, #150	; 0x96
 80098ca:	189b      	addle	r3, r3, r2
 80098cc:	f1c4 0417 	rsble	r4, r4, #23
 80098d0:	fa02 f303 	lslgt.w	r3, r2, r3
 80098d4:	bfd8      	it	le
 80098d6:	40e3      	lsrle	r3, r4
 80098d8:	4359      	muls	r1, r3
 80098da:	e7e8      	b.n	80098ae <lroundf+0x22>
 80098dc:	f7f7 f9b6 	bl	8000c4c <__aeabi_f2iz>
 80098e0:	4601      	mov	r1, r0
 80098e2:	e7e4      	b.n	80098ae <lroundf+0x22>

080098e4 <sinf>:
 80098e4:	b507      	push	{r0, r1, r2, lr}
 80098e6:	4a19      	ldr	r2, [pc, #100]	; (800994c <sinf+0x68>)
 80098e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80098ec:	4293      	cmp	r3, r2
 80098ee:	4601      	mov	r1, r0
 80098f0:	dc04      	bgt.n	80098fc <sinf+0x18>
 80098f2:	2200      	movs	r2, #0
 80098f4:	2100      	movs	r1, #0
 80098f6:	f000 fdbb 	bl	800a470 <__kernel_sinf>
 80098fa:	e004      	b.n	8009906 <sinf+0x22>
 80098fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009900:	db04      	blt.n	800990c <sinf+0x28>
 8009902:	f7f6 febd 	bl	8000680 <__aeabi_fsub>
 8009906:	b003      	add	sp, #12
 8009908:	f85d fb04 	ldr.w	pc, [sp], #4
 800990c:	4669      	mov	r1, sp
 800990e:	f000 f8c9 	bl	8009aa4 <__ieee754_rem_pio2f>
 8009912:	f000 0003 	and.w	r0, r0, #3
 8009916:	2801      	cmp	r0, #1
 8009918:	d006      	beq.n	8009928 <sinf+0x44>
 800991a:	2802      	cmp	r0, #2
 800991c:	d009      	beq.n	8009932 <sinf+0x4e>
 800991e:	b980      	cbnz	r0, 8009942 <sinf+0x5e>
 8009920:	2201      	movs	r2, #1
 8009922:	9901      	ldr	r1, [sp, #4]
 8009924:	9800      	ldr	r0, [sp, #0]
 8009926:	e7e6      	b.n	80098f6 <sinf+0x12>
 8009928:	9901      	ldr	r1, [sp, #4]
 800992a:	9800      	ldr	r0, [sp, #0]
 800992c:	f000 fa6a 	bl	8009e04 <__kernel_cosf>
 8009930:	e7e9      	b.n	8009906 <sinf+0x22>
 8009932:	2201      	movs	r2, #1
 8009934:	9901      	ldr	r1, [sp, #4]
 8009936:	9800      	ldr	r0, [sp, #0]
 8009938:	f000 fd9a 	bl	800a470 <__kernel_sinf>
 800993c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009940:	e7e1      	b.n	8009906 <sinf+0x22>
 8009942:	9901      	ldr	r1, [sp, #4]
 8009944:	9800      	ldr	r0, [sp, #0]
 8009946:	f000 fa5d 	bl	8009e04 <__kernel_cosf>
 800994a:	e7f7      	b.n	800993c <sinf+0x58>
 800994c:	3f490fd8 	.word	0x3f490fd8

08009950 <atan2f>:
 8009950:	f000 b822 	b.w	8009998 <__ieee754_atan2f>

08009954 <sqrtf>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4605      	mov	r5, r0
 8009958:	f000 fa02 	bl	8009d60 <__ieee754_sqrtf>
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <sqrtf+0x40>)
 800995e:	4604      	mov	r4, r0
 8009960:	f993 3000 	ldrsb.w	r3, [r3]
 8009964:	3301      	adds	r3, #1
 8009966:	d012      	beq.n	800998e <sqrtf+0x3a>
 8009968:	4629      	mov	r1, r5
 800996a:	4628      	mov	r0, r5
 800996c:	f7f7 f958 	bl	8000c20 <__aeabi_fcmpun>
 8009970:	b968      	cbnz	r0, 800998e <sqrtf+0x3a>
 8009972:	2100      	movs	r1, #0
 8009974:	4628      	mov	r0, r5
 8009976:	f7f7 f92b 	bl	8000bd0 <__aeabi_fcmplt>
 800997a:	b140      	cbz	r0, 800998e <sqrtf+0x3a>
 800997c:	f000 ff4a 	bl	800a814 <__errno>
 8009980:	2321      	movs	r3, #33	; 0x21
 8009982:	2100      	movs	r1, #0
 8009984:	6003      	str	r3, [r0, #0]
 8009986:	4608      	mov	r0, r1
 8009988:	f7f7 f838 	bl	80009fc <__aeabi_fdiv>
 800998c:	4604      	mov	r4, r0
 800998e:	4620      	mov	r0, r4
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	bf00      	nop
 8009994:	2000051c 	.word	0x2000051c

08009998 <__ieee754_atan2f>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800999e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80099a2:	4603      	mov	r3, r0
 80099a4:	dc05      	bgt.n	80099b2 <__ieee754_atan2f+0x1a>
 80099a6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80099aa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80099ae:	4607      	mov	r7, r0
 80099b0:	dd04      	ble.n	80099bc <__ieee754_atan2f+0x24>
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7f6 fe66 	bl	8000684 <__addsf3>
 80099b8:	4603      	mov	r3, r0
 80099ba:	e011      	b.n	80099e0 <__ieee754_atan2f+0x48>
 80099bc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80099c0:	d103      	bne.n	80099ca <__ieee754_atan2f+0x32>
 80099c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80099c6:	f000 bdc9 	b.w	800a55c <atanf>
 80099ca:	178c      	asrs	r4, r1, #30
 80099cc:	f004 0402 	and.w	r4, r4, #2
 80099d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80099d4:	b932      	cbnz	r2, 80099e4 <__ieee754_atan2f+0x4c>
 80099d6:	2c02      	cmp	r4, #2
 80099d8:	d04c      	beq.n	8009a74 <__ieee754_atan2f+0xdc>
 80099da:	2c03      	cmp	r4, #3
 80099dc:	d100      	bne.n	80099e0 <__ieee754_atan2f+0x48>
 80099de:	4b29      	ldr	r3, [pc, #164]	; (8009a84 <__ieee754_atan2f+0xec>)
 80099e0:	4618      	mov	r0, r3
 80099e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e4:	b91e      	cbnz	r6, 80099ee <__ieee754_atan2f+0x56>
 80099e6:	2f00      	cmp	r7, #0
 80099e8:	da4a      	bge.n	8009a80 <__ieee754_atan2f+0xe8>
 80099ea:	4b27      	ldr	r3, [pc, #156]	; (8009a88 <__ieee754_atan2f+0xf0>)
 80099ec:	e7f8      	b.n	80099e0 <__ieee754_atan2f+0x48>
 80099ee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80099f2:	d10e      	bne.n	8009a12 <__ieee754_atan2f+0x7a>
 80099f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80099f8:	f104 34ff 	add.w	r4, r4, #4294967295
 80099fc:	d105      	bne.n	8009a0a <__ieee754_atan2f+0x72>
 80099fe:	2c02      	cmp	r4, #2
 8009a00:	d83a      	bhi.n	8009a78 <__ieee754_atan2f+0xe0>
 8009a02:	4b22      	ldr	r3, [pc, #136]	; (8009a8c <__ieee754_atan2f+0xf4>)
 8009a04:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009a08:	e7ea      	b.n	80099e0 <__ieee754_atan2f+0x48>
 8009a0a:	2c02      	cmp	r4, #2
 8009a0c:	d836      	bhi.n	8009a7c <__ieee754_atan2f+0xe4>
 8009a0e:	4b20      	ldr	r3, [pc, #128]	; (8009a90 <__ieee754_atan2f+0xf8>)
 8009a10:	e7f8      	b.n	8009a04 <__ieee754_atan2f+0x6c>
 8009a12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009a16:	d0e6      	beq.n	80099e6 <__ieee754_atan2f+0x4e>
 8009a18:	1b92      	subs	r2, r2, r6
 8009a1a:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8009a1e:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8009a22:	da17      	bge.n	8009a54 <__ieee754_atan2f+0xbc>
 8009a24:	2900      	cmp	r1, #0
 8009a26:	da01      	bge.n	8009a2c <__ieee754_atan2f+0x94>
 8009a28:	303c      	adds	r0, #60	; 0x3c
 8009a2a:	db15      	blt.n	8009a58 <__ieee754_atan2f+0xc0>
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7f6 ffe5 	bl	80009fc <__aeabi_fdiv>
 8009a32:	f000 fe9f 	bl	800a774 <fabsf>
 8009a36:	f000 fd91 	bl	800a55c <atanf>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2c01      	cmp	r4, #1
 8009a3e:	d00d      	beq.n	8009a5c <__ieee754_atan2f+0xc4>
 8009a40:	2c02      	cmp	r4, #2
 8009a42:	d00e      	beq.n	8009a62 <__ieee754_atan2f+0xca>
 8009a44:	2c00      	cmp	r4, #0
 8009a46:	d0cb      	beq.n	80099e0 <__ieee754_atan2f+0x48>
 8009a48:	4912      	ldr	r1, [pc, #72]	; (8009a94 <__ieee754_atan2f+0xfc>)
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f6 fe1a 	bl	8000684 <__addsf3>
 8009a50:	4911      	ldr	r1, [pc, #68]	; (8009a98 <__ieee754_atan2f+0x100>)
 8009a52:	e00c      	b.n	8009a6e <__ieee754_atan2f+0xd6>
 8009a54:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <__ieee754_atan2f+0x104>)
 8009a56:	e7f1      	b.n	8009a3c <__ieee754_atan2f+0xa4>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e7ef      	b.n	8009a3c <__ieee754_atan2f+0xa4>
 8009a5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a60:	e7be      	b.n	80099e0 <__ieee754_atan2f+0x48>
 8009a62:	490c      	ldr	r1, [pc, #48]	; (8009a94 <__ieee754_atan2f+0xfc>)
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7f6 fe0d 	bl	8000684 <__addsf3>
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	480a      	ldr	r0, [pc, #40]	; (8009a98 <__ieee754_atan2f+0x100>)
 8009a6e:	f7f6 fe07 	bl	8000680 <__aeabi_fsub>
 8009a72:	e7a1      	b.n	80099b8 <__ieee754_atan2f+0x20>
 8009a74:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <__ieee754_atan2f+0x100>)
 8009a76:	e7b3      	b.n	80099e0 <__ieee754_atan2f+0x48>
 8009a78:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <__ieee754_atan2f+0x108>)
 8009a7a:	e7b1      	b.n	80099e0 <__ieee754_atan2f+0x48>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e7af      	b.n	80099e0 <__ieee754_atan2f+0x48>
 8009a80:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <__ieee754_atan2f+0x104>)
 8009a82:	e7ad      	b.n	80099e0 <__ieee754_atan2f+0x48>
 8009a84:	c0490fdb 	.word	0xc0490fdb
 8009a88:	bfc90fdb 	.word	0xbfc90fdb
 8009a8c:	0800aafc 	.word	0x0800aafc
 8009a90:	0800ab08 	.word	0x0800ab08
 8009a94:	33bbbd2e 	.word	0x33bbbd2e
 8009a98:	40490fdb 	.word	0x40490fdb
 8009a9c:	3fc90fdb 	.word	0x3fc90fdb
 8009aa0:	3f490fdb 	.word	0x3f490fdb

08009aa4 <__ieee754_rem_pio2f>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	4aa0      	ldr	r2, [pc, #640]	; (8009d2c <__ieee754_rem_pio2f+0x288>)
 8009aaa:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009aae:	4296      	cmp	r6, r2
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	4682      	mov	sl, r0
 8009ab4:	b087      	sub	sp, #28
 8009ab6:	dc04      	bgt.n	8009ac2 <__ieee754_rem_pio2f+0x1e>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6008      	str	r0, [r1, #0]
 8009abc:	604b      	str	r3, [r1, #4]
 8009abe:	2500      	movs	r5, #0
 8009ac0:	e01a      	b.n	8009af8 <__ieee754_rem_pio2f+0x54>
 8009ac2:	4a9b      	ldr	r2, [pc, #620]	; (8009d30 <__ieee754_rem_pio2f+0x28c>)
 8009ac4:	4296      	cmp	r6, r2
 8009ac6:	dc4b      	bgt.n	8009b60 <__ieee754_rem_pio2f+0xbc>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	499a      	ldr	r1, [pc, #616]	; (8009d34 <__ieee754_rem_pio2f+0x290>)
 8009acc:	4f9a      	ldr	r7, [pc, #616]	; (8009d38 <__ieee754_rem_pio2f+0x294>)
 8009ace:	f026 060f 	bic.w	r6, r6, #15
 8009ad2:	dd23      	ble.n	8009b1c <__ieee754_rem_pio2f+0x78>
 8009ad4:	f7f6 fdd4 	bl	8000680 <__aeabi_fsub>
 8009ad8:	42be      	cmp	r6, r7
 8009ada:	4605      	mov	r5, r0
 8009adc:	d010      	beq.n	8009b00 <__ieee754_rem_pio2f+0x5c>
 8009ade:	4997      	ldr	r1, [pc, #604]	; (8009d3c <__ieee754_rem_pio2f+0x298>)
 8009ae0:	f7f6 fdce 	bl	8000680 <__aeabi_fsub>
 8009ae4:	4601      	mov	r1, r0
 8009ae6:	6020      	str	r0, [r4, #0]
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f7f6 fdc9 	bl	8000680 <__aeabi_fsub>
 8009aee:	4993      	ldr	r1, [pc, #588]	; (8009d3c <__ieee754_rem_pio2f+0x298>)
 8009af0:	f7f6 fdc6 	bl	8000680 <__aeabi_fsub>
 8009af4:	2501      	movs	r5, #1
 8009af6:	6060      	str	r0, [r4, #4]
 8009af8:	4628      	mov	r0, r5
 8009afa:	b007      	add	sp, #28
 8009afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b00:	498f      	ldr	r1, [pc, #572]	; (8009d40 <__ieee754_rem_pio2f+0x29c>)
 8009b02:	f7f6 fdbd 	bl	8000680 <__aeabi_fsub>
 8009b06:	498f      	ldr	r1, [pc, #572]	; (8009d44 <__ieee754_rem_pio2f+0x2a0>)
 8009b08:	4605      	mov	r5, r0
 8009b0a:	f7f6 fdb9 	bl	8000680 <__aeabi_fsub>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	6020      	str	r0, [r4, #0]
 8009b12:	4628      	mov	r0, r5
 8009b14:	f7f6 fdb4 	bl	8000680 <__aeabi_fsub>
 8009b18:	498a      	ldr	r1, [pc, #552]	; (8009d44 <__ieee754_rem_pio2f+0x2a0>)
 8009b1a:	e7e9      	b.n	8009af0 <__ieee754_rem_pio2f+0x4c>
 8009b1c:	f7f6 fdb2 	bl	8000684 <__addsf3>
 8009b20:	42be      	cmp	r6, r7
 8009b22:	4605      	mov	r5, r0
 8009b24:	d00e      	beq.n	8009b44 <__ieee754_rem_pio2f+0xa0>
 8009b26:	4985      	ldr	r1, [pc, #532]	; (8009d3c <__ieee754_rem_pio2f+0x298>)
 8009b28:	f7f6 fdac 	bl	8000684 <__addsf3>
 8009b2c:	4601      	mov	r1, r0
 8009b2e:	6020      	str	r0, [r4, #0]
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7f6 fda5 	bl	8000680 <__aeabi_fsub>
 8009b36:	4981      	ldr	r1, [pc, #516]	; (8009d3c <__ieee754_rem_pio2f+0x298>)
 8009b38:	f7f6 fda4 	bl	8000684 <__addsf3>
 8009b3c:	f04f 35ff 	mov.w	r5, #4294967295
 8009b40:	6060      	str	r0, [r4, #4]
 8009b42:	e7d9      	b.n	8009af8 <__ieee754_rem_pio2f+0x54>
 8009b44:	497e      	ldr	r1, [pc, #504]	; (8009d40 <__ieee754_rem_pio2f+0x29c>)
 8009b46:	f7f6 fd9d 	bl	8000684 <__addsf3>
 8009b4a:	497e      	ldr	r1, [pc, #504]	; (8009d44 <__ieee754_rem_pio2f+0x2a0>)
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	f7f6 fd99 	bl	8000684 <__addsf3>
 8009b52:	4601      	mov	r1, r0
 8009b54:	6020      	str	r0, [r4, #0]
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7f6 fd92 	bl	8000680 <__aeabi_fsub>
 8009b5c:	4979      	ldr	r1, [pc, #484]	; (8009d44 <__ieee754_rem_pio2f+0x2a0>)
 8009b5e:	e7eb      	b.n	8009b38 <__ieee754_rem_pio2f+0x94>
 8009b60:	4a79      	ldr	r2, [pc, #484]	; (8009d48 <__ieee754_rem_pio2f+0x2a4>)
 8009b62:	4296      	cmp	r6, r2
 8009b64:	f300 8091 	bgt.w	8009c8a <__ieee754_rem_pio2f+0x1e6>
 8009b68:	f000 fe04 	bl	800a774 <fabsf>
 8009b6c:	4977      	ldr	r1, [pc, #476]	; (8009d4c <__ieee754_rem_pio2f+0x2a8>)
 8009b6e:	4607      	mov	r7, r0
 8009b70:	f7f6 fe90 	bl	8000894 <__aeabi_fmul>
 8009b74:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009b78:	f7f6 fd84 	bl	8000684 <__addsf3>
 8009b7c:	f7f7 f866 	bl	8000c4c <__aeabi_f2iz>
 8009b80:	4605      	mov	r5, r0
 8009b82:	f7f6 fe33 	bl	80007ec <__aeabi_i2f>
 8009b86:	496b      	ldr	r1, [pc, #428]	; (8009d34 <__ieee754_rem_pio2f+0x290>)
 8009b88:	4681      	mov	r9, r0
 8009b8a:	f7f6 fe83 	bl	8000894 <__aeabi_fmul>
 8009b8e:	4601      	mov	r1, r0
 8009b90:	4638      	mov	r0, r7
 8009b92:	f7f6 fd75 	bl	8000680 <__aeabi_fsub>
 8009b96:	4969      	ldr	r1, [pc, #420]	; (8009d3c <__ieee754_rem_pio2f+0x298>)
 8009b98:	4680      	mov	r8, r0
 8009b9a:	4648      	mov	r0, r9
 8009b9c:	f7f6 fe7a 	bl	8000894 <__aeabi_fmul>
 8009ba0:	2d1f      	cmp	r5, #31
 8009ba2:	4607      	mov	r7, r0
 8009ba4:	dc0c      	bgt.n	8009bc0 <__ieee754_rem_pio2f+0x11c>
 8009ba6:	4a6a      	ldr	r2, [pc, #424]	; (8009d50 <__ieee754_rem_pio2f+0x2ac>)
 8009ba8:	1e69      	subs	r1, r5, #1
 8009baa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009bae:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d004      	beq.n	8009bc0 <__ieee754_rem_pio2f+0x11c>
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	4640      	mov	r0, r8
 8009bba:	f7f6 fd61 	bl	8000680 <__aeabi_fsub>
 8009bbe:	e00b      	b.n	8009bd8 <__ieee754_rem_pio2f+0x134>
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f7f6 fd5c 	bl	8000680 <__aeabi_fsub>
 8009bc8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009bcc:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8009bd0:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8009bd4:	2e08      	cmp	r6, #8
 8009bd6:	dc01      	bgt.n	8009bdc <__ieee754_rem_pio2f+0x138>
 8009bd8:	6020      	str	r0, [r4, #0]
 8009bda:	e026      	b.n	8009c2a <__ieee754_rem_pio2f+0x186>
 8009bdc:	4958      	ldr	r1, [pc, #352]	; (8009d40 <__ieee754_rem_pio2f+0x29c>)
 8009bde:	4648      	mov	r0, r9
 8009be0:	f7f6 fe58 	bl	8000894 <__aeabi_fmul>
 8009be4:	4607      	mov	r7, r0
 8009be6:	4601      	mov	r1, r0
 8009be8:	4640      	mov	r0, r8
 8009bea:	f7f6 fd49 	bl	8000680 <__aeabi_fsub>
 8009bee:	4601      	mov	r1, r0
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f7f6 fd44 	bl	8000680 <__aeabi_fsub>
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	f7f6 fd41 	bl	8000680 <__aeabi_fsub>
 8009bfe:	4607      	mov	r7, r0
 8009c00:	4950      	ldr	r1, [pc, #320]	; (8009d44 <__ieee754_rem_pio2f+0x2a0>)
 8009c02:	4648      	mov	r0, r9
 8009c04:	f7f6 fe46 	bl	8000894 <__aeabi_fmul>
 8009c08:	4639      	mov	r1, r7
 8009c0a:	f7f6 fd39 	bl	8000680 <__aeabi_fsub>
 8009c0e:	4601      	mov	r1, r0
 8009c10:	4607      	mov	r7, r0
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7f6 fd34 	bl	8000680 <__aeabi_fsub>
 8009c18:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009c1c:	ebab 0b03 	sub.w	fp, fp, r3
 8009c20:	f1bb 0f19 	cmp.w	fp, #25
 8009c24:	dc16      	bgt.n	8009c54 <__ieee754_rem_pio2f+0x1b0>
 8009c26:	46b0      	mov	r8, r6
 8009c28:	6020      	str	r0, [r4, #0]
 8009c2a:	6826      	ldr	r6, [r4, #0]
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4631      	mov	r1, r6
 8009c30:	f7f6 fd26 	bl	8000680 <__aeabi_fsub>
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fd23 	bl	8000680 <__aeabi_fsub>
 8009c3a:	f1ba 0f00 	cmp.w	sl, #0
 8009c3e:	6060      	str	r0, [r4, #4]
 8009c40:	f6bf af5a 	bge.w	8009af8 <__ieee754_rem_pio2f+0x54>
 8009c44:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009c48:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009c4c:	6026      	str	r6, [r4, #0]
 8009c4e:	6060      	str	r0, [r4, #4]
 8009c50:	426d      	negs	r5, r5
 8009c52:	e751      	b.n	8009af8 <__ieee754_rem_pio2f+0x54>
 8009c54:	493f      	ldr	r1, [pc, #252]	; (8009d54 <__ieee754_rem_pio2f+0x2b0>)
 8009c56:	4648      	mov	r0, r9
 8009c58:	f7f6 fe1c 	bl	8000894 <__aeabi_fmul>
 8009c5c:	4607      	mov	r7, r0
 8009c5e:	4601      	mov	r1, r0
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7f6 fd0d 	bl	8000680 <__aeabi_fsub>
 8009c66:	4601      	mov	r1, r0
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7f6 fd08 	bl	8000680 <__aeabi_fsub>
 8009c70:	4639      	mov	r1, r7
 8009c72:	f7f6 fd05 	bl	8000680 <__aeabi_fsub>
 8009c76:	4606      	mov	r6, r0
 8009c78:	4937      	ldr	r1, [pc, #220]	; (8009d58 <__ieee754_rem_pio2f+0x2b4>)
 8009c7a:	4648      	mov	r0, r9
 8009c7c:	f7f6 fe0a 	bl	8000894 <__aeabi_fmul>
 8009c80:	4631      	mov	r1, r6
 8009c82:	f7f6 fcfd 	bl	8000680 <__aeabi_fsub>
 8009c86:	4607      	mov	r7, r0
 8009c88:	e795      	b.n	8009bb6 <__ieee754_rem_pio2f+0x112>
 8009c8a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009c8e:	db05      	blt.n	8009c9c <__ieee754_rem_pio2f+0x1f8>
 8009c90:	4601      	mov	r1, r0
 8009c92:	f7f6 fcf5 	bl	8000680 <__aeabi_fsub>
 8009c96:	6060      	str	r0, [r4, #4]
 8009c98:	6020      	str	r0, [r4, #0]
 8009c9a:	e710      	b.n	8009abe <__ieee754_rem_pio2f+0x1a>
 8009c9c:	15f7      	asrs	r7, r6, #23
 8009c9e:	3f86      	subs	r7, #134	; 0x86
 8009ca0:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f7f6 ffd1 	bl	8000c4c <__aeabi_f2iz>
 8009caa:	f7f6 fd9f 	bl	80007ec <__aeabi_i2f>
 8009cae:	4601      	mov	r1, r0
 8009cb0:	9003      	str	r0, [sp, #12]
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7f6 fce4 	bl	8000680 <__aeabi_fsub>
 8009cb8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009cbc:	f7f6 fdea 	bl	8000894 <__aeabi_fmul>
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	f7f6 ffc3 	bl	8000c4c <__aeabi_f2iz>
 8009cc6:	f7f6 fd91 	bl	80007ec <__aeabi_i2f>
 8009cca:	4601      	mov	r1, r0
 8009ccc:	9004      	str	r0, [sp, #16]
 8009cce:	4605      	mov	r5, r0
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7f6 fcd5 	bl	8000680 <__aeabi_fsub>
 8009cd6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009cda:	f7f6 fddb 	bl	8000894 <__aeabi_fmul>
 8009cde:	2100      	movs	r1, #0
 8009ce0:	9005      	str	r0, [sp, #20]
 8009ce2:	f7f6 ff6b 	bl	8000bbc <__aeabi_fcmpeq>
 8009ce6:	b1f0      	cbz	r0, 8009d26 <__ieee754_rem_pio2f+0x282>
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4628      	mov	r0, r5
 8009cec:	f7f6 ff66 	bl	8000bbc <__aeabi_fcmpeq>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	bf14      	ite	ne
 8009cf4:	2301      	movne	r3, #1
 8009cf6:	2302      	moveq	r3, #2
 8009cf8:	4a18      	ldr	r2, [pc, #96]	; (8009d5c <__ieee754_rem_pio2f+0x2b8>)
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	9201      	str	r2, [sp, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	a803      	add	r0, sp, #12
 8009d02:	9200      	str	r2, [sp, #0]
 8009d04:	463a      	mov	r2, r7
 8009d06:	f000 f8fd 	bl	8009f04 <__kernel_rem_pio2f>
 8009d0a:	f1ba 0f00 	cmp.w	sl, #0
 8009d0e:	4605      	mov	r5, r0
 8009d10:	f6bf aef2 	bge.w	8009af8 <__ieee754_rem_pio2f+0x54>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d1a:	6023      	str	r3, [r4, #0]
 8009d1c:	6863      	ldr	r3, [r4, #4]
 8009d1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d22:	6063      	str	r3, [r4, #4]
 8009d24:	e794      	b.n	8009c50 <__ieee754_rem_pio2f+0x1ac>
 8009d26:	2303      	movs	r3, #3
 8009d28:	e7e6      	b.n	8009cf8 <__ieee754_rem_pio2f+0x254>
 8009d2a:	bf00      	nop
 8009d2c:	3f490fd8 	.word	0x3f490fd8
 8009d30:	4016cbe3 	.word	0x4016cbe3
 8009d34:	3fc90f80 	.word	0x3fc90f80
 8009d38:	3fc90fd0 	.word	0x3fc90fd0
 8009d3c:	37354443 	.word	0x37354443
 8009d40:	37354400 	.word	0x37354400
 8009d44:	2e85a308 	.word	0x2e85a308
 8009d48:	43490f80 	.word	0x43490f80
 8009d4c:	3f22f984 	.word	0x3f22f984
 8009d50:	0800ab14 	.word	0x0800ab14
 8009d54:	2e85a300 	.word	0x2e85a300
 8009d58:	248d3132 	.word	0x248d3132
 8009d5c:	0800ab94 	.word	0x0800ab94

08009d60 <__ieee754_sqrtf>:
 8009d60:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009d64:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	d309      	bcc.n	8009d84 <__ieee754_sqrtf+0x24>
 8009d70:	4601      	mov	r1, r0
 8009d72:	f7f6 fd8f 	bl	8000894 <__aeabi_fmul>
 8009d76:	4601      	mov	r1, r0
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f7f6 fc83 	bl	8000684 <__addsf3>
 8009d7e:	4604      	mov	r4, r0
 8009d80:	4620      	mov	r0, r4
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d0fb      	beq.n	8009d80 <__ieee754_sqrtf+0x20>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	da06      	bge.n	8009d9a <__ieee754_sqrtf+0x3a>
 8009d8c:	4601      	mov	r1, r0
 8009d8e:	f7f6 fc77 	bl	8000680 <__aeabi_fsub>
 8009d92:	4601      	mov	r1, r0
 8009d94:	f7f6 fe32 	bl	80009fc <__aeabi_fdiv>
 8009d98:	e7f1      	b.n	8009d7e <__ieee754_sqrtf+0x1e>
 8009d9a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8009d9e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8009da2:	d029      	beq.n	8009df8 <__ieee754_sqrtf+0x98>
 8009da4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8009da8:	07cb      	lsls	r3, r1, #31
 8009daa:	f04f 0300 	mov.w	r3, #0
 8009dae:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8009db2:	f04f 0419 	mov.w	r4, #25
 8009db6:	461e      	mov	r6, r3
 8009db8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009dbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009dc0:	bf58      	it	pl
 8009dc2:	0052      	lslpl	r2, r2, #1
 8009dc4:	1040      	asrs	r0, r0, #1
 8009dc6:	0052      	lsls	r2, r2, #1
 8009dc8:	1875      	adds	r5, r6, r1
 8009dca:	4295      	cmp	r5, r2
 8009dcc:	bfde      	ittt	le
 8009dce:	186e      	addle	r6, r5, r1
 8009dd0:	1b52      	suble	r2, r2, r5
 8009dd2:	185b      	addle	r3, r3, r1
 8009dd4:	3c01      	subs	r4, #1
 8009dd6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009dda:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009dde:	d1f3      	bne.n	8009dc8 <__ieee754_sqrtf+0x68>
 8009de0:	b112      	cbz	r2, 8009de8 <__ieee754_sqrtf+0x88>
 8009de2:	3301      	adds	r3, #1
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	105c      	asrs	r4, r3, #1
 8009dea:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8009dee:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8009df2:	e7c5      	b.n	8009d80 <__ieee754_sqrtf+0x20>
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	3201      	adds	r2, #1
 8009df8:	0218      	lsls	r0, r3, #8
 8009dfa:	d5fb      	bpl.n	8009df4 <__ieee754_sqrtf+0x94>
 8009dfc:	3a01      	subs	r2, #1
 8009dfe:	1a89      	subs	r1, r1, r2
 8009e00:	e7d0      	b.n	8009da4 <__ieee754_sqrtf+0x44>
	...

08009e04 <__kernel_cosf>:
 8009e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e08:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8009e0c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8009e10:	4606      	mov	r6, r0
 8009e12:	4688      	mov	r8, r1
 8009e14:	da03      	bge.n	8009e1e <__kernel_cosf+0x1a>
 8009e16:	f7f6 ff19 	bl	8000c4c <__aeabi_f2iz>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d05c      	beq.n	8009ed8 <__kernel_cosf+0xd4>
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7f6 fd37 	bl	8000894 <__aeabi_fmul>
 8009e26:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	f7f6 fd32 	bl	8000894 <__aeabi_fmul>
 8009e30:	492b      	ldr	r1, [pc, #172]	; (8009ee0 <__kernel_cosf+0xdc>)
 8009e32:	4607      	mov	r7, r0
 8009e34:	4628      	mov	r0, r5
 8009e36:	f7f6 fd2d 	bl	8000894 <__aeabi_fmul>
 8009e3a:	492a      	ldr	r1, [pc, #168]	; (8009ee4 <__kernel_cosf+0xe0>)
 8009e3c:	f7f6 fc22 	bl	8000684 <__addsf3>
 8009e40:	4629      	mov	r1, r5
 8009e42:	f7f6 fd27 	bl	8000894 <__aeabi_fmul>
 8009e46:	4928      	ldr	r1, [pc, #160]	; (8009ee8 <__kernel_cosf+0xe4>)
 8009e48:	f7f6 fc1a 	bl	8000680 <__aeabi_fsub>
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7f6 fd21 	bl	8000894 <__aeabi_fmul>
 8009e52:	4926      	ldr	r1, [pc, #152]	; (8009eec <__kernel_cosf+0xe8>)
 8009e54:	f7f6 fc16 	bl	8000684 <__addsf3>
 8009e58:	4629      	mov	r1, r5
 8009e5a:	f7f6 fd1b 	bl	8000894 <__aeabi_fmul>
 8009e5e:	4924      	ldr	r1, [pc, #144]	; (8009ef0 <__kernel_cosf+0xec>)
 8009e60:	f7f6 fc0e 	bl	8000680 <__aeabi_fsub>
 8009e64:	4629      	mov	r1, r5
 8009e66:	f7f6 fd15 	bl	8000894 <__aeabi_fmul>
 8009e6a:	4922      	ldr	r1, [pc, #136]	; (8009ef4 <__kernel_cosf+0xf0>)
 8009e6c:	f7f6 fc0a 	bl	8000684 <__addsf3>
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f6 fd0f 	bl	8000894 <__aeabi_fmul>
 8009e76:	4629      	mov	r1, r5
 8009e78:	f7f6 fd0c 	bl	8000894 <__aeabi_fmul>
 8009e7c:	4641      	mov	r1, r8
 8009e7e:	4605      	mov	r5, r0
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7f6 fd07 	bl	8000894 <__aeabi_fmul>
 8009e86:	4601      	mov	r1, r0
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f7f6 fbf9 	bl	8000680 <__aeabi_fsub>
 8009e8e:	4b1a      	ldr	r3, [pc, #104]	; (8009ef8 <__kernel_cosf+0xf4>)
 8009e90:	4605      	mov	r5, r0
 8009e92:	429c      	cmp	r4, r3
 8009e94:	dc0a      	bgt.n	8009eac <__kernel_cosf+0xa8>
 8009e96:	4601      	mov	r1, r0
 8009e98:	4638      	mov	r0, r7
 8009e9a:	f7f6 fbf1 	bl	8000680 <__aeabi_fsub>
 8009e9e:	4601      	mov	r1, r0
 8009ea0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009ea4:	f7f6 fbec 	bl	8000680 <__aeabi_fsub>
 8009ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eac:	4b13      	ldr	r3, [pc, #76]	; (8009efc <__kernel_cosf+0xf8>)
 8009eae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009eb2:	429c      	cmp	r4, r3
 8009eb4:	bfcc      	ite	gt
 8009eb6:	4c12      	ldrgt	r4, [pc, #72]	; (8009f00 <__kernel_cosf+0xfc>)
 8009eb8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	f7f6 fbdf 	bl	8000680 <__aeabi_fsub>
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	f7f6 fbda 	bl	8000680 <__aeabi_fsub>
 8009ecc:	4629      	mov	r1, r5
 8009ece:	f7f6 fbd7 	bl	8000680 <__aeabi_fsub>
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	e7e5      	b.n	8009ea4 <__kernel_cosf+0xa0>
 8009ed8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009edc:	e7e4      	b.n	8009ea8 <__kernel_cosf+0xa4>
 8009ede:	bf00      	nop
 8009ee0:	ad47d74e 	.word	0xad47d74e
 8009ee4:	310f74f6 	.word	0x310f74f6
 8009ee8:	3493f27c 	.word	0x3493f27c
 8009eec:	37d00d01 	.word	0x37d00d01
 8009ef0:	3ab60b61 	.word	0x3ab60b61
 8009ef4:	3d2aaaab 	.word	0x3d2aaaab
 8009ef8:	3e999999 	.word	0x3e999999
 8009efc:	3f480000 	.word	0x3f480000
 8009f00:	3e900000 	.word	0x3e900000

08009f04 <__kernel_rem_pio2f>:
 8009f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f08:	b0db      	sub	sp, #364	; 0x16c
 8009f0a:	9202      	str	r2, [sp, #8]
 8009f0c:	9304      	str	r3, [sp, #16]
 8009f0e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009f10:	4bc5      	ldr	r3, [pc, #788]	; (800a228 <__kernel_rem_pio2f+0x324>)
 8009f12:	9005      	str	r0, [sp, #20]
 8009f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f18:	9100      	str	r1, [sp, #0]
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	9b04      	ldr	r3, [sp, #16]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	9b02      	ldr	r3, [sp, #8]
 8009f24:	1d1a      	adds	r2, r3, #4
 8009f26:	f2c0 809b 	blt.w	800a060 <__kernel_rem_pio2f+0x15c>
 8009f2a:	1edc      	subs	r4, r3, #3
 8009f2c:	bf48      	it	mi
 8009f2e:	1d1c      	addmi	r4, r3, #4
 8009f30:	10e4      	asrs	r4, r4, #3
 8009f32:	2500      	movs	r5, #0
 8009f34:	f04f 0a00 	mov.w	sl, #0
 8009f38:	1c67      	adds	r7, r4, #1
 8009f3a:	00fb      	lsls	r3, r7, #3
 8009f3c:	9306      	str	r3, [sp, #24]
 8009f3e:	9b02      	ldr	r3, [sp, #8]
 8009f40:	9a03      	ldr	r2, [sp, #12]
 8009f42:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8009f46:	9b01      	ldr	r3, [sp, #4]
 8009f48:	1aa6      	subs	r6, r4, r2
 8009f4a:	eb03 0802 	add.w	r8, r3, r2
 8009f4e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009f50:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8009f54:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 8009f58:	4545      	cmp	r5, r8
 8009f5a:	f340 8083 	ble.w	800a064 <__kernel_rem_pio2f+0x160>
 8009f5e:	f04f 0800 	mov.w	r8, #0
 8009f62:	f04f 0b00 	mov.w	fp, #0
 8009f66:	9b04      	ldr	r3, [sp, #16]
 8009f68:	aa1e      	add	r2, sp, #120	; 0x78
 8009f6a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009f6e:	ab46      	add	r3, sp, #280	; 0x118
 8009f70:	9a01      	ldr	r2, [sp, #4]
 8009f72:	4590      	cmp	r8, r2
 8009f74:	f340 809c 	ble.w	800a0b0 <__kernel_rem_pio2f+0x1ac>
 8009f78:	4613      	mov	r3, r2
 8009f7a:	aa0a      	add	r2, sp, #40	; 0x28
 8009f7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f80:	9308      	str	r3, [sp, #32]
 8009f82:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009f84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009f8c:	9307      	str	r3, [sp, #28]
 8009f8e:	ad0a      	add	r5, sp, #40	; 0x28
 8009f90:	462e      	mov	r6, r5
 8009f92:	46c3      	mov	fp, r8
 8009f94:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8009f98:	ab5a      	add	r3, sp, #360	; 0x168
 8009f9a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8009f9e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8009fa2:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8009fa6:	f1bb 0f00 	cmp.w	fp, #0
 8009faa:	f300 8086 	bgt.w	800a0ba <__kernel_rem_pio2f+0x1b6>
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f000 fbe3 	bl	800a77c <scalbnf>
 8009fb6:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8009fba:	4604      	mov	r4, r0
 8009fbc:	f7f6 fc6a 	bl	8000894 <__aeabi_fmul>
 8009fc0:	f7ff fc22 	bl	8009808 <floorf>
 8009fc4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8009fc8:	f7f6 fc64 	bl	8000894 <__aeabi_fmul>
 8009fcc:	4601      	mov	r1, r0
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f7f6 fb56 	bl	8000680 <__aeabi_fsub>
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	f7f6 fe39 	bl	8000c4c <__aeabi_f2iz>
 8009fda:	4606      	mov	r6, r0
 8009fdc:	f7f6 fc06 	bl	80007ec <__aeabi_i2f>
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7f6 fb4c 	bl	8000680 <__aeabi_fsub>
 8009fe8:	2f00      	cmp	r7, #0
 8009fea:	4681      	mov	r9, r0
 8009fec:	f340 8084 	ble.w	800a0f8 <__kernel_rem_pio2f+0x1f4>
 8009ff0:	f108 32ff 	add.w	r2, r8, #4294967295
 8009ff4:	ab0a      	add	r3, sp, #40	; 0x28
 8009ff6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8009ffa:	f1c7 0108 	rsb	r1, r7, #8
 8009ffe:	fa44 f301 	asr.w	r3, r4, r1
 800a002:	441e      	add	r6, r3
 800a004:	408b      	lsls	r3, r1
 800a006:	1ae4      	subs	r4, r4, r3
 800a008:	f1c7 0007 	rsb	r0, r7, #7
 800a00c:	ab0a      	add	r3, sp, #40	; 0x28
 800a00e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a012:	4104      	asrs	r4, r0
 800a014:	2c00      	cmp	r4, #0
 800a016:	dd7e      	ble.n	800a116 <__kernel_rem_pio2f+0x212>
 800a018:	2200      	movs	r2, #0
 800a01a:	4692      	mov	sl, r2
 800a01c:	3601      	adds	r6, #1
 800a01e:	4590      	cmp	r8, r2
 800a020:	f300 80b0 	bgt.w	800a184 <__kernel_rem_pio2f+0x280>
 800a024:	2f00      	cmp	r7, #0
 800a026:	dd05      	ble.n	800a034 <__kernel_rem_pio2f+0x130>
 800a028:	2f01      	cmp	r7, #1
 800a02a:	f000 80bd 	beq.w	800a1a8 <__kernel_rem_pio2f+0x2a4>
 800a02e:	2f02      	cmp	r7, #2
 800a030:	f000 80c5 	beq.w	800a1be <__kernel_rem_pio2f+0x2ba>
 800a034:	2c02      	cmp	r4, #2
 800a036:	d16e      	bne.n	800a116 <__kernel_rem_pio2f+0x212>
 800a038:	4649      	mov	r1, r9
 800a03a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a03e:	f7f6 fb1f 	bl	8000680 <__aeabi_fsub>
 800a042:	4681      	mov	r9, r0
 800a044:	f1ba 0f00 	cmp.w	sl, #0
 800a048:	d065      	beq.n	800a116 <__kernel_rem_pio2f+0x212>
 800a04a:	4639      	mov	r1, r7
 800a04c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a050:	f000 fb94 	bl	800a77c <scalbnf>
 800a054:	4601      	mov	r1, r0
 800a056:	4648      	mov	r0, r9
 800a058:	f7f6 fb12 	bl	8000680 <__aeabi_fsub>
 800a05c:	4681      	mov	r9, r0
 800a05e:	e05a      	b.n	800a116 <__kernel_rem_pio2f+0x212>
 800a060:	2400      	movs	r4, #0
 800a062:	e766      	b.n	8009f32 <__kernel_rem_pio2f+0x2e>
 800a064:	42ee      	cmn	r6, r5
 800a066:	d407      	bmi.n	800a078 <__kernel_rem_pio2f+0x174>
 800a068:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a06c:	f7f6 fbbe 	bl	80007ec <__aeabi_i2f>
 800a070:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800a074:	3501      	adds	r5, #1
 800a076:	e76f      	b.n	8009f58 <__kernel_rem_pio2f+0x54>
 800a078:	4650      	mov	r0, sl
 800a07a:	e7f9      	b.n	800a070 <__kernel_rem_pio2f+0x16c>
 800a07c:	9b05      	ldr	r3, [sp, #20]
 800a07e:	f8da 1000 	ldr.w	r1, [sl]
 800a082:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800a086:	f7f6 fc05 	bl	8000894 <__aeabi_fmul>
 800a08a:	4601      	mov	r1, r0
 800a08c:	4630      	mov	r0, r6
 800a08e:	f7f6 faf9 	bl	8000684 <__addsf3>
 800a092:	4606      	mov	r6, r0
 800a094:	f109 0901 	add.w	r9, r9, #1
 800a098:	ab46      	add	r3, sp, #280	; 0x118
 800a09a:	9a03      	ldr	r2, [sp, #12]
 800a09c:	f1aa 0a04 	sub.w	sl, sl, #4
 800a0a0:	4591      	cmp	r9, r2
 800a0a2:	ddeb      	ble.n	800a07c <__kernel_rem_pio2f+0x178>
 800a0a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a0a8:	3504      	adds	r5, #4
 800a0aa:	f108 0801 	add.w	r8, r8, #1
 800a0ae:	e75f      	b.n	8009f70 <__kernel_rem_pio2f+0x6c>
 800a0b0:	46aa      	mov	sl, r5
 800a0b2:	465e      	mov	r6, fp
 800a0b4:	f04f 0900 	mov.w	r9, #0
 800a0b8:	e7ef      	b.n	800a09a <__kernel_rem_pio2f+0x196>
 800a0ba:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f7f6 fbe8 	bl	8000894 <__aeabi_fmul>
 800a0c4:	f7f6 fdc2 	bl	8000c4c <__aeabi_f2iz>
 800a0c8:	f7f6 fb90 	bl	80007ec <__aeabi_i2f>
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	9009      	str	r0, [sp, #36]	; 0x24
 800a0d0:	f7f6 fbe0 	bl	8000894 <__aeabi_fmul>
 800a0d4:	4601      	mov	r1, r0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f7f6 fad2 	bl	8000680 <__aeabi_fsub>
 800a0dc:	f7f6 fdb6 	bl	8000c4c <__aeabi_f2iz>
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0e6:	f846 0b04 	str.w	r0, [r6], #4
 800a0ea:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f6 fac8 	bl	8000684 <__addsf3>
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	e756      	b.n	8009fa6 <__kernel_rem_pio2f+0xa2>
 800a0f8:	d106      	bne.n	800a108 <__kernel_rem_pio2f+0x204>
 800a0fa:	f108 33ff 	add.w	r3, r8, #4294967295
 800a0fe:	aa0a      	add	r2, sp, #40	; 0x28
 800a100:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a104:	1224      	asrs	r4, r4, #8
 800a106:	e785      	b.n	800a014 <__kernel_rem_pio2f+0x110>
 800a108:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a10c:	f7f6 fd74 	bl	8000bf8 <__aeabi_fcmpge>
 800a110:	4604      	mov	r4, r0
 800a112:	2800      	cmp	r0, #0
 800a114:	d134      	bne.n	800a180 <__kernel_rem_pio2f+0x27c>
 800a116:	2100      	movs	r1, #0
 800a118:	4648      	mov	r0, r9
 800a11a:	f7f6 fd4f 	bl	8000bbc <__aeabi_fcmpeq>
 800a11e:	2800      	cmp	r0, #0
 800a120:	f000 809a 	beq.w	800a258 <__kernel_rem_pio2f+0x354>
 800a124:	f108 35ff 	add.w	r5, r8, #4294967295
 800a128:	462b      	mov	r3, r5
 800a12a:	2200      	movs	r2, #0
 800a12c:	9901      	ldr	r1, [sp, #4]
 800a12e:	428b      	cmp	r3, r1
 800a130:	da4d      	bge.n	800a1ce <__kernel_rem_pio2f+0x2ca>
 800a132:	2a00      	cmp	r2, #0
 800a134:	d07c      	beq.n	800a230 <__kernel_rem_pio2f+0x32c>
 800a136:	ab0a      	add	r3, sp, #40	; 0x28
 800a138:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a13c:	3f08      	subs	r7, #8
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f000 8088 	beq.w	800a254 <__kernel_rem_pio2f+0x350>
 800a144:	4639      	mov	r1, r7
 800a146:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a14a:	f000 fb17 	bl	800a77c <scalbnf>
 800a14e:	46aa      	mov	sl, r5
 800a150:	4681      	mov	r9, r0
 800a152:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800a156:	af46      	add	r7, sp, #280	; 0x118
 800a158:	f1ba 0f00 	cmp.w	sl, #0
 800a15c:	f280 80b1 	bge.w	800a2c2 <__kernel_rem_pio2f+0x3be>
 800a160:	46a9      	mov	r9, r5
 800a162:	f04f 0a00 	mov.w	sl, #0
 800a166:	2200      	movs	r2, #0
 800a168:	f1b9 0f00 	cmp.w	r9, #0
 800a16c:	f2c0 80db 	blt.w	800a326 <__kernel_rem_pio2f+0x422>
 800a170:	a946      	add	r1, sp, #280	; 0x118
 800a172:	4617      	mov	r7, r2
 800a174:	f04f 0800 	mov.w	r8, #0
 800a178:	4b2c      	ldr	r3, [pc, #176]	; (800a22c <__kernel_rem_pio2f+0x328>)
 800a17a:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800a17e:	e0c3      	b.n	800a308 <__kernel_rem_pio2f+0x404>
 800a180:	2402      	movs	r4, #2
 800a182:	e749      	b.n	800a018 <__kernel_rem_pio2f+0x114>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	f1ba 0f00 	cmp.w	sl, #0
 800a18a:	d108      	bne.n	800a19e <__kernel_rem_pio2f+0x29a>
 800a18c:	b11b      	cbz	r3, 800a196 <__kernel_rem_pio2f+0x292>
 800a18e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a192:	602b      	str	r3, [r5, #0]
 800a194:	2301      	movs	r3, #1
 800a196:	469a      	mov	sl, r3
 800a198:	3201      	adds	r2, #1
 800a19a:	3504      	adds	r5, #4
 800a19c:	e73f      	b.n	800a01e <__kernel_rem_pio2f+0x11a>
 800a19e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	4653      	mov	r3, sl
 800a1a6:	e7f6      	b.n	800a196 <__kernel_rem_pio2f+0x292>
 800a1a8:	f108 32ff 	add.w	r2, r8, #4294967295
 800a1ac:	ab0a      	add	r3, sp, #40	; 0x28
 800a1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b6:	a90a      	add	r1, sp, #40	; 0x28
 800a1b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a1bc:	e73a      	b.n	800a034 <__kernel_rem_pio2f+0x130>
 800a1be:	f108 32ff 	add.w	r2, r8, #4294967295
 800a1c2:	ab0a      	add	r3, sp, #40	; 0x28
 800a1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1cc:	e7f3      	b.n	800a1b6 <__kernel_rem_pio2f+0x2b2>
 800a1ce:	a90a      	add	r1, sp, #40	; 0x28
 800a1d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	e7a8      	b.n	800a12c <__kernel_rem_pio2f+0x228>
 800a1da:	3301      	adds	r3, #1
 800a1dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a1e0:	2900      	cmp	r1, #0
 800a1e2:	d0fa      	beq.n	800a1da <__kernel_rem_pio2f+0x2d6>
 800a1e4:	9a04      	ldr	r2, [sp, #16]
 800a1e6:	f108 0501 	add.w	r5, r8, #1
 800a1ea:	eb08 0402 	add.w	r4, r8, r2
 800a1ee:	aa1e      	add	r2, sp, #120	; 0x78
 800a1f0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a1f4:	4498      	add	r8, r3
 800a1f6:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800a1fa:	45a8      	cmp	r8, r5
 800a1fc:	f6ff aec7 	blt.w	8009f8e <__kernel_rem_pio2f+0x8a>
 800a200:	9b07      	ldr	r3, [sp, #28]
 800a202:	46a3      	mov	fp, r4
 800a204:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a208:	f7f6 faf0 	bl	80007ec <__aeabi_i2f>
 800a20c:	f04f 0a00 	mov.w	sl, #0
 800a210:	2600      	movs	r6, #0
 800a212:	f84b 0b04 	str.w	r0, [fp], #4
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	459a      	cmp	sl, r3
 800a21a:	dd0c      	ble.n	800a236 <__kernel_rem_pio2f+0x332>
 800a21c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800a220:	465c      	mov	r4, fp
 800a222:	3501      	adds	r5, #1
 800a224:	e7e9      	b.n	800a1fa <__kernel_rem_pio2f+0x2f6>
 800a226:	bf00      	nop
 800a228:	0800aed8 	.word	0x0800aed8
 800a22c:	0800aeac 	.word	0x0800aeac
 800a230:	2301      	movs	r3, #1
 800a232:	9a08      	ldr	r2, [sp, #32]
 800a234:	e7d2      	b.n	800a1dc <__kernel_rem_pio2f+0x2d8>
 800a236:	9b05      	ldr	r3, [sp, #20]
 800a238:	f854 0904 	ldr.w	r0, [r4], #-4
 800a23c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800a240:	f7f6 fb28 	bl	8000894 <__aeabi_fmul>
 800a244:	4601      	mov	r1, r0
 800a246:	4630      	mov	r0, r6
 800a248:	f7f6 fa1c 	bl	8000684 <__addsf3>
 800a24c:	f10a 0a01 	add.w	sl, sl, #1
 800a250:	4606      	mov	r6, r0
 800a252:	e7e0      	b.n	800a216 <__kernel_rem_pio2f+0x312>
 800a254:	3d01      	subs	r5, #1
 800a256:	e76e      	b.n	800a136 <__kernel_rem_pio2f+0x232>
 800a258:	9b06      	ldr	r3, [sp, #24]
 800a25a:	9a02      	ldr	r2, [sp, #8]
 800a25c:	4648      	mov	r0, r9
 800a25e:	1a99      	subs	r1, r3, r2
 800a260:	f000 fa8c 	bl	800a77c <scalbnf>
 800a264:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a268:	4605      	mov	r5, r0
 800a26a:	f7f6 fcc5 	bl	8000bf8 <__aeabi_fcmpge>
 800a26e:	b300      	cbz	r0, 800a2b2 <__kernel_rem_pio2f+0x3ae>
 800a270:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a274:	4628      	mov	r0, r5
 800a276:	f7f6 fb0d 	bl	8000894 <__aeabi_fmul>
 800a27a:	f7f6 fce7 	bl	8000c4c <__aeabi_f2iz>
 800a27e:	f7f6 fab5 	bl	80007ec <__aeabi_i2f>
 800a282:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a286:	4681      	mov	r9, r0
 800a288:	f7f6 fb04 	bl	8000894 <__aeabi_fmul>
 800a28c:	4601      	mov	r1, r0
 800a28e:	4628      	mov	r0, r5
 800a290:	f7f6 f9f6 	bl	8000680 <__aeabi_fsub>
 800a294:	f7f6 fcda 	bl	8000c4c <__aeabi_f2iz>
 800a298:	ab0a      	add	r3, sp, #40	; 0x28
 800a29a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a29e:	4648      	mov	r0, r9
 800a2a0:	f7f6 fcd4 	bl	8000c4c <__aeabi_f2iz>
 800a2a4:	f108 0501 	add.w	r5, r8, #1
 800a2a8:	ab0a      	add	r3, sp, #40	; 0x28
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a2b0:	e748      	b.n	800a144 <__kernel_rem_pio2f+0x240>
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	f7f6 fcca 	bl	8000c4c <__aeabi_f2iz>
 800a2b8:	ab0a      	add	r3, sp, #40	; 0x28
 800a2ba:	4645      	mov	r5, r8
 800a2bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a2c0:	e740      	b.n	800a144 <__kernel_rem_pio2f+0x240>
 800a2c2:	ab0a      	add	r3, sp, #40	; 0x28
 800a2c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a2c8:	f7f6 fa90 	bl	80007ec <__aeabi_i2f>
 800a2cc:	4649      	mov	r1, r9
 800a2ce:	f7f6 fae1 	bl	8000894 <__aeabi_fmul>
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800a2d8:	4648      	mov	r0, r9
 800a2da:	f7f6 fadb 	bl	8000894 <__aeabi_fmul>
 800a2de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2e2:	4681      	mov	r9, r0
 800a2e4:	e738      	b.n	800a158 <__kernel_rem_pio2f+0x254>
 800a2e6:	f853 0b04 	ldr.w	r0, [r3], #4
 800a2ea:	f85b 1b04 	ldr.w	r1, [fp], #4
 800a2ee:	9203      	str	r2, [sp, #12]
 800a2f0:	9302      	str	r3, [sp, #8]
 800a2f2:	f7f6 facf 	bl	8000894 <__aeabi_fmul>
 800a2f6:	4601      	mov	r1, r0
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7f6 f9c3 	bl	8000684 <__addsf3>
 800a2fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a302:	4607      	mov	r7, r0
 800a304:	f108 0801 	add.w	r8, r8, #1
 800a308:	9901      	ldr	r1, [sp, #4]
 800a30a:	4588      	cmp	r8, r1
 800a30c:	dc01      	bgt.n	800a312 <__kernel_rem_pio2f+0x40e>
 800a30e:	45c2      	cmp	sl, r8
 800a310:	dae9      	bge.n	800a2e6 <__kernel_rem_pio2f+0x3e2>
 800a312:	ab5a      	add	r3, sp, #360	; 0x168
 800a314:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a318:	f843 7ca0 	str.w	r7, [r3, #-160]
 800a31c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a320:	f10a 0a01 	add.w	sl, sl, #1
 800a324:	e720      	b.n	800a168 <__kernel_rem_pio2f+0x264>
 800a326:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a328:	2b02      	cmp	r3, #2
 800a32a:	dc07      	bgt.n	800a33c <__kernel_rem_pio2f+0x438>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dc4d      	bgt.n	800a3cc <__kernel_rem_pio2f+0x4c8>
 800a330:	d02e      	beq.n	800a390 <__kernel_rem_pio2f+0x48c>
 800a332:	f006 0007 	and.w	r0, r6, #7
 800a336:	b05b      	add	sp, #364	; 0x16c
 800a338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d1f7      	bne.n	800a332 <__kernel_rem_pio2f+0x42e>
 800a342:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800a346:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800a34a:	46b8      	mov	r8, r7
 800a34c:	46aa      	mov	sl, r5
 800a34e:	f1ba 0f00 	cmp.w	sl, #0
 800a352:	dc48      	bgt.n	800a3e6 <__kernel_rem_pio2f+0x4e2>
 800a354:	46a9      	mov	r9, r5
 800a356:	f1b9 0f01 	cmp.w	r9, #1
 800a35a:	dc5f      	bgt.n	800a41c <__kernel_rem_pio2f+0x518>
 800a35c:	2000      	movs	r0, #0
 800a35e:	2d01      	cmp	r5, #1
 800a360:	dc75      	bgt.n	800a44e <__kernel_rem_pio2f+0x54a>
 800a362:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800a364:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800a366:	2c00      	cmp	r4, #0
 800a368:	d177      	bne.n	800a45a <__kernel_rem_pio2f+0x556>
 800a36a:	9900      	ldr	r1, [sp, #0]
 800a36c:	600a      	str	r2, [r1, #0]
 800a36e:	460a      	mov	r2, r1
 800a370:	604b      	str	r3, [r1, #4]
 800a372:	6090      	str	r0, [r2, #8]
 800a374:	e7dd      	b.n	800a332 <__kernel_rem_pio2f+0x42e>
 800a376:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800a37a:	f7f6 f983 	bl	8000684 <__addsf3>
 800a37e:	3d01      	subs	r5, #1
 800a380:	2d00      	cmp	r5, #0
 800a382:	daf8      	bge.n	800a376 <__kernel_rem_pio2f+0x472>
 800a384:	b10c      	cbz	r4, 800a38a <__kernel_rem_pio2f+0x486>
 800a386:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a38a:	9b00      	ldr	r3, [sp, #0]
 800a38c:	6018      	str	r0, [r3, #0]
 800a38e:	e7d0      	b.n	800a332 <__kernel_rem_pio2f+0x42e>
 800a390:	2000      	movs	r0, #0
 800a392:	af32      	add	r7, sp, #200	; 0xc8
 800a394:	e7f4      	b.n	800a380 <__kernel_rem_pio2f+0x47c>
 800a396:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800a39a:	f7f6 f973 	bl	8000684 <__addsf3>
 800a39e:	3f01      	subs	r7, #1
 800a3a0:	2f00      	cmp	r7, #0
 800a3a2:	daf8      	bge.n	800a396 <__kernel_rem_pio2f+0x492>
 800a3a4:	b1bc      	cbz	r4, 800a3d6 <__kernel_rem_pio2f+0x4d2>
 800a3a6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800a3aa:	9a00      	ldr	r2, [sp, #0]
 800a3ac:	4601      	mov	r1, r0
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800a3b2:	f7f6 f965 	bl	8000680 <__aeabi_fsub>
 800a3b6:	2701      	movs	r7, #1
 800a3b8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800a3bc:	42bd      	cmp	r5, r7
 800a3be:	da0c      	bge.n	800a3da <__kernel_rem_pio2f+0x4d6>
 800a3c0:	b10c      	cbz	r4, 800a3c6 <__kernel_rem_pio2f+0x4c2>
 800a3c2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a3c6:	9b00      	ldr	r3, [sp, #0]
 800a3c8:	6058      	str	r0, [r3, #4]
 800a3ca:	e7b2      	b.n	800a332 <__kernel_rem_pio2f+0x42e>
 800a3cc:	462f      	mov	r7, r5
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800a3d4:	e7e4      	b.n	800a3a0 <__kernel_rem_pio2f+0x49c>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	e7e7      	b.n	800a3aa <__kernel_rem_pio2f+0x4a6>
 800a3da:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800a3de:	f7f6 f951 	bl	8000684 <__addsf3>
 800a3e2:	3701      	adds	r7, #1
 800a3e4:	e7ea      	b.n	800a3bc <__kernel_rem_pio2f+0x4b8>
 800a3e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ea:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	9302      	str	r3, [sp, #8]
 800a3f4:	9201      	str	r2, [sp, #4]
 800a3f6:	f7f6 f945 	bl	8000684 <__addsf3>
 800a3fa:	9a01      	ldr	r2, [sp, #4]
 800a3fc:	4601      	mov	r1, r0
 800a3fe:	4681      	mov	r9, r0
 800a400:	4610      	mov	r0, r2
 800a402:	f7f6 f93d 	bl	8000680 <__aeabi_fsub>
 800a406:	9b02      	ldr	r3, [sp, #8]
 800a408:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7f6 f939 	bl	8000684 <__addsf3>
 800a412:	f848 0904 	str.w	r0, [r8], #-4
 800a416:	f8c8 9000 	str.w	r9, [r8]
 800a41a:	e798      	b.n	800a34e <__kernel_rem_pio2f+0x44a>
 800a41c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a420:	f8d7 a000 	ldr.w	sl, [r7]
 800a424:	4618      	mov	r0, r3
 800a426:	4651      	mov	r1, sl
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	f7f6 f92b 	bl	8000684 <__addsf3>
 800a42e:	9b01      	ldr	r3, [sp, #4]
 800a430:	4601      	mov	r1, r0
 800a432:	4680      	mov	r8, r0
 800a434:	4618      	mov	r0, r3
 800a436:	f7f6 f923 	bl	8000680 <__aeabi_fsub>
 800a43a:	4651      	mov	r1, sl
 800a43c:	f7f6 f922 	bl	8000684 <__addsf3>
 800a440:	f847 0904 	str.w	r0, [r7], #-4
 800a444:	f109 39ff 	add.w	r9, r9, #4294967295
 800a448:	f8c7 8000 	str.w	r8, [r7]
 800a44c:	e783      	b.n	800a356 <__kernel_rem_pio2f+0x452>
 800a44e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800a452:	f7f6 f917 	bl	8000684 <__addsf3>
 800a456:	3d01      	subs	r5, #1
 800a458:	e781      	b.n	800a35e <__kernel_rem_pio2f+0x45a>
 800a45a:	9900      	ldr	r1, [sp, #0]
 800a45c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800a460:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a464:	600a      	str	r2, [r1, #0]
 800a466:	604b      	str	r3, [r1, #4]
 800a468:	460a      	mov	r2, r1
 800a46a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a46e:	e780      	b.n	800a372 <__kernel_rem_pio2f+0x46e>

0800a470 <__kernel_sinf>:
 800a470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a474:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a478:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a47c:	4604      	mov	r4, r0
 800a47e:	460f      	mov	r7, r1
 800a480:	4691      	mov	r9, r2
 800a482:	da03      	bge.n	800a48c <__kernel_sinf+0x1c>
 800a484:	f7f6 fbe2 	bl	8000c4c <__aeabi_f2iz>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d035      	beq.n	800a4f8 <__kernel_sinf+0x88>
 800a48c:	4621      	mov	r1, r4
 800a48e:	4620      	mov	r0, r4
 800a490:	f7f6 fa00 	bl	8000894 <__aeabi_fmul>
 800a494:	4605      	mov	r5, r0
 800a496:	4601      	mov	r1, r0
 800a498:	4620      	mov	r0, r4
 800a49a:	f7f6 f9fb 	bl	8000894 <__aeabi_fmul>
 800a49e:	4929      	ldr	r1, [pc, #164]	; (800a544 <__kernel_sinf+0xd4>)
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f7f6 f9f6 	bl	8000894 <__aeabi_fmul>
 800a4a8:	4927      	ldr	r1, [pc, #156]	; (800a548 <__kernel_sinf+0xd8>)
 800a4aa:	f7f6 f8e9 	bl	8000680 <__aeabi_fsub>
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	f7f6 f9f0 	bl	8000894 <__aeabi_fmul>
 800a4b4:	4925      	ldr	r1, [pc, #148]	; (800a54c <__kernel_sinf+0xdc>)
 800a4b6:	f7f6 f8e5 	bl	8000684 <__addsf3>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	f7f6 f9ea 	bl	8000894 <__aeabi_fmul>
 800a4c0:	4923      	ldr	r1, [pc, #140]	; (800a550 <__kernel_sinf+0xe0>)
 800a4c2:	f7f6 f8dd 	bl	8000680 <__aeabi_fsub>
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f7f6 f9e4 	bl	8000894 <__aeabi_fmul>
 800a4cc:	4921      	ldr	r1, [pc, #132]	; (800a554 <__kernel_sinf+0xe4>)
 800a4ce:	f7f6 f8d9 	bl	8000684 <__addsf3>
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	f1b9 0f00 	cmp.w	r9, #0
 800a4d8:	d111      	bne.n	800a4fe <__kernel_sinf+0x8e>
 800a4da:	4601      	mov	r1, r0
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f7f6 f9d9 	bl	8000894 <__aeabi_fmul>
 800a4e2:	491d      	ldr	r1, [pc, #116]	; (800a558 <__kernel_sinf+0xe8>)
 800a4e4:	f7f6 f8cc 	bl	8000680 <__aeabi_fsub>
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	f7f6 f9d3 	bl	8000894 <__aeabi_fmul>
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f7f6 f8c7 	bl	8000684 <__addsf3>
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a502:	4638      	mov	r0, r7
 800a504:	f7f6 f9c6 	bl	8000894 <__aeabi_fmul>
 800a508:	4641      	mov	r1, r8
 800a50a:	4681      	mov	r9, r0
 800a50c:	4630      	mov	r0, r6
 800a50e:	f7f6 f9c1 	bl	8000894 <__aeabi_fmul>
 800a512:	4601      	mov	r1, r0
 800a514:	4648      	mov	r0, r9
 800a516:	f7f6 f8b3 	bl	8000680 <__aeabi_fsub>
 800a51a:	4629      	mov	r1, r5
 800a51c:	f7f6 f9ba 	bl	8000894 <__aeabi_fmul>
 800a520:	4639      	mov	r1, r7
 800a522:	f7f6 f8ad 	bl	8000680 <__aeabi_fsub>
 800a526:	490c      	ldr	r1, [pc, #48]	; (800a558 <__kernel_sinf+0xe8>)
 800a528:	4605      	mov	r5, r0
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7f6 f9b2 	bl	8000894 <__aeabi_fmul>
 800a530:	4601      	mov	r1, r0
 800a532:	4628      	mov	r0, r5
 800a534:	f7f6 f8a6 	bl	8000684 <__addsf3>
 800a538:	4601      	mov	r1, r0
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7f6 f8a0 	bl	8000680 <__aeabi_fsub>
 800a540:	e7d9      	b.n	800a4f6 <__kernel_sinf+0x86>
 800a542:	bf00      	nop
 800a544:	2f2ec9d3 	.word	0x2f2ec9d3
 800a548:	32d72f34 	.word	0x32d72f34
 800a54c:	3638ef1b 	.word	0x3638ef1b
 800a550:	39500d01 	.word	0x39500d01
 800a554:	3c088889 	.word	0x3c088889
 800a558:	3e2aaaab 	.word	0x3e2aaaab

0800a55c <atanf>:
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800a564:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800a568:	4604      	mov	r4, r0
 800a56a:	4680      	mov	r8, r0
 800a56c:	db0e      	blt.n	800a58c <atanf+0x30>
 800a56e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a572:	dd04      	ble.n	800a57e <atanf+0x22>
 800a574:	4601      	mov	r1, r0
 800a576:	f7f6 f885 	bl	8000684 <__addsf3>
 800a57a:	4604      	mov	r4, r0
 800a57c:	e003      	b.n	800a586 <atanf+0x2a>
 800a57e:	2800      	cmp	r0, #0
 800a580:	f300 80ce 	bgt.w	800a720 <atanf+0x1c4>
 800a584:	4c67      	ldr	r4, [pc, #412]	; (800a724 <atanf+0x1c8>)
 800a586:	4620      	mov	r0, r4
 800a588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a58c:	4b66      	ldr	r3, [pc, #408]	; (800a728 <atanf+0x1cc>)
 800a58e:	429d      	cmp	r5, r3
 800a590:	dc0e      	bgt.n	800a5b0 <atanf+0x54>
 800a592:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800a596:	da08      	bge.n	800a5aa <atanf+0x4e>
 800a598:	4964      	ldr	r1, [pc, #400]	; (800a72c <atanf+0x1d0>)
 800a59a:	f7f6 f873 	bl	8000684 <__addsf3>
 800a59e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a5a2:	f7f6 fb33 	bl	8000c0c <__aeabi_fcmpgt>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d1ed      	bne.n	800a586 <atanf+0x2a>
 800a5aa:	f04f 36ff 	mov.w	r6, #4294967295
 800a5ae:	e01c      	b.n	800a5ea <atanf+0x8e>
 800a5b0:	f000 f8e0 	bl	800a774 <fabsf>
 800a5b4:	4b5e      	ldr	r3, [pc, #376]	; (800a730 <atanf+0x1d4>)
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	429d      	cmp	r5, r3
 800a5ba:	dc7c      	bgt.n	800a6b6 <atanf+0x15a>
 800a5bc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a5c0:	429d      	cmp	r5, r3
 800a5c2:	dc67      	bgt.n	800a694 <atanf+0x138>
 800a5c4:	4601      	mov	r1, r0
 800a5c6:	f7f6 f85d 	bl	8000684 <__addsf3>
 800a5ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a5ce:	f7f6 f857 	bl	8000680 <__aeabi_fsub>
 800a5d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7f6 f853 	bl	8000684 <__addsf3>
 800a5de:	4601      	mov	r1, r0
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f7f6 fa0b 	bl	80009fc <__aeabi_fdiv>
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f7f6 f951 	bl	8000894 <__aeabi_fmul>
 800a5f2:	4601      	mov	r1, r0
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	f7f6 f94d 	bl	8000894 <__aeabi_fmul>
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	494d      	ldr	r1, [pc, #308]	; (800a734 <atanf+0x1d8>)
 800a5fe:	f7f6 f949 	bl	8000894 <__aeabi_fmul>
 800a602:	494d      	ldr	r1, [pc, #308]	; (800a738 <atanf+0x1dc>)
 800a604:	f7f6 f83e 	bl	8000684 <__addsf3>
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f6 f943 	bl	8000894 <__aeabi_fmul>
 800a60e:	494b      	ldr	r1, [pc, #300]	; (800a73c <atanf+0x1e0>)
 800a610:	f7f6 f838 	bl	8000684 <__addsf3>
 800a614:	4629      	mov	r1, r5
 800a616:	f7f6 f93d 	bl	8000894 <__aeabi_fmul>
 800a61a:	4949      	ldr	r1, [pc, #292]	; (800a740 <atanf+0x1e4>)
 800a61c:	f7f6 f832 	bl	8000684 <__addsf3>
 800a620:	4629      	mov	r1, r5
 800a622:	f7f6 f937 	bl	8000894 <__aeabi_fmul>
 800a626:	4947      	ldr	r1, [pc, #284]	; (800a744 <atanf+0x1e8>)
 800a628:	f7f6 f82c 	bl	8000684 <__addsf3>
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7f6 f931 	bl	8000894 <__aeabi_fmul>
 800a632:	4945      	ldr	r1, [pc, #276]	; (800a748 <atanf+0x1ec>)
 800a634:	f7f6 f826 	bl	8000684 <__addsf3>
 800a638:	4639      	mov	r1, r7
 800a63a:	f7f6 f92b 	bl	8000894 <__aeabi_fmul>
 800a63e:	4943      	ldr	r1, [pc, #268]	; (800a74c <atanf+0x1f0>)
 800a640:	4607      	mov	r7, r0
 800a642:	4628      	mov	r0, r5
 800a644:	f7f6 f926 	bl	8000894 <__aeabi_fmul>
 800a648:	4941      	ldr	r1, [pc, #260]	; (800a750 <atanf+0x1f4>)
 800a64a:	f7f6 f819 	bl	8000680 <__aeabi_fsub>
 800a64e:	4629      	mov	r1, r5
 800a650:	f7f6 f920 	bl	8000894 <__aeabi_fmul>
 800a654:	493f      	ldr	r1, [pc, #252]	; (800a754 <atanf+0x1f8>)
 800a656:	f7f6 f813 	bl	8000680 <__aeabi_fsub>
 800a65a:	4629      	mov	r1, r5
 800a65c:	f7f6 f91a 	bl	8000894 <__aeabi_fmul>
 800a660:	493d      	ldr	r1, [pc, #244]	; (800a758 <atanf+0x1fc>)
 800a662:	f7f6 f80d 	bl	8000680 <__aeabi_fsub>
 800a666:	4629      	mov	r1, r5
 800a668:	f7f6 f914 	bl	8000894 <__aeabi_fmul>
 800a66c:	493b      	ldr	r1, [pc, #236]	; (800a75c <atanf+0x200>)
 800a66e:	f7f6 f807 	bl	8000680 <__aeabi_fsub>
 800a672:	4629      	mov	r1, r5
 800a674:	f7f6 f90e 	bl	8000894 <__aeabi_fmul>
 800a678:	4601      	mov	r1, r0
 800a67a:	4638      	mov	r0, r7
 800a67c:	f7f6 f802 	bl	8000684 <__addsf3>
 800a680:	4621      	mov	r1, r4
 800a682:	f7f6 f907 	bl	8000894 <__aeabi_fmul>
 800a686:	1c73      	adds	r3, r6, #1
 800a688:	4601      	mov	r1, r0
 800a68a:	d133      	bne.n	800a6f4 <atanf+0x198>
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7f5 fff7 	bl	8000680 <__aeabi_fsub>
 800a692:	e772      	b.n	800a57a <atanf+0x1e>
 800a694:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a698:	f7f5 fff2 	bl	8000680 <__aeabi_fsub>
 800a69c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f7f5 ffee 	bl	8000684 <__addsf3>
 800a6a8:	4601      	mov	r1, r0
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f7f6 f9a6 	bl	80009fc <__aeabi_fdiv>
 800a6b0:	2601      	movs	r6, #1
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	e799      	b.n	800a5ea <atanf+0x8e>
 800a6b6:	4b2a      	ldr	r3, [pc, #168]	; (800a760 <atanf+0x204>)
 800a6b8:	429d      	cmp	r5, r3
 800a6ba:	dc14      	bgt.n	800a6e6 <atanf+0x18a>
 800a6bc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800a6c0:	f7f5 ffde 	bl	8000680 <__aeabi_fsub>
 800a6c4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f7f6 f8e2 	bl	8000894 <__aeabi_fmul>
 800a6d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a6d4:	f7f5 ffd6 	bl	8000684 <__addsf3>
 800a6d8:	4601      	mov	r1, r0
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f7f6 f98e 	bl	80009fc <__aeabi_fdiv>
 800a6e0:	2602      	movs	r6, #2
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	e781      	b.n	800a5ea <atanf+0x8e>
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	481e      	ldr	r0, [pc, #120]	; (800a764 <atanf+0x208>)
 800a6ea:	f7f6 f987 	bl	80009fc <__aeabi_fdiv>
 800a6ee:	2603      	movs	r6, #3
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	e77a      	b.n	800a5ea <atanf+0x8e>
 800a6f4:	4b1c      	ldr	r3, [pc, #112]	; (800a768 <atanf+0x20c>)
 800a6f6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800a6fa:	f7f5 ffc1 	bl	8000680 <__aeabi_fsub>
 800a6fe:	4621      	mov	r1, r4
 800a700:	f7f5 ffbe 	bl	8000680 <__aeabi_fsub>
 800a704:	4b19      	ldr	r3, [pc, #100]	; (800a76c <atanf+0x210>)
 800a706:	4601      	mov	r1, r0
 800a708:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a70c:	f7f5 ffb8 	bl	8000680 <__aeabi_fsub>
 800a710:	f1b8 0f00 	cmp.w	r8, #0
 800a714:	4604      	mov	r4, r0
 800a716:	f6bf af36 	bge.w	800a586 <atanf+0x2a>
 800a71a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a71e:	e72c      	b.n	800a57a <atanf+0x1e>
 800a720:	4c13      	ldr	r4, [pc, #76]	; (800a770 <atanf+0x214>)
 800a722:	e730      	b.n	800a586 <atanf+0x2a>
 800a724:	bfc90fdb 	.word	0xbfc90fdb
 800a728:	3edfffff 	.word	0x3edfffff
 800a72c:	7149f2ca 	.word	0x7149f2ca
 800a730:	3f97ffff 	.word	0x3f97ffff
 800a734:	3c8569d7 	.word	0x3c8569d7
 800a738:	3d4bda59 	.word	0x3d4bda59
 800a73c:	3d886b35 	.word	0x3d886b35
 800a740:	3dba2e6e 	.word	0x3dba2e6e
 800a744:	3e124925 	.word	0x3e124925
 800a748:	3eaaaaab 	.word	0x3eaaaaab
 800a74c:	bd15a221 	.word	0xbd15a221
 800a750:	3d6ef16b 	.word	0x3d6ef16b
 800a754:	3d9d8795 	.word	0x3d9d8795
 800a758:	3de38e38 	.word	0x3de38e38
 800a75c:	3e4ccccd 	.word	0x3e4ccccd
 800a760:	401bffff 	.word	0x401bffff
 800a764:	bf800000 	.word	0xbf800000
 800a768:	0800aef4 	.word	0x0800aef4
 800a76c:	0800aee4 	.word	0x0800aee4
 800a770:	3fc90fdb 	.word	0x3fc90fdb

0800a774 <fabsf>:
 800a774:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a778:	4770      	bx	lr
	...

0800a77c <scalbnf>:
 800a77c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4603      	mov	r3, r0
 800a784:	460d      	mov	r5, r1
 800a786:	4604      	mov	r4, r0
 800a788:	d02a      	beq.n	800a7e0 <scalbnf+0x64>
 800a78a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a78e:	d304      	bcc.n	800a79a <scalbnf+0x1e>
 800a790:	4601      	mov	r1, r0
 800a792:	f7f5 ff77 	bl	8000684 <__addsf3>
 800a796:	4603      	mov	r3, r0
 800a798:	e022      	b.n	800a7e0 <scalbnf+0x64>
 800a79a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800a79e:	d117      	bne.n	800a7d0 <scalbnf+0x54>
 800a7a0:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800a7a4:	f7f6 f876 	bl	8000894 <__aeabi_fmul>
 800a7a8:	4a17      	ldr	r2, [pc, #92]	; (800a808 <scalbnf+0x8c>)
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4295      	cmp	r5, r2
 800a7ae:	db0b      	blt.n	800a7c8 <scalbnf+0x4c>
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a7b6:	3a19      	subs	r2, #25
 800a7b8:	442a      	add	r2, r5
 800a7ba:	2afe      	cmp	r2, #254	; 0xfe
 800a7bc:	dd0a      	ble.n	800a7d4 <scalbnf+0x58>
 800a7be:	4913      	ldr	r1, [pc, #76]	; (800a80c <scalbnf+0x90>)
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f361 001e 	bfi	r0, r1, #0, #31
 800a7c6:	e000      	b.n	800a7ca <scalbnf+0x4e>
 800a7c8:	4911      	ldr	r1, [pc, #68]	; (800a810 <scalbnf+0x94>)
 800a7ca:	f7f6 f863 	bl	8000894 <__aeabi_fmul>
 800a7ce:	e7e2      	b.n	800a796 <scalbnf+0x1a>
 800a7d0:	0dd2      	lsrs	r2, r2, #23
 800a7d2:	e7f1      	b.n	800a7b8 <scalbnf+0x3c>
 800a7d4:	2a00      	cmp	r2, #0
 800a7d6:	dd05      	ble.n	800a7e4 <scalbnf+0x68>
 800a7d8:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800a7dc:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	f112 0f16 	cmn.w	r2, #22
 800a7e8:	da05      	bge.n	800a7f6 <scalbnf+0x7a>
 800a7ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a7ee:	4295      	cmp	r5, r2
 800a7f0:	dce5      	bgt.n	800a7be <scalbnf+0x42>
 800a7f2:	4907      	ldr	r1, [pc, #28]	; (800a810 <scalbnf+0x94>)
 800a7f4:	e7e4      	b.n	800a7c0 <scalbnf+0x44>
 800a7f6:	3219      	adds	r2, #25
 800a7f8:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800a7fc:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800a800:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800a804:	e7e1      	b.n	800a7ca <scalbnf+0x4e>
 800a806:	bf00      	nop
 800a808:	ffff3cb0 	.word	0xffff3cb0
 800a80c:	7149f2ca 	.word	0x7149f2ca
 800a810:	0da24260 	.word	0x0da24260

0800a814 <__errno>:
 800a814:	4b01      	ldr	r3, [pc, #4]	; (800a81c <__errno+0x8>)
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	200000ec 	.word	0x200000ec

0800a820 <_init>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr

0800a82c <_fini>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr
